{"graph_dict": {"Subgrounds": [["can be installed via", "pip"], ["can be installed via", "commands"], ["can be installed via", "pip install"], ["can be installed via", "upgrade subgrounds"], ["can be installed via", "python m pip install"], ["can be installed via", "m pip install"], ["can be installed via", "pip with the following commands"], ["can be installed via", "pip install -"], ["can be installed via", "python m pip install -"], ["can be installed via", "m pip install -"], ["requires", "python >= 3.10"], ["load", "subgraph"], ["load", "GraphQL API"], ["execute", "querying operations"], ["initialized once", "reused throughout a project"], ["initialize", "Subgrounds object"], ["load", "GraphQL API"], ["load_subgraph", "\"https://api.thegraph.com/subgraphs/name/messari/aave-v2-ethereum\""], ["load_api", "\"https://hub.snapshot.org/graphql\""], ["query", "[aave_v2.Query.markets.name]"], ["load_subgraph", "\"https://api.thegraph.com/subgraphs/name/messari/curve\\n\\n\\nfinance\\n\\n\\nethereum\""], ["load_subgraph", "curve.Query.pools"], ["load_subgraph", "\"https://api.thegraph.com/subgraphs/name/messari/curve\\n\\n\\nfinance\""], ["load_subgraph", "\"https://api.thegraph.com/subgraphs/name/messari/curve/finance/ethereum\""], ["query_df", "curve.Query.liquidityPool(orderBy=pool.cumulativeTotalRevenueUSD)"], ["provides", "3 main ways to query data"], ["provides", "different data structures and typing"], ["query", "data"], ["query", "different data structures and typing"], ["query", "rest"], ["query", "3 main ways to query data"], ["query", "provide different data structures and typing"], ["query", "provide rest"], ["query", "provide 3 main ways to query data"], ["query", "provide different data structures and typing"], ["query", "query()"], ["query_json", "query_json()"], ["query_df", "query_df()"], ["load_subgraph", "\"https://api.thegraph.com/subgraphs/name/messari/aavev2\""], ["load_subgraph", "Ethereum"], ["load_subgraph", "Aave V2 data"], ["load_subgraph", "sg.load_subgraph"], ["load_subgraph", "messari/aavev2"], ["load_subgraph", "api.thegraph.com/subgraphs/name/messari/aavev2"], ["load_subgraph", "subgrounds.load_subgraph"], ["provides", "two pagination strategies"], ["raises", "a PaginationError exception"], ["provides", "LegacyStrategy"], ["provides", "ShallowStrategy"], ["allows", "developers"], ["paginate", "query document"], ["paginate", "pagination strategy"], ["is", "library"], ["load_subgraph", "\"https://api.thegraph.com/subgraphs/name/messari/curve\\n\\n\\n\\nfinance\\n\\n\\n\\nethereum\""], ["load_subgraph", "\"https://api.thegraph.com/subgraphs/name/messari/aave\\n\\n\\n\\nv2\\n\\n\\n\\nethereum\""], ["load_subgraph", "\"https://api.thegraph.com/subgraphs/name/messari/lido\""], ["load_subgraph", "\"https://api.thegraph.com/subgraphs/name/messari/aave\\n\\n\\n\\nv2\\n\\n\\n\\nethereum\""], ["load_subgraph", "\"https://api.thegraph.com/subgraphs/name/messari/lido\""], ["execute", "DataRequest"], ["execute_iter", "DataRequest"], ["query_json", "Subgrounds.mk_request"], ["query_json_iter", "Subgrounds.mk_request"], ["query_df", "Subgrounds.query"], ["load_subgraph", "uniswap/uniswap-v3"], ["load_api", "None"], ["mk_request", "None"], ["execute", "None"], ["execute_iter", "None"], ["query_json", "None"], ["query_json_iter", "None"], ["query_df", "None"], ["query_df_iter", "None"], ["query", "None"], ["execute", "Subgrounds.mk_request"], ["execute_iter", "Subgrounds.mk_request"], ["query_json", "Subgrounds.mk_request"], ["load_subgraph", "'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3'"], ["load_subgraph", "'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3'"], ["load_subgraph", "'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3'"], ["load_subgraph", "'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3'"], ["simplifies and streamlines", "querying and data analysis"], ["initialized with", "API key"], ["initialized with", "playgrounds api key"], ["initialized with", "custom header"], ["initialized with", "headers"], ["initialized with", "Playgrounds Api Key"], ["initialized with", "PG_API_KEY"], ["initialized with", "environment variable"], ["initialized with", "subgraph"], ["query a decentralized subgraph", "subgraph"], ["load_subgraph", "\"https://api.thegraph.com/subgraphs/name/messari/stargate-ethereum\""], ["Query.usageMetricsDailySnapshots", "first=1000"], ["Initialize", "Subgrounds"], ["load", "subgraph"], ["load_subgraph", "subgraph_url"], ["sg", "load_subgraph"], ["sg", "load_subgraph"], ["sg", "load_subgraph"], ["sg", "load_subgraph"], ["sg", "load_subgraph"], ["sg", "load_subgraph"], ["sg", "load_subgraph"], ["imports", "libraries"], ["loads", "environment variables"], ["creates", "Subgrounds object"], ["loads", "Uniswap v3 subgraph"], ["queries", "financialsDailySnapshots endpoint"], ["converts", "query results"], ["extracts", "first row"], ["view", "result"], ["queries", "liquidity pools"], ["retrieves", "information"], ["Uniswap v3 subgraph", "liquidity pools"], ["load_subgraph", "Uniswap v3 subgraph"], ["query_df", "latest_snapshots"], ["query_df", "res"], ["query_df", "res2"], ["is imported for", "handling decentralized subgraphs"], ["is used to load", "subgraphs"], ["query data from", "subgraphs"], ["fetch the queried data in", "pandas DataFrames"], ["making it easy to manipulate and analyze", "data"], ["interact with", "Lido and Rocket Pool subgraphs"], ["Load subgraphs for", "Lido"], ["Load subgraphs for", "rocketPool_subgraph"], ["Import", "subgrounds"], ["instantiate", "subgrounds"], ["insert", "Playgrounds API key"], ["from_pg_key", "\"pg-AqAFS8G3TN3Kagdgw2MrGjFvDGUgxImS\""]], "Aave v2 protocol": [["queries", "top 5 markets"], ["selects", "name and TVL"], ["returns", "data as a pandas DataFrame"]], "FieldPaths": [["main building blocks", "construct Subgrounds queries"]], "curve.Query.pools": [["is", "field path"], ["call", "it"]], "curve_pools": [["curve.Query.liquidityPools", "first=10"], ["curve.LiquidityPool.totalValueLockedUSD", "desc"]], "Filtering subgraphs": [["is done via", "where argument"]], "subgraphs": [["provides", "several options"]], "filter": [["based on", "field path"], ["Returns a new Query object", "all selections s"]], "filtering": [["can be based on", "standard comparison logic"], ["can be based on", "numeric fields"]], "entities": [["can have", "layer of nestable objects"]], "nestable objects": [["are filterable", "in where clause"]], "GraphQL form": [["assumes", "you are matching exact value"]], "Filtering": [["Matching Values", "Comparisons"], ["Nested Filtering", "Playgrounds"]], "curve.Query.liquidityPool": [["orderBy", "pool.cumulativeTotalRevenueUSD"]], "aave_markets": [["is", "Query.markets"], ["first", "3"], ["orderBy", "Market.totalValueLockedUSD"], ["orderDirection", "\"desc\""], ["where", "Market.createdBlockNumber > 14720000"]], "sg.query": [["list of names and a matching list TVL values", "returned"]], "sg.query_json": [["a more complex JSON data structure", "returned"]], "sushiswap": [["load_subgraph", "\"https://api.thegraph.com/subgraphs/name/sushiswap/exchange\""]], "swap": [["price1", "( abs(swap.amount0Out - swap.amount0In) / abs(swap.amount1Out - swap.amount1In) )"]], "weth_usdc": [["orderBy", "swap.timestamp"], ["orderDirection", "\"desc\""], ["first", "10"]], "SyntheticField": [["f", "lambda timestamp: str(datetime.fromtimestamp(timestamp))"], ["type_", "SyntheticField.STRING"], ["deps", "swap.timestamp"], ["map", "values"], ["map", "key value pairs"], ["map", "fpath"], ["map", "default"], ["map", "dictionary"], ["map", "values"], ["map", "key value pairs"], ["map", "fpath"], ["is", "constant"], ["SyntheticField", "SyntheticField"], ["transform", "FieldPath"], ["representing", "ISO8601 datetime string"], ["return type", "SyntheticField"], ["map", "values"], ["_", "f"], ["_", "type_"], ["_", "deps"], ["_", "default"], ["returns", "constant"], ["with value", "value"], ["useful for", "injecting additional static data"], ["useful for", "merging entities"], ["has parameters", "value"], ["has return type", "SyntheticField"], ["map", "values"], ["map", "fpath"], ["map", "dict"], ["map", "default"], ["map", "key value pairs"], ["map", "key"], ["map", "pairs"], ["map", "values of fpath"], ["map", "values of fpath using key value pairs"], ["map", "values of fpath using the key value pairs in dict"], ["has", "f"], ["has", "type_"], ["has", "deps"], ["has", "default"], ["is", "a schema"], ["merging", "entities"], ["injecting", "data"], ["useful for", "static data"], ["constant", "'MINT'"], ["constant", "'BURN'"], ["will map", "values"], ["using", "key value pairs"], ["in", "dict"], ["will transform", "FieldPath"], ["representing", "Unix timestamp field"], ["returns", "ISO8601 datetime string"], ["has", "return type"], ["named", "datetime"], ["named", "inputTokenBalance_decimalConv"]], "Pagination": [["is performed by", "Subgrounds"], ["Strategies", "StopPagination"], ["is", "pagination/"], ["normalize", "None"], ["paginate_iter", "None"], ["paginate", "None"], ["PaginationError", "None"], ["PaginationNode", "None"], ["contains", "pagination algorithms"], ["make use of", "pagination strategies"]], "PaginationStrategy": [["implements", "the PaginationStrategy protocol"], ["is in", "the state it was in"], ["is", "pagination/#subgrounds.pagination.pagination.PaginationStrategy"], ["takes", "*args and **kwargs"], ["raises", "StopPagination exception"]], "PaginationError": [["contains", "the initial exception message"], ["contains", "the PaginationStrategy object"], ["is", "pagination/#subgrounds.pagination.pagination.PaginationError"]], "LegacyStrategy": [["supports", "pagination on nested fields"]], "ShallowStrategy": [["is faster than", "LegacyStrategy"]], "class": [["implements", "PaginationStrategy"], ["constructor", "accept"], ["raise", "SkipPagination"], ["step", "located"], ["LegacyStrategyArgGenerator", "pagination_nodes"], ["Cursor", "page_node"]], "method": [["accepts", "argument"], ["return", "tuple"], ["raise", "StopPagination"]], "Indicator": [["value", "pair.token0Price"], ["is", "graph_object"]], "Figure": [["subgrounds", "sg"], ["traces", "Indicator(value=pair.token0Price)"]], "Scatter": [["Bar", "plots"], ["is", "a class"], ["is alias of", "graph_object"]], "subgrounds": [["is integrated through", "clients"], ["load_subgraph", "url"], ["load_subgraph", "save_schema"], ["load_subgraph", "cache_dir"], ["load_api", "url"], ["load_api", "save_schema"], ["load_api", "cache_dir"]], "subgrounds.Subgrounds": [["bases", "object"], ["global_transforms", "list[subgrounds.transform.RequestTransform]"]], "DataRequest": [["mk_request", "FieldPath"], ["execute", "Subgrounds"], ["execute_iter", "Subgrounds"], ["mk_request", "FieldPath"], ["execute", "DataRequest"], ["execute_iter", "DataRequest"], ["query_json", "DataRequest"], ["execute", "pagination_strategy"], ["execute_iter", "pagination_strategy"], ["query_json", "pagination_strategy"]], "FieldPath": [["included in", "request"], ["Returns", "type information"], ["Returns", "root field"], ["Returns", "leaf field"], ["Parameters", "fpaths"], ["Returns", "Selection tree"], ["Returns", "list of field names"], ["Generates", "name"], ["Extract", "data"], ["Returns", "selection"], ["into", "human-readable ISO8601 string"]], "Pandas DataFrame": [["formats", "response data"]], "'columns'": [["'is used to rename'", "'dataframes'"], ["'must be the same as'", "'number of columns'"]], "'concat'": [["'indicates whether or not'", "'resulting dataframes should be concatenated together'"]], "'dataframes'": [["'must have the same'", "'number of columns'"], ["'must have the same'", "'column names and types'"]], "'names'": [["'can be set using'", "'columns argument'"]], "'Returns'": [["'DataFrame containing'", "'reponse data'"]], "'Return type'": [["'pd.DataFrame'", "'list'"]], "'Query'": [["'last 10 swaps from'", "'ETH/USDC pool'"]], "'where'": [["'univ3.Swap.pool'", "\"'0x8ad599c3a0ff1de082011efddc58f1908eb6e6d8'\""]], "Subgraph Utilities": [["has class", "Subgraph"], ["has class", "FieldPath"], ["has class", "SyntheticField"], ["constant", "SyntheticField"], ["has method", "constant"], ["has method", "load_subgraph"], ["has attribute", "Mint"], ["has attribute", "Burn"], ["has method", "Query"], ["has method", "query_df"]], "0xcbe1bacacc1e64fe613ae5eef2063563bd0057d1e3df": [["has timestamp", "1656016553"], ["has tx_type", "MINT"], ["has origin", "0x3435e7946d40b1a83c0cf154326fc6b3ca908952"], ["has amount_USD", "7.879784e+03"]], "0xdddaaddf59e5a3abff4feadef83b3ceb023a74424ea7": [["has timestamp", "1656016284"], ["has tx_type", "MINT"], ["has origin", "0xc747962e7e416e2a582813b1d7ad59eb83077fa6"], ["has amount_USD", "5.110840e+04"]], "0xa7671452c34a3b083083ef81e364489c2c9ee801a3b8": [["has timestamp", "1656016284"], ["has tx_type", "BURN"]], "StaticField": [["map", "values"]], "Plotly": [["is", "a library"], ["is", "a contribution"], ["is", "a subpackage"], ["extends", "subgrounds components"], ["is", "a library"], ["provides", "various types of charts"]], "TraceWrapper": [["is", "a class"], ["extends", "plotly components"]], "Pie": [["is", "a class"], ["is alias of", "graph_object"]], "Bar": [["is", "a class"], ["is alias of", "graph_object"]], "Heatmap": [["is", "a class"], ["is alias of", "graph_object"]], "Contour": [["is", "a class"], ["is alias of", "graph_object"]], "Table": [["is", "a class"], ["is alias of", "graph_object"]], "Waterfall": [["is", "graph_object"]], "Funnel": [["is", "graph_object"]], "Scatter3d": [["is", "graph_object"]], "Surface": [["is", "graph_object"]], "Scattergeo": [["is", "graph_object"]], "Choropleth": [["is", "graph_object"]], "Scattermapbox": [["is", "graph_object"]], "Choroplethmapbox": [["is", "graph_object"]], "Densitymapbox": [["is", "graph_object"]], "subgraph/fieldpath/#subgrounds.subgraph.fieldpath.FieldPath._merge": [["is", "a method"]], "subgraph/fieldpath/#subgrounds.subgraph.fieldpath.FieldPath._name_path": [["is", "a method"]], "subgraph/fieldpath/#subgrounds.subgraph.fieldpath.FieldPath._name": [["is", "a method"]], "subgraph/fieldpath/#subgrounds.subgraph.fieldpath.FieldPath._extract_data": [["is", "a method"]], "subgraph/fieldpath/#subgrounds.subgraph.fieldpath.FieldPath._selection": [["is", "a method"]], "subgraph/fieldpath/#subgrounds.subgraph.fieldpath.FieldPath._set_arguments": [["is", "a method"]], "subgraph/fieldpath/#subgrounds.subgraph.fieldpath.FieldPath._select": [["is", "a method"]], "subgraph/fieldpath/#subgrounds.subgraph.fieldpath.FieldPath._extend": [["is", "a method"]], "subgraph/fieldpath/#subgrounds.subgraph.fieldpath.SyntheticField": [["is", "a class"]], "subgraph/fieldpath/#subgrounds.subgraph.fieldpath.SyntheticField.constant": [["is", "a method"]], "VariableDefinition": [["name", "query/#subgrounds.query.VariableDefinition.name"], ["type_", "query/#subgrounds.query.VariableDefinition.type_"], ["default", "query/#subgrounds.query.VariableDefinition.default"], ["graphql", "query/#subgrounds.query.VariableDefinition.graphql"], ["name", "argument"], ["type", "GraphQL type"], ["default", "Default value"], ["GraphQL string representation", "variable definition"]], "Argument": [["None", "query/#subgrounds.query.Argument"]], "Selection": [["None", "query/#subgrounds.query.Selection"], ["fmeta", "query/#subgrounds.query.Selection.fmeta"], ["alias", "query/#subgrounds.query.Selection.alias"], ["arguments", "query/#subgrounds.query.Selection.arguments"], ["selection", "query/#subgrounds.query.Selection.selection"], ["contains", "other"], ["is subtree of", "Selection"], ["contains_argument", "argname"], ["get_argument", "argname"], ["get_argument_by_variable", "varname"]], "subgrounds.FieldPath": [["is", "FieldOperatorMixin"], ["has", "subgraph"], ["has", "url"], ["has", "schema"], ["has", "transforms"], ["has", "is_subgraph"]], "subgrounds.Subgraph": [["is", "object"], ["has", "url"], ["has", "schema"], ["has", "transforms"], ["has", "is_subgraph"]], "fpaths": [["is", "list"], ["should be included in", "request"], ["is", "FieldPath objects"], ["should be included in", "request"], ["is", "FieldPath object(s)"], ["query", "FieldPath object(s)"], ["is", "list"], ["query_iter", "iterator"], ["is", "list of FieldPath objects"], ["yielded", "response data"]], "response data": [["is", "The reponse data"], ["Return type", "list"], ["Return type", "dict"], ["Return type", "str"], ["yielded by", "DataRequest objects"], ["transformed to", "transformed response data"], ["yielded by", "Document objects"], ["transformed to", "transformed response data"]], "query_json_iter": [["returns", "iterator"], ["over", "response data pages"], ["pagination_strategy", "LegacyStrategy"]], "query_df": [["is", "Subgrounds.query()"]], "query_df_iter": [["returns", "iterator"], ["over", "response data pages"], ["as", "DataFrame"], ["pagination_strategy", "LegacyStrategy"], ["each", "as a DataFrame"], ["as", "Iterator[pd.DataFrame]"]], "query": [["executes", "FieldPath objects"], ["immediately and return", "data"], ["as", "tuple"], ["if", "multiple FieldPath objects are provided"], ["transformed to", "query"], ["transformed to", "variables"], ["fetch", "pools entity"]], "FieldPath object(s)": [["to query", "data"], ["data", "FieldPath object(s)"], ["to query", "data"], ["data", "pages"]], "iterator": [["returned", "data pages"]], "value": [["is", "constant"], ["str", "_"], ["int", "_"], ["float", "_"], ["bool", "_"], ["is", "The constant field's value"], ["is in", "dictionary"], ["will be used", "instead"]], "univ3": [["Mint.tx_type", "SyntheticField.constant('MINT')"], ["Burn.tx_type", "SyntheticField.constant('BURN')"]], "897983e+03": [["4", "0x3315617d426fc2b0db5d8dbccd549efaa8f1ae2969ca"], ["4", "0x3315617d426fc2b0db5d8dbccd549efaa8f1ae2969ca"]], "1656015693": [["MINT", "0xb7dd4d134b1794ee848e1af1a62b85d7b2ea9301"], ["MINT", "0xb7dd4d134b1794ee848e1af1a62b85d7b2ea9301"], ["MINT", "0xb7dd4d134b1794ee848e1af1a62b85d7b2ea9301"]], "0x7bbfae86f0c3c983651bd0671557cd851fc301317c06": [["1656015111", "MINT"]], "0xac56cee8ccd00d0c1d72ce3415140874552e80f4": [["3.432075e+04", "12"]], "0xea21c3a68a8f0c6a2721a3072e0c8b2edc77f4d2f0d9": [["1656014785", "BURN"]], "0x0709b103d46d71458a71e5d81230dd688809a53d": [["2.059106e+04", "6"]], "1656014120": [["MINT", "0x509984bfc0fb24e2d1377cfec224d3afec4c341e"], ["MINT", "0x509984bfc0fb24e2d1377cfec224d3afec4c341e"]], "2.517578e+03": [["13", "0x1ea59da77c442479af8fb51501a931260d473e249de7"]], "1656014018": [["BURN", "0x509984bfc0fb24e2d1377cfec224d3afec4c341e"]], "0xb9d31ef78b8bf786b422d948dd1fba246710078abff8": [["1656013998", "MINT"]], "1656013237": [["BURN", "0x665d2d2444f2384fb3d96aaa0ea3536b92984dce"]], "1656013034": [["BURN", "0x0084ee6c8893c01e252198b56ec127443dc27464"]], "static": [["datetime_of_timestamp", "timestamp"]], "timestamp": [["representing", "Unix timestamp field"]], "fpath": [["mapped using", "dictionary"]], "'0x5777d92f208679db4b9778590fa3cab3ac9e2168'": [["'is'", "'DAI/USDC-001'"]], "'0x6c6bc977e13df9b0de53b251522280bb72383700'": [["'is'", "'DAI/USDC-005'"]], "'0x8ad599c3a0ff1de082011efddc58f1908eb6e6d8'": [["'is'", "'USDC/ETH-030'"]], "'0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640'": [["'is'", "'USDC/ETH-005'"]], "subgrounds.client": [["get_schema", "url"], ["get_schema", "headers"], ["query", "url"], ["query", "query_str"], ["query", "variables"], ["query", "headers"]], "subgrounds.contrib.plotly": [["TraceWrapper", "kwargs"], ["Scatter", "kwargs"]], "Box": [["is alias of", "graph_object"]], "Violin": [["is alias of", "graph_object"]], "Histogram": [["is alias of", "graph_object"]], "Histogram2d": [["is alias of", "graph_object"]], "subgrounds.contrib.plotly.Funnel": [["alias of", "Waterfall"]], "subgrounds.contrib.plotly.Indicator": [["alias of", "Indicator"]], "subgrounds.contrib.plotly.Scatter3d": [["alias of", "Scatter3d"]], "subgrounds.contrib.plotly.Surface": [["alias of", "Surface"]], "subgrounds.contrib.plotly.Scattergeo": [["alias of", "Scattergeo"]], "subgrounds.contrib.plotly.Choropleth": [["alias of", "Choropleth"]], "subgrounds.contrib.plotly.Scattermapbox": [["alias of", "Scattermapbox"]], "subgrounds.contrib.plotly.Choroplethmapbox": [["alias of", "Choroplethmapbox"]], "subgrounds.contrib.plotly.Densitymapbox": [["alias of", "Densitymapbox"]], "subgrounds.contrib.plotly.Scatterpolar": [["alias of", "Scatterpolar"]], "subgrounds.contrib.plotly.Treemap": [["alias of", "Sunburst"]], "subgrounds.contrib.plotly.Icicle": [["alias of", "Icicle"]], "subgrounds.contrib.plotly.Sankey": [["alias of", "Sankey"]], "subgrounds.contrib.plotly.Parcoords": [["alias of", "Parcoords"]], "subgrounds.contrib.plotly.Parcats": [["alias of", "Parcats"]], "subgrounds.contrib.plotly.Carpet": [["alias of", "Carpet"]], "subgrounds.contrib.plotly.Scattercarpet": [["alias of", "Scattercarpet"]], "subgrounds.contrib.plotly.Contourcarpet": [["alias of", "Contourcarpet"]], "strategies/#subgrounds.pagination.strategies.SkipPagination": [["is", "[ ` SkipPagination ` ]"]], "strategies/#subgrounds.pagination.strategies.LegacyStrategyArgGenerator": [["is", "[ ` LegacyStrategyArgGenerator ` ]"]], "strategies/#subgrounds.pagination.strategies.LegacyStrategyArgGenerator.Cursor": [["is", "[ ` LegacyStrategyArgGenerator.Cursor ` ]"]], "strategies/#subgrounds.pagination.strategies.LegacyStrategyArgGenerator.Cursor.update": [["is", "[ ` LegacyStrategyArgGenerator.Cursor.update() ` ]"]], "strategies/#subgrounds.pagination.strategies.LegacyStrategyArgGenerator.Cursor.step": [["is", "[ ` LegacyStrategyArgGenerator.Cursor.step() ` ]"]], "strategies/#subgrounds.pagination.strategies.LegacyStrategyArgGenerator.Cursor.args": [["is", "[ ` LegacyStrategyArgGenerator.Cursor.args() ` ]"]], "strategies/#subgrounds.pagination.strategies.LegacyStrategyArgGenerator.Cursor.reset": [["is", "[ ` LegacyStrategyArgGenerator.Cursor.reset() ` ]"]], "strategies/#subgrounds.pagination.strategies.ShallowStrategyArgGenerator": [["is", "[ ` ShallowStrategyArgGenerator ` ]"]], "strategies/#subgrounds.pagination.strategies.ShallowStrategyArgGenerator.Cursor": [["is", "[ ` ShallowStrategyArgGenerator.Cursor ` ]"]], "strategies/#subgrounds.pagination.strategies.ShallowStrategyArgGenerator.Cursor.page_node": [["is", "[ ` ShallowStrategyArgGenerator.Cursor.page_node ` ]"]], "PaginationNode.filter_value": [["is", "preprocess/#subgrounds.pagination.preprocess.PaginationNode.filter_value"]], "PaginationNode.filter_value_type": [["is", "preprocess/#subgrounds.pagination.preprocess.PaginationNode.filter_value_type"]], "PaginationNode.key_path": [["is", "preprocess/#subgrounds.pagination.preprocess.PaginationNode.key_path"]], "PaginationNode.inner": [["is", "preprocess/#subgrounds.pagination.preprocess.PaginationNode.inner"]], "PaginationNode.get_vardefs()": [["is", "preprocess/#subgrounds.pagination.preprocess.PaginationNode.get_vardefs"]], "normalize()": [["is", "preprocess/#subgrounds.pagination.preprocess.normalize"]], "PaginationStrategy.step()": [["is", "pagination/#subgrounds.pagination.pagination.PaginationStrategy.step"]], "subgrounds.pagination.PaginationNode": [["represents", "pagination config"], ["has", "node_idx"], ["has", "filter_field"], ["has", "first_value"], ["has", "skip_value"], ["has", "filter_value"], ["has", "filter_value_type"], ["has", "key_path"], ["has", "inner"]], "subgrounds.pagination.PaginationStrategy": [["step", "returns"]], "PaginationNode": [["node_idx", "None"], ["filter_field", "None"], ["first_value", "None"], ["skip_value", "None"], ["filter_value", "None"], ["extract", "information"], ["maintain", "nestedness relationship"]], "Strategies": [["implements", "functions"], ["implements", "data structures"], ["offers", "PaginationStrategies"]], "pagination": [["done in", "steps"]], "Generate": [["PaginationNode objects", "query document"]], "query document": [["normalized", "pagination field"], ["transformed to", "form"]], "data page": [["generate", "values"]], "variables": [["undefined", "pruned"], ["is contained in", "variables"]], "strategy": [["variable values computed", "step"]], "exception": [["StopPagination", "args"], ["SkipPagination", "args"]], "Cursor": [["update", "data"], ["` page_node `", "` PaginationNode `"], ["` inner `", "` list `"], ["` inner_idx `", "` int `"], ["` filter_value `", "` Any `"], ["` queried_entities `", "` int `"], ["` stop `", "None"], ["` page_count `", "` int `"]], "strategies": [["` StopPagination `", "None"], ["` SkipPagination `", "None"], ["` LegacyStrategyArgGenerator `", "None"], ["` ShallowStrategyArgGenerator `", "None"]], "subgrounds.pagination.preprocess.PaginationNode": [["represents", "pagination config"], ["node_idx", "Index of PaginationNode"], ["filter_field", "Name of the node's filter field"], ["first_value", "Initial value of the first argument"], ["skip_value", "Initial value of the skip argument"], ["filter_value", "Initial value of the filter argument"], ["filter_value_type", "Type of the filter value"], ["key_path", "Location in the list field"], ["inner", "Nested pagination nodes"], ["get_vardefs", "Returns a list of variable definitions"]], "subgrounds.pagination.preprocess": [["normalize", "Inject various graphql components"]], "paginate": [["executes", "the request document"]], "paginate_iter": [["executes", "the request document"]], "subgrounds.pagination.utils": [["merge", "data1"], ["merge", "data2"], ["merge", "combined result"], ["merge_input_value_object_metas", "data1"], ["merge_input_value_object_metas", "data2"], ["merge_input_value_object_metas", "combined result"]], "data1": [["must be of the same type", "dict"], ["must be of the same type", "InputValue.Object"]], "data2": [["must be of the same type", "dict"], ["must be of the same type", "InputValue.Object"]], "subgrounds.transform": [["represents", "transformation layer"], ["applied to", "DataRequest objects"], ["represents", "transformation layer"], ["applied to", "Document objects"]], "DataRequest objects": [["pass through", "transformation layer"], ["transformed by", "transform_request method"], ["transformed to", "transformed request object"], ["transformed by", "transform_response method"]], "transform_request method": [["applied to", "DataRequest objects"], ["returns", "transformed request object"]], "transform_response method": [["applied to", "response data"], ["returns", "transformed response data"], ["applied to", "response data"], ["returns", "transformed response data"]], "Document objects": [["pass through", "transformation layer"], ["transformed by", "transform_document method"], ["transformed to", "transformed document"], ["transformed by", "transform_response method"]], "transform_document method": [["applied to", "Document objects"], ["returns", "transformed document"]], "subgrounds.transform.TypeTransform": [["has", "transform to be applied"], ["type indicating", "scalar values"], ["transformed using", "function f"], ["transform_document", "method that will be applied"], ["Document objects", "pass through"], ["transformed document", "return type"]], "subgrounds.transform.LocalSyntheticField": [["transform used", "implement synthetic fields"], ["transform_document", "method that will be applied"], ["Document objects", "pass through"], ["transformed document", "return type"]], "Transform": [["is applied to", "response data"], ["is applied to", "all response data"], ["is applied to", "requests"], ["is applied to", "all requests"]], "Document": [["yielded", "JSON data"], ["yielded", "resulting JSON data"], ["yielded", "data"], ["yielded", "the resulting JSON data"]], "Request": [["pass through", "transformation layer"], ["objects", "pass through"]], "subgrounds.subgraph.FieldPath": [["is", "subgraph"], ["_root", "subgraph"], ["_leaf", "subgraph"], ["_merge()", "subgraph"], ["_name_path()", "subgraph"], ["_name()", "subgraph"], ["_extract_data()", "subgraph"], ["_selection()", "subgraph"], ["_set_arguments()", "subgraph"], ["_select()", "subgraph"]], "1656015853": [["MINT", "0xc747962e7e416e2a582813b1d7ad59eb83077fa6"]], "0xc747962e7e416e2a582813b1d7ad59eb83077fa6": [["5.122569e+04", "3"], ["0x1444744f4021a2046787c1b7b88cd9ac21f071c65acc", "1656015773"]], "1656015773": [["MINT", "0xd11aa2e3a000275ed12b87515c9ac0d67b32e7b9"]], "0xd11aa2e3a000275ed12b87515c9ac0d67b32e7b9": [["8.897983e+03", "4"], ["0x3315617d426fc2b0db5d8dbccd549efaa8f1ae2969ca", "1656015693"]], "0xb7dd4d134b1794ee848e1af1a62b85d7b2ea9301": [["0.000000e+00", "11"], ["0xcc713daa2dc58cd1f2218c8f438e7fcf04d2e9c7c83d", "1656015278"]], "1656015278": [["BURN", "0xa7c43e2057d89b6946b8865efc8bee3a4ea7d28d"], ["BURN", "0xa7c43e2057d89b6946b8865efc8bee3a4ea7d28d"]], "pooladdr_symbol_map": [["is", "dictionary"], ["with", "'UNKNOWN' as the default value"], ["has", "'0x5777d92f208679db4b9778590fa3cab3ac9e2168'"], ["has", "'0x6c6bc977e13df9b0de53b251522280bb72383700'"], ["has", "'0x8ad599c3a0ff1de082011efddc58f1908eb6e6d8'"], ["has", "'0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640'"]], "univ3.Pool.symbol": [["is", "SyntheticField.map"], ["using", "pooladdr_symbol_map"], ["with", "SyntheticField.STRING"], ["on", "univ3.Pool.id"], ["as", "'UNKNOWN'"], ["is", "SyntheticField.map"], ["has", "SyntheticField.STRING"], ["has", "pooladdr_symbol_map"], ["has", "univ3.Pool.id"], ["has", "'UNKNOWN'"]], "pools": [["is", "univ3.Query.pools"], ["has", "univ3.Pool.id"], ["has", "univ3.Pool.symbol"]], "subgrounds.subgraph.fieldpath.SyntheticField": [["is", "a constant"], ["with", "value"]], "univ3.Mint": [["tx_type", "SyntheticField.constant('MINT')"]], "univ3.Burn": [["tx_type", "SyntheticField.constant('BURN')"]], "mints": [["transaction.id", "."], ["timestamp", "."], ["tx_type", "."], ["origin", "."], ["amountUSD", "."]], "0.000000e+00": [["11", "0xcc713daa2dc58cd1f2218c8f438e7fcf04d2e9c7c83d"]], "1.254942e+06": [["5", "0x7bbfae86f0c3c983651bd0671557cd851fc301317c06"]], "1656015111": [["MINT", "0xac56cee8ccd00d0c1d72ce3415140874552e80f4"]], "3.432075e+04": [["12", "0xea21c3a68a8f0c6a2721a3072e0c8b2edc77f4d2f0d9"]], "1656014785": [["BURN", "0x0709b103d46d71458a71e5d81230dd688809a53d"]], "2.059106e+04": [["6", "0x3bd369bf45c55cab40c62db81bb3e0684fd85fe2b662"]], "subpackage": [["will be broken into", "future"]], "internal APIs": [["not subject to", "semver policy"]], "module": [["contains", "data structures"]], "data structures": [["used to represent", "GraphQL queries"]], "dataclasses": [["immutable", "enforce functional programming style"]], "Subgrounds request": [["has", "dataclass hierarchy"]], "_description_": [["Returns", "Optional[ Selection ]"]], "_predicate_": [["filter_args", "_"], ["recurse", "True"]], "_Selection_": [["Returns", "new ` Selection ` object"], ["contains_list", "True"]], "_self_": [["Returns", "True"], ["split", "list of selections"], ["add", "new selection(s)"], ["remove", "new Selection object"]], "_recurse_": [["variable_args", "True"]], "Triplets": [["Returns", "list"], ["merge", "selections"], ["Returns", "Query object"], ["Returns", "Selections"], ["Returns", "Query object"], ["Returns", "Query object"], ["Returns", "Query object"], ["Returns", "Query object"], ["Returns", "Query object"], ["Returns", "Query object"], ["Returns", "Query object"], ["Returns", "Query object"]], "selections": [["Returns", "list"], ["merge", "selections"]], "varname": [["is", "the name of"]], "KeyError": [["raises", "KeyError"]], "self": [["exists in", "the selection"], ["containing the same data as", "self"], ["containing the subtree of", "the current Selection"]], "select": [["with", "variable value named"]], "returns": [["The argument in", "select"]], "argname": [["named", "replacement"]], "recurse": [["is called recursively on", "self's inner selections"]], "name": [["Query", "Optional[str]"]], "selection": [["matching", "the current query"]], "graphql": [["Returns a string containing", "a GraphQL query"]], "iter": [["Returns an iterator over", "all Selections"]], "iter_args": [["Returns an iterator over", "all Arguments"]], "iter_vardefs": [["Returns an iterator over", "all VariableDefinitions"]], "predicate": [["satisfy", "predicate(s) == True"], ["satisfy", "predicate(arg) == True"]], "filter_args": [["Returns a new Query object", "all selections arguments arg"]], "schema": [["selects", "object_"], ["selects", "non-list fields"], ["selects", "GraphQL Object"], ["selects", "Interface"], ["selects", "object_"], ["selects", "non-list fields"], ["selects", "GraphQL Object"], ["selects", "Interface"], ["selects", "object_"], ["selects", "non-list fields"]], "subgrounds.utils": [["flatten_dict", "data"], ["flatten_dict", "keys"], ["contains_list", "data"], ["default_header", "url"], ["user_agent", "None"]], "subgrounds.dataframe_utils.DataFrameColumns": [["combine", "other"], ["mk_df", "data"]], "path_map": [["is", "dictionary"], ["pairs", "of (key FieldPath)"]], "JSON data": [["formatted into", "DataFrame"]], "df_of_json": [["formats", "JSON data into Pandas DataFrames"], ["flattening", "data"], ["returns", "dataframe(s)"], ["based on", "request's fieldpaths"], ["is", "function"]], "SchemaMeta": [["contains", "various data structures"], ["used to represent", "GraphQL schemas"], ["Create", "new model"], ["parsing and validating", "input data"], ["Raises", "ValidationError"], ["Returns", "type information"], ["type_of_typeref", "typeref"], ["Raises", "KeyError"], ["Returns", "argument or field definition's underlying type"], ["Returns", "nested type"]], "Playgrounds": [["start with", "sequence"], ["differentiate from", "other API keys"], ["have", "API key"], ["create", "account"], ["create", "API key"], ["copy", "API key"], ["use", "proxy API endpoint"], ["is", "API"], ["has", "logo"], ["has", "primary.svg"]], "API key": [["obtain", "after"]], "proxy API endpoint": [["use", "to query decentralized subgraphs"]], "subgraph id": [["find", "via The Graph Explorer"]], "Playgrounds API": [["is organized around", "REST"], ["features", "top-level resource"], ["uses", "API keys"], ["include", "header of request"]], "API": [["accepts", "request parameters"], ["returns", "JSON-encoded responses"], ["is performed via", "Playgrounds authorization header"]], "API keys": [["carry", "many privileges"]], "Subgraph Proxy": [["provides access to", "subgraphs"]], "proxy endpoints": [["mirror", "equivalent endpoint"]], "proxy endpoint": [["gets", "name from"], ["would be", "https://api.playgrounds.network/v1/proxy/subgraphs/id/ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7"]], "URL": [["contains", "subgraphs/id/3nXfK3RbFrj6mhkGdoKRowEEti2WvmUdxmz73tben6Mb"], ["is", "mirrored"], ["contains", "subgraphs/id/ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7"], ["goes through", "proxy endpoint"]], "endpoint": [["works with", "subgraphs deployed on The Graph's Ethereum decentralized service"], ["does not work with", "Arbitrum decentralized service"]], "subgraph ID": [["is", "subgraphs/id/:subgraph_id"], ["is identified by", "3nXfK3RbFrj6mhkGdoKRowEEti2WvmUdxmz73tben6Mb"]], "sg": [["initialize", "Subgrounds"], ["load_subgraph", "\"https://api.thegraph.com/subgraphs/name/messari/stargate-ethereum\""], ["query_df", "snapshot_fields"], ["query_df", "creation_fields"], ["query_df", "cumulative_metrics_fields"], ["query_df", "identity_fields"], ["query_df", "liquidity_fields"], ["query_df", "rewards_fields"], ["query_df", "volume_fields"], ["query_df", "value_locked_fields"]], "stargate_eth": [["pools_query", "first=1000"]], "print": [["\"Cumulative Metrics:\"", "cumulative_metrics_df"], ["\"Snapshot Information:\"", "snapshot_info_df"], ["\"Snapshot Fields:\"", "snapshot_df"], ["\"Creation Fields:\"", "creation_df"], ["\"Cumulative Metrics Fields:\"", "cumulative_metrics_df"], ["\"Identity Fields:\"", "identity_df"], ["\"Liquidity Fields:\"", "liquidity_df"], ["\"Rewards Fields:\"", "rewards_df"], ["\"Volume Fields:\"", "volume_df"], ["\"Total Value Locked Fields:\"", "value_locked_df"], ["comparison", "DataFrame"]], "Uniswap v3 subgraph": [["Query.financialsDailySnapshots", "latest_snapshots"], ["Query.liquidityPools", "pools"], ["Query.liquidityPools", "first=1"], ["Query.liquidityPools", "orderBy=uni.LiquidityPool.totalValueLockedUSD"], ["Query.liquidityPools", "orderDirection='desc'"], ["Query.dexAmmProtocols", "protocol"]], "Aave": [["is", "decentralized finance protocol"], ["allows", "people to lend and borrow cryptocurrencies"], ["is", "decentralized finance protocol"], ["allows", "people to lend and borrow cryptocurrencies"]], "Lenders": [["earn", "interest"], ["deposit", "digital assets into liquidity pools"], ["earn", "interest"], ["deposit", "digital assets into liquidity pools"]], "Borrowers": [["use", "crypto as collateral"], ["take out", "flash loan"], ["use", "crypto as collateral"], ["take out", "flash loan"]], "AAVE v3": [["is", "Ethereum subgraph"], ["fetches", "data related to usage metrics and lending protocols"]], "pandas": [["is used for", "handling data manipulation"], ["handle", "data as DataFrames"]], "Aave V3": [["introduces", "new risk mitigation features"], ["improves", "capital efficiency"], ["lowers", "gas fees"]], "aave_lending": [["is", "lendingProtocols"], ["name", "None"], ["type", "None"], ["cumulativeBorrowUSD", "None"], ["cumulativeDepositUSD", "None"], ["cumulativeLiquidateUSD", "None"], ["cumulativePositionCount", "None"], ["cumulativeProtocolSideRevenueUSD", "None"]], "aave_overview": [["query_df", "aave_lending"], ["squeeze", "None"]], "fraxlendFactories": [["id", "fraxlendFactories.id"], ["totalTVLValue", "fraxlendFactories.totalTVLValue"], ["totalBorrowedValue", "fraxlendFactories.totalBorrowedValue"], ["totalCollateralLockedValue", "fraxlendFactories.totalCollateralLockedValue"], ["positionCount", "fraxlendFactories.positionCount"], ["pairCount", "fraxlendFactories.pairCount"], ["assetTokenCount", "fraxlendFactories.assetTokenCount"], ["collateralTokenCount", "fraxlendFactories.collateralTokenCount"]], "users": [["address", "users.address"], ["id", "users.id"]], "lido_activity": [["is loaded using", "API URL"], ["is used to interact with", "Lido Ethereum subgraph"], ["constructs a query to fetch", "usageMetricsDailySnapshots entity"], ["specifies ordering options to sort", "data by timestamp"], ["limits the number of results to", "30"], ["is loaded using", "API URL"], ["is used to interact with", "Lido Ethereum subgraph"], ["constructs a query to fetch", "financialsDailySnapshots entity"], ["specifies ordering options to sort", "data by timestamp"], ["limits the number of results to", "30"], ["creates a SyntheticField named", "datetime"], ["takes the original timestamp field", "converts it to a human-readable format"], ["fetches the data and stores it", "in a DataFrame"], ["demonstrates how the Subgrounds library can be used to interact with", "a subgraph"], ["fetches specific financial data using", "queries"]], "datetime": [["is created for", "UsageMetricsDailySnapshot entity"], ["takes the original timestamp field", "converts it to a human-readable format"]], "sg.query_df()": [["is used to execute", "query and fetch data"]], "Subgrounds library": [["interact with", "Lido Ethereum subgraph"], ["can be used to", "interact with a subgraph"], ["fetch specific financial data for", "a particular pool"], ["fetch specific financial data for", "Lido Ethereum subgraph"], ["fetch specific financial data for", "a subgraph"], ["fetch specific financial data for", "a pool"], ["fetch specific financial data for", "queries"], ["fetch specific financial data for", "financial data"], ["provides", "interface"], ["fetch", "manipulate data"], ["fetch", "data"], ["fetch", "data from blockchains"], ["fetch", "data from Ethereum"]], "Lido Ethereum subgraph": [["fetch", "specific financial data"], ["can be used to", "interact with a subgraph"], ["fetch specific financial data for", "a particular pool"], ["fetch specific financial data for", "a subgraph"]], "pool": [["ID", "particular pool"]], "data": [["processed", "manipulated"], ["displayed in", "human-readable format"]], "numpy": [["perform", "numerical operations"]], "Subgrounds object": [["initialized as", "sg"]], "Subgraph object": [["named", "lido_pool_stETH"]], "code": [["constructs", "query"], ["specifies ordering options", "sort data"], ["limits", "number of results"], ["import", "libraries"], ["initialize", "Subgrounds instance"], ["interact with", "subgraphs"], ["load", "Lido subgraph"], ["load", "Rocket Pool subgraph"]], "where clause": [["filters", "results"]], "financialsDailySnapshots": [["sorted by", "timestamp"], ["limited to", "last 30 entries"]], "FinancialsDailySnapshot": [["convert", "timestamp field"], ["define", "synthetic fields"], ["calculate", "revDiffRevenueUSD30"], ["calculate", "avgDailyRevenueUSD30"], ["calculate", "revenueMargin30"], ["query", "required fields"], ["include", "synthetic fields"]], "DataFrame": [["flatten", "data"]], "protocol": [["query", "financials daily snapshots"], ["fetch", "latest snapshot"], ["query", "usage metrics daily snapshots"], ["fetch", "data"]], "snapshot": [["compare", "cumulative supply-side revenue"], ["compare", "protocol-side revenue"], ["compare", "total revenue"]], "store": [["comparison", "pandas DataFrame"]], "fetch": [["data", "past 30 days"]], "Lido": [["load subgraph", "https://api.thegraph.com/subgraphs/name/messari/lido-ethereum"]], "Rocket Pool": [["load subgraph", "https://api.thegraph.com/subgraphs/name/messari/rocket-pool-ethereum"]], "lido_subgraph": [["sg.load_subgraph", "'https://api.thegraph.com/subgraphs/name/messari/lido-ethereum'"]], "rocketPool_subgraph": [["sg.load_subgraph", "'https://api.thegraph.com/subgraphs/name/messari/rocket-pool-ethereum'"]], "lido_usage": [["orderBy", "lido_subgraph.UsageMetricsDailySnapshot.timestamp"], ["orderDirection", "'desc'"], ["first", "30"]], "subgraph": [["load_subgraph", "\"https://api.playgrounds.network/v1/proxy/subgraphs/id/{uniswap_id}\""], ["Query.tokens.id", "None"], ["Query.tokens.symbol", "None"]]}}