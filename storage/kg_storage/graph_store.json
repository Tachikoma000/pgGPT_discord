{"graph_dict": {"Subgrounds": [["can be installed via", "pip"], ["can be installed via", "commands"], ["can be installed via", "pip install"], ["can be installed via", "upgrade subgrounds"], ["can be installed via", "python m pip install"], ["can be installed via", "m pip install"], ["can be installed via", "pip with"], ["can be installed via", "following commands"], ["can be installed via", "pip install upgrade subgrounds"], ["can be installed via", "pip install python m pip install"], ["requires", "python >= 3.10"], ["provides", "top level API"], ["used to load", "GraphQL APIs"], ["used to execute", "querying operations"], ["meant to be used as", "singleton"], ["initialized once and reused throughout", "project"], ["initialized", "once"], ["reused throughout", "project"], ["initialized", "Subgrounds object"], ["load_subgraph", "\"https://api.thegraph.com/subgraphs/name/messari/curve\\n\\n\\nfinance\""], ["merge", "list of FieldPaths"], ["query", "function"], ["load_subgraph", "URL"], ["query", "query()"], ["query_json", "query_json()"], ["query_df", "query_df()"], ["query_json", "query_json()"], ["query_df", "query_df()"], ["query_df", "query_df()"], ["query_df", "query_df()"], ["query_df", "query_df()"], ["query_df", "query_df()"], ["query_df", "query_df()"], ["provides", "two pagination strategies"], ["will raise", "a PaginationError exception"], ["provides", "LegacyStrategy"], ["allows", "developers"], ["paginate", "query document"], ["paginate", "pagination strategy"], ["Plotly Wrapper", "extension"], ["load_subgraph", "subgraph"], ["load_subgraph", "\"https://api.thegraph.com/subgraphs/name/messari/curve\\n\\n\\n\\nfinance\\n\\n\\n\\nethereum\""], ["load_subgraph", "\"https://api.thegraph.com/subgraphs/name/messari/aave\\n\\n\\n\\nv2\\n\\n\\n\\nethereum\""], ["load_subgraph", "\"https://api.thegraph.com/subgraphs/name/messari/lido"], ["query_df", "curve.Query.financialsDailySnapshots(first=2500)"], ["paginated", "nested field"], ["paginated", "requests"], ["paginated", "data"], ["paginated", "entity"], ["execute", "DataRequest"], ["mk_request", "FieldPath"], ["load_subgraph", "uniswap/uniswap-v3"], ["load_api", "None"], ["mk_request", "None"], ["execute", "None"], ["execute_iter", "None"], ["query_json", "None"], ["query_json_iter", "None"], ["query_df", "None"], ["query_df_iter", "None"], ["query", "None"], ["execute", "DataRequest"], ["mk_request", "FieldPath"], ["query_json", "Subgrounds"], ["mk_request", "fpaths"], ["execute_iter", "Subgrounds"], ["load_subgraph", "'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3'"], ["load_subgraph", "'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3'"], ["load_subgraph", "'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3'"], ["load_subgraph", "'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3'"], ["load_subgraph", "'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3'"], ["load_subgraph", "'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3'"], ["offers", "PaginationStrategies"], ["paginate automatically", "by setting pagination variables"], ["load_subgraph", "'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3'"], ["load_subgraph", "'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3'"], ["load_subgraph", "'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3'"], ["load_subgraph", "'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3'"], ["simplifies and streamlines", "querying and data analysis"], ["initialized with", "API key"], ["can query", "decentralized subgraphs"], ["has been initialized with", "custom header"], ["can query", "decentralized network subgraph"], ["automatically handles", "pagination"], ["makes multiple", "GraphQL queries"], ["is placed in", "first argument"], ["correlates to", "number of expected pages"], ["using the hosted service", "as an example"], ["initialize", "Subgrounds"], ["load_subgraph", "\"https://api.thegraph.com/subgraphs/name/messari/stargate-ethereum\""], ["Initialize", "Subgrounds"], ["load_subgraph", "subgraph_url"], ["load_subgraph", "'https://api.thegraph.com/subgraphs/name/messari/lido-ethereum'"], ["load_subgraph", "subgraph"], ["load_subgraph", "sg.load_subgraph(subgraph_url)"], ["imports", "libraries"], ["loads", "environment variables"], ["creates", "Subgrounds object"], ["loads", "Uniswap v3 subgraph"], ["queries", "financialsDailySnapshots endpoint"], ["converts", "query results"], ["extracts", "first row"], ["views", "result"], ["queries", "liquidity pools"], ["retrieves", "information"], ["uses", "Subgrounds library"], ["interacts with", "Lido subgraph"], ["interacts with", "Rocket Pool subgraph"], ["Load subgraphs for", "Lido"], ["Load subgraphs for", "rocketPool_subgraph"], ["Import", "subgrounds"], ["Instantiate", "subgrounds"], ["insert", "Playgrounds API key"], ["from_pg_key", "\"pg-AqAFS8G3TN3Kagdgw2MrGjFvDGUgxImS\""], ["load_subgraph", "f\"https://api.playgrounds.network/v1/proxy/subgraphs/id/{uniswap_id}\""]], "Subgrounds object": [["loaded", "GraphQL API"], ["loads", "Uniswap v3 subgraph"], ["query_df", "latest_snapshots"], ["loads", "Uniswap v3 subgraph"]], "ethereum": [["is", "Python"], ["is", "analyzing curve pool data"]], "curve_pools": [["is", "curve.Query.liquidityPools"], ["first", "10"], ["orderBy", "curve.LiquidityPool.totalValueLockedUSD"], ["orderDirection", "\"desc\""], ["where", "curve.LiquidityPool.createdBlockNumber > 14720000"]], "Filtering": [["is done via", "where argument"], ["is done via", "FieldPath"], ["is done via", "subgrounds.FieldPath"], ["provides several options", "to filter"], ["provides several options", "based on field path"], ["provides several options", "based on nearly any field path"], ["provides several options", "to filter based on nearly any field path"], ["provides several options", "to filter based on nearly any field path"], ["provides several options", "to filter based on nearly any field path"], ["provides several options", "to filter based on nearly any field path"]], "Data": [["can be queried based on", "specific sort"], ["can be queried based on", "sort of a field path"], ["can be queried based on", "top performing pools"], ["can be queried based on", "revenue"], ["can be queried based on", "etc"], ["can be queried based on", "cumulative revenue"], ["can be queried based on", "order direction"], ["can be queried based on", "highest performing pools"], ["can be queried based on", "descending order"], ["can be queried based on", "top 4 liquidity pools"], ["can be queried based on", "top 3 trading days"], ["including", "timestamp"], ["including", "daily active borrowers"], ["including", "daily active depositors"]], "FieldPaths": [["originate from", "same subgraph"]], "button": [["enable", "editing and execution"]], "code-blocks": [["on", "this page"]], "URL": [["name", "messari/curve/finance/ethereum"], ["contains", "subgraphs/id/3nXfK3RbFrj6mhkGdoKRowEEti2WvmUdxmz73tben6Mb"], ["contains", "subgraphs/id/ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7"], ["contains", "subgraphs/id/:subgraph_id"], ["contains", "v1/proxy/subgraphs/id/ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7"], ["contains", "v1/proxy/subgraphs/id/:subgraph_id"], ["contains", "v1/proxy/deployments/id/QmcPHxcC2ZN7m79XfYZ77YmF4t9UCErv87a9NFKrSLWKtJ"], ["contains", "deployments/id/:deployment_id"], ["contains", "v1/proxy/deployments/id/:deployment_id"]], "LiquidityPool": [["orderBy", "cumulativeVolumeUSD"], ["orderDirection", "desc"], ["first", "4"]], "most_traded_pools": [["dailySnapshots", "orderBy"], ["name", "top 4 most traded pools"], ["dailySnapshots", "top 2 pools"], ["dailySnapshots", "top 4 most traded tokens"]], "LiquidityPoolDailySnapshot": [["dailyTotalRevenue", "desc"]], "most_traded_snapshots": [["dailyVolumeUSD", "None"], ["dailyTotalRevenueUSD", "None"]], "liquidityPools": [["first", "4"], ["orderBy", "cumulativeVolumeUSD"], ["orderDirection", "desc"]], "dailySnapshots": [["first", "3"], ["orderBy", "dailyTotalRevenueUSD"], ["orderDirection", "desc"], ["dailyVolumeUSD", "None"], ["dailyTotalRevenueUSD", "None"]], "aave_markets": [["is", "a list"], ["is returned", "a list"], ["name", "a list"], ["totalValueLockedUSD", "a list"], ["name", "a matching list TVL values"], ["totalValueLockedUSD", "a matching list TVL values"], ["name", "aave_markets.totalValueLockedUSD"], ["totalValueLockedUSD", "aave_markets.name"]], "query_df": [["takes", "an optional parameter columns"], ["let", "you name"], ["name", "Name"], ["totalValueLockedUSD", "TVL (USD)"], ["fpaths", "columns"]], "sushiswap": [["load_subgraph", "\"https://api.thegraph.com/subgraphs/name/sushiswap/exchange\""], ["Query.pair", "id=\"0x397ff1542f962076d0bfe58ea045ffa2d347aca0\""]], "swap": [["price1", "( abs(swap.amount0Out - swap.amount0In) / abs(swap.amount1Out - swap.amount1In) )"]], "weth_usdc": [["orderBy", "swap.timestamp"], ["orderDirection", "\"desc\""], ["first", "10"]], "Pagination": [["is performed by", "Subgrounds"], ["is", "pagination/"], ["normalize", "None"], ["paginate_iter", "None"], ["paginate", "None"], ["PaginationError", "None"], ["PaginationNode", "None"], ["PaginationNode.node_idx", "None"], ["PaginationNode.filter_field", "None"], ["PaginationNode.first_value", "None"], ["PaginationNode.skip_value", "None"], ["PaginationNode.filter_value", "None"], ["contains", "pagination algorithms"], ["make use of", "pagination strategies"]], "users": [["wishing to implement", "their own strategy"], ["has address", "users.address"], ["has id", "users.id"]], "PaginationError": [["contains", "the initial exception message"], ["contains", "the PaginationStrategy object"], ["is", "pagination/#subgrounds.pagination.pagination.PaginationError"]], "PaginationStrategy": [["was in", "the state it was in"], ["could be useful", "to recover and start pagination"], ["is", "pagination/#subgrounds.pagination.pagination.PaginationStrategy"], ["has a method", "step"], ["raises an exception", "StopPagination"]], "LegacyStrategy": [["supports", "pagination on nested fields"]], "class": [["implements", "PaginationStrategy"], ["constructor", "accept"], ["raise", "SkipPagination"], ["step", "located"], ["used to generate", "pagination variables"]], "method": [["accepts", "argument"], ["return", "tuple"], ["raise", "StopPagination"]], "subgrounds": [["is integrated through", "clients"], ["load_subgraph", "url"], ["load_subgraph", "save_schema"], ["load_subgraph", "cache_dir"], ["load_api", "url"], ["load_api", "save_schema"], ["load_api", "cache_dir"]], "subgrounds.Subgrounds": [["Bases", "object"], ["load_subgraph", "url"], ["load_subgraph", "save_schema"]], "DataRequest": [["included in", "request"], ["is executed by", "Subgrounds"], ["returns", "response data"], ["is executed with", "pagination_strategy"], ["is executed with", "req"], ["is executed with", "pagination_strategy"], ["is executed with", "req"], ["is executed with", "pagination_strategy"], ["combine", "FieldPath"], ["object", "executed"], ["response", "data"], ["executed", "Subgrounds"], ["passes through", "transformation layer"], ["is", "initial"], ["is", "transformed"], ["is", "returned"], ["is", "transformed request object"]], "'columns'": [["'is'", "'optional argument'"], ["'used to rename'", "'dataframes(s)'"]], "'length of columns'": [["'must be'", "'same as number of columns'"]], "'concat'": [["'indicates whether or not'", "'resulting dataframes should be concatenated together'"]], "'dataframes'": [["'must have'", "'same number of columns'"], ["'must have'", "'same column names and types'"]], "'names'": [["'can be set'", "'using columns argument'"]], "'Returns'": [["'A DataFrame containing'", "'reponse data'"]], "'Return type'": [["'pd.DataFrame'", "'list'"]], "'univ3'": [["'is'", "'Subgrounds'"]], "Subgraph Utilities": [["class", "subgrounds.Subgraph"], ["class", "subgrounds.FieldPath"], ["class", "subgrounds.SyntheticField"], ["constant", "value"], ["Returns", "iterator"]], "FieldPath": [["class", "subgrounds.Subgraph"], ["class", "subgrounds.FieldPath"], ["class", "subgrounds.SyntheticField"], ["class", "subgrounds.SyntheticField"], ["included in", "request"], ["is", "list"], ["objects", "included"], ["should be", "included"], ["objects", "included"], ["should be", "included"], ["query", "FieldPath object"], ["data", "FieldPath object"], ["returns", "FieldPath object"], ["type", "type"], ["object", "FieldPath object"], ["query", "FieldPath object"], ["returns", "FieldPath object"], ["type", "type"], ["object", "FieldPath object"], ["Returns", "type information"], ["Returns", "root field"], ["Returns", "leaf field"], ["Parameters", "fpaths"], ["Returns", "Selection tree"], ["Returns", "list of field names"], ["Generates", "name"], ["Parameters", "data"], ["Extract", "data"], ["Returns", "selection"], ["_extend", "ext"], ["_select", "name"], ["_description", "None"], ["Return type", "FieldPath"], ["_select", "name"], ["_extend", "ext"], ["_description", "None"], ["_root", "None"]], "SyntheticField": [["f", "Callable"], ["deps", "list"], ["transform", "FieldPath"], ["map", "values"], ["map", "key value pairs"], ["map", "fpath"], ["map", "default"], ["map", "dictionary"], ["map", "values"], ["map", "default"], ["map", "dictionary"], ["constant", "'MINT'"], ["constant", "'BURN'"], ["datetime_of_timestamp", "univ3.Swap.timestamp"], ["_", "f"], ["_", "type_"], ["_", "deps"], ["_", "default"], ["returns", "constant"], ["with value", "value"], ["useful for", "injecting additional static data"], ["useful for", "merging entities"], ["returns", "SyntheticField"], ["has return type", "SyntheticField"], ["returns", "map"], ["map", "values"], ["using", "key value pairs"], ["map", "fpath"], ["map", "values"], ["in", "dictionary"], ["default", "used"], ["map", "values"], ["using", "key value pairs"], ["map", "fpath"], ["constant", "value"], ["constant", "'MINT'"], ["constant", "'BURN'"], ["datetime_of_timestamp", "timestamp"]], "tx_hash": [["timestamp", "0xcbe1bacacc1e64fe613ae5eef2063563bd0057d1e3df"], ["tx_type", "MINT"], ["origin", "0x3435e7946d40b1a83c0cf154326fc6b3ca908952"], ["amount_USD", "7.879784e+03"], ["timestamp", "0xdddaaddf59e5a3abff4feadef83b3ceb023a74424ea7"], ["tx_type", "MINT"], ["origin", "0xc747962e7e416e2a582813b1d7ad59eb83077fa6"], ["amount_USD", "5.110840e+04"], ["timestamp", "0xa7671452c34a3b083083ef81e364489c2c9ee801a3b8"], ["tx_type", "BURN"]], "StaticField": [["datetime_of_timestamp", "timestamp"]], "Plotly": [["is", "a library"], ["is", "a Python library"], ["is", "used for data visualization"], ["is", "used for creating interactive plots"], ["Extending", "plotly components"], ["understand", "subgrounds logic"], ["is", "a library"], ["provides", "various types of charts"], ["has", "TraceWrapper"]], "TraceWrapper": [["is", "a class"], ["is", "Scatter"], ["is", "Pie"], ["is", "Bar"], ["is", "Heatmap"], ["is", "Contour"], ["is", "Table"], ["is", "Box"], ["is", "Violin"]], "Scatter": [["is", "a class"]], "Pie": [["is", "a class"]], "Bar": [["is", "a class"]], "Heatmap": [["is", "a class"]], "Contour": [["is", "a class"]], "Waterfall": [["is", "plotly"]], "Funnel": [["is", "plotly"]], "Indicator": [["is", "plotly"]], "Scatter3d": [["is", "plotly"]], "Surface": [["is", "plotly"]], "Scattergeo": [["is", "plotly"]], "Choropleth": [["is", "plotly"]], "Scattermapbox": [["is", "plotly"]], "Choroplethmapbox": [["is", "plotly"]], "Densitymapbox": [["is", "plotly"]], "VariableDefinition": [["name", "query/#subgrounds.query.VariableDefinition.name"], ["type_", "query/#subgrounds.query.VariableDefinition.type_"], ["default", "query/#subgrounds.query.VariableDefinition.default"], ["graphql", "query/#subgrounds.query.VariableDefinition.graphql"], ["represents", "GraphQL variable definition"], ["has", "name"], ["has", "type"], ["has", "default"], ["name", "VariableDefinition.name"]], "Selection": [["fmeta", "query/#subgrounds.query.Selection.fmeta"], ["alias", "query/#subgrounds.query.Selection.alias"], ["arguments", "query/#subgrounds.query.Selection.arguments"], ["selection", "query/#subgrounds.query.Selection.selection"], ["represents", "GraphQL field selection"], ["contains_list", "field"], ["add", "new_selections"], ["remove", "to_remove"]], "subgrounds.FieldPath": [["is", "FieldOperatorMixin"], ["_ subgraph", "Subgraph"], ["is", "object"]], "FieldOperatorMixin": [["is", "Bases"]], "subgrounds.Subgraph": [["url", "str"], ["schema", "SchemaMeta"], ["transforms", "list[DocumentTransform]"], ["is_subgraph", "bool"], ["Bases", "object"], ["object", "None"], ["class", "_ subgrounds"]], "request": [["in", "FieldPath"], ["in", "FieldPath"]], "response data": [["is", "The"], ["is", "list"], ["is", "dict"], ["is", "str"], ["is", "Any"], ["is", "The"], ["is", "list"], ["is", "dict"], ["is", "str"], ["is", "Any"], ["into", "Pandas DataFrame"], ["cannot be flattened", "single query"], ["yielded by", "fpaths"]], "query_json_iter": [["fpaths", "pagination_strategy"], ["returned", "iterator"]], "response data pages": [["is", "iterator"]], "fpaths": [["is", "list"], ["is", "FieldPath objects"], ["should be included in", "request"], ["list of", "FieldPath objects"], ["yielded", "response data"]], "querying": [["list fields", "return entities"]], "query_df_iter": [["fpaths", "pagination_strategy"], ["returns", "iterator"], ["response data pages", "DataFrame"], ["as", "DataFrame"]], "query": [["fpaths", "unwrap"], ["fpaths", "pagination_strategy"], ["return", "data"], ["FieldPath objects", "provided"], ["required fields including", "newly created synthetic fields"]], "value": [["is", "constant field's value"], ["is of type", "str"], ["is of type", "int"], ["is of type", "float"], ["is of type", "bool"], ["is", "constant field's value"]], "univ3": [["load_subgraph", "'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3'"], ["Mint.tx_type", "SyntheticField.constant('MINT')"], ["Burn.tx_type", "SyntheticField.constant('BURN')"], ["mints", "univ3.Query.mints"], ["burns", "univ3.Query.burns"]], "univ3.Mint": [["tx_type", "SyntheticField.constant('MINT')"], ["tx_type", "SyntheticField.constant('MINT')"]], "univ3.Burn": [["tx_type", "SyntheticField.constant('BURN')"], ["tx_type", "SyntheticField.constant('BURN')"]], "mints": [["transaction.id", "0xcbe1bacacc1e64fe613ae5eef2063563bd0057d1e3df."], ["timestamp", "1656016553"], ["tx_type", "MINT"], ["origin", "0x3435e7946d40b1a83c0cf154326fc6b3ca908952"], ["orderBy", "univ3.Mint.timestamp"], ["orderDirection", "'desc'"]], "897983e+03": [["4", "0x3315617d426fc2b0db5d8dbccd549efaa8f1ae2969ca"], ["4", "0x3315617d426fc2b0db5d8dbccd549efaa8f1ae2969ca"]], "1656015693": [["MINT", "0xb7dd4d134b1794ee848e1af1a62b85d7b2ea9301"], ["MINT", "0xb7dd4d134b1794ee848e1af1a62b85d7b2ea9301"], ["MINT", "0xb7dd4d134b1794ee848e1af1a62b85d7b2ea9301"]], "0.000000e+00": [["11", "0xcc713daa2dc58cd1f2218c8f438e7fcf04d2e9c7c83d"], ["11", "0xcc713daa2dc58cd1f2218c8f438e7fcf04d2e9c7c83d"]], "1656015278": [["BURN", "0xa7c43e2057d89b6946b8865efc8bee3a4ea7d28d"], ["BURN", "0xa7c43e2057d89b6946b8865efc8bee3a4ea7d28d"], ["BURN", "0xa7c43e2057d89b6946b8865efc8bee3a4ea7d28d"]], "1.254942e+06": [["5", "0x7bbfae86f0c3c983651bd0671557cd851fc301317c06"], ["5", "0x7bbfae86f0c3c983651bd0671557cd851fc301317c06"]], "1656015111": [["MINT", "0xac56cee8ccd00d0c1d72ce3415140874552e80f4"], ["MINT", "0xac56cee8ccd00d0c1d72ce3415140874552e80f4"]], "3.432075e+04": [["12", "0xea21c3a68a8f0c6a2721a3072e0c8b2edc77f4d2f0d9"], ["12", "0xea21c3a68a8f0c6a2721a3072e0c8b2edc77f4d2f0d9"]], "1656014785": [["BURN", "0x0709b103d46d71458a71e5d81230dd688809a53d"], ["BURN", "0x0709b103d46d71458a71e5d81230dd688809a53d"]], "2.059106e+04": [["6", "0x3bd369bf45c55cab40c62db81bb3e0684fd85fe2b662"], ["6", "0x3bd369bf45c55cab40c62db81bb3e0684fd85fe2b662"]], "1656014120": [["MINT", "0x509984bfc0fb24e2d1377cfec224d3afec4c341e"], ["MINT", "0x509984bfc0fb24e2d1377cfec224d3afec4c341e"]], "'0x5777d92f208679db4b9778590fa3cab3ac9e2168'": [["'is'", "'DAI/USDC-001'"]], "'0x6c6bc977e13df9b0de53b251522280bb72383700'": [["'is'", "'DAI/USDC-005'"]], "'0x8ad599c3a0ff1de082011efddc58f1908eb6e6d8'": [["'is'", "'USDC/ETH-030'"]], "'0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640'": [["'is'", "'USDC/ETH-005'"]], "subgrounds.client": [["get_schema", "url"], ["get_schema", "headers"], ["query", "url"], ["query", "query_str"], ["query", "variables"], ["query", "headers"]], "subgrounds.contrib.plotly": [["TraceWrapper", "kwargs"], ["Scatter", "kwargs"], ["alias of", "Scatter"], ["alias of", "Pie"], ["alias of", "Bar"], ["alias of", "Heatmap"], ["alias of", "Contour"], ["alias of", "Table"], ["alias of", "Box"], ["alias of", "Violin"], ["alias of", "Histogram"], ["alias of", "Histogram2d"]], "subgrounds.contrib.plotly.Funnel": [["alias of", "Waterfall"]], "subgrounds.contrib.plotly.Indicator": [["alias of", "Indicator"]], "subgrounds.contrib.plotly.Scatter3d": [["alias of", "Scatter3d"]], "subgrounds.contrib.plotly.Surface": [["alias of", "Surface"]], "subgrounds.contrib.plotly.Scattergeo": [["alias of", "Scattergeo"]], "subgrounds.contrib.plotly.Choropleth": [["alias of", "Choropleth"]], "subgrounds.contrib.plotly.Scattermapbox": [["alias of", "Scattermapbox"]], "subgrounds.contrib.plotly.Choroplethmapbox": [["alias of", "Choroplethmapbox"]], "subgrounds.contrib.plotly.Densitymapbox": [["alias of", "Densitymapbox"]], "subgrounds.contrib.plotly.Scatterpolar": [["alias of", "Scatterpolar"]], "subgrounds.contrib.plotly.Treemap": [["alias of", "Sunburst"]], "subgrounds.contrib.plotly.Icicle": [["alias of", "Icicle"]], "subgrounds.contrib.plotly.Sankey": [["alias of", "Sankey"]], "subgrounds.contrib.plotly.Parcoords": [["alias of", "Parcoords"]], "subgrounds.contrib.plotly.Parcats": [["alias of", "Parcats"]], "subgrounds.contrib.plotly.Carpet": [["alias of", "Carpet"]], "subgrounds.contrib.plotly.Scattercarpet": [["alias of", "Scattercarpet"]], "subgrounds.contrib.plotly.Contourcarpet": [["alias of", "Contourcarpet"]], "Contourcarpet": [["is alias of", "Contour"]], "PaginationNode.filter_value": [["is", "preprocess/#subgrounds.pagination.preprocess.PaginationNode.filter_value"]], "PaginationNode.filter_value_type": [["is", "preprocess/#subgrounds.pagination.preprocess.PaginationNode.filter_value_type"]], "PaginationNode.key_path": [["is", "preprocess/#subgrounds.pagination.preprocess.PaginationNode.key_path"]], "PaginationNode.inner": [["is", "preprocess/#subgrounds.pagination.preprocess.PaginationNode.inner"]], "PaginationNode.get_vardefs()": [["is", "preprocess/#subgrounds.pagination.preprocess.PaginationNode.get_vardefs"]], "normalize()": [["is", "preprocess/#subgrounds.pagination.preprocess.normalize"]], "PaginationStrategy.step()": [["is", "pagination/#subgrounds.pagination.pagination.PaginationStrategy.step"]], "subgrounds.pagination.PaginationNode": [["represents", "pagination config"], ["refers to", "list field"], ["has", "node_idx"], ["has", "filter_field"], ["has", "first_value"], ["has", "skip_value"], ["has", "filter_value"], ["has", "filter_value_type"], ["has", "key_path"], ["has", "inner"]], "PaginationStrategies": [["implements", "functions and data structures"]], "PaginationNode": [["extract", "information about pagination fields"]], "pagination field": [["is nested in", "another pagination field"]], "query document": [["normalized", "every pagination field"], ["transformed to", "a form"]], "field": [["requires pagination", "has its own set of variables"]], "initial query": [["transformed to", "query with variables"]], "data page": [["generate", "values for pagination variables"]], "variables": [["undefined", "document is pruned"]], "strategy": [["variable values computed", "will change"]], "Cursor": [["moves cursor forward", "according to response data"], ["iterating through", "PaginationNode"], ["iterating through", "inner PaginationNodes"], ["iterating through", "inner PaginationNodes"], ["iterating through", "inner PaginationNodes"], ["iterating through", "inner PaginationNodes"]], "step": [["Updates", "self cursor"], ["Updates", "inner state machine"]], "inner state machine": [["has reached", "its limit"]], "data": [["is", "dict"], ["processed", "manipulated"], ["displayed in", "human-readable format"]], "args": [["Returns", "pagination arguments"]], "state machine": [["Reset", "state machine"]], "subgrounds.pagination.preprocess.PaginationNode": [["is", "class"], ["represents", "pagination config"], ["has", "node_idx"], ["has", "filter_field"], ["has", "first_value"], ["has", "skip_value"], ["has", "filter_value"], ["has", "filter_value_type"]], "node_idx": [["is", "index of PaginationNode"]], "filter_field": [["is", "name of node's filter field"]], "first_value": [["is", "initial value of first argument"]], "skip_value": [["is", "initial value of skip argument"]], "filter_value": [["is", "initial value of filter argument"]], "paginate": [["executes", "request document"], ["based on", "GraphQL schema"]], "paginate_iter": [["executes", "request document"], ["based on", "GraphQL schema"]], "subgrounds.pagination.utils": [["merge", "data1"], ["merge", "data2"], ["merge", "combined result"], ["merge_input_value_object_metas", "data1"], ["merge_input_value_object_metas", "data2"], ["merge_input_value_object_metas", "combined result"]], "data1": [["must be of", "the same type"], ["and", "data2"], ["and", "data2"]], "data2": [["must be of", "the same type"]], "subgrounds.transform": [["defines", "interfaces"], ["can be applied to", "requests"], ["can be applied to", "per-document basis"]], "transforms": [["can be applied to", "entire requests"]], "RequestTransform": [["represents", "transformation layer"], ["applied to", "DataRequest objects"], ["applied to", "response data"]], "DocumentTransform": [["represents", "transformation layer"], ["applied to", "Document objects"], ["applied to", "response data"]], "subgrounds.transform.TypeTransform": [["transform to be applied", "scalar fields"], ["type indicating", "scalar values"], ["transformed using", "function f"], ["scalar values", "type type_"], ["function f", "applied to scalar values"], ["response data", "transformed response data"]], "subgrounds.transform.LocalSyntheticField": [["transform used", "synthetic fields"], ["transform_document()", "replaces the field"], ["transform_response()", "applied f"], ["selections args", "used as arguments"]], "Transform": [["is applied to", "response data"], ["is applied to", "requests"]], "Document": [["yields", "JSON data"], ["is", "initial"], ["is", "object"], ["is", "transformed"], ["is", "returned"], ["is", "transformed response data"], ["is", "returned type"]], "subgrounds.subgraph.FieldPath": [["is", "subgraph"], ["_root", "subgraph"], ["_leaf", "subgraph"], ["_merge()", "subgraph"], ["_name_path()", "subgraph"], ["_name()", "subgraph"], ["_extract_data()", "subgraph"], ["_selection()", "subgraph"], ["_set_arguments()", "subgraph"], ["_select()", "subgraph"]], "df": [["sort_values", "['timestamp']"], ["ascending", "False"], ["sort_values", "['timestamp']"]], "1656015853": [["MINT", "0xc747962e7e416e2a582813b1d7ad59eb83077fa6"]], "0xc747962e7e416e2a582813b1d7ad59eb83077fa6": [["5.122569e+04", "3"], ["0x1444744f4021a2046787c1b7b88cd9ac21f071c65acc", "1656015773"]], "1656015773": [["MINT", "0xd11aa2e3a000275ed12b87515c9ac0d67b32e7b9"]], "0xd11aa2e3a000275ed12b87515c9ac0d67b32e7b9": [["8.897983e+03", "4"], ["0x3315617d426fc2b0db5d8dbccd549efaa8f1ae2969ca", "1656015693"]], "0xb7dd4d134b1794ee848e1af1a62b85d7b2ea9301": [["0.000000e+00", "11"], ["0xcc713daa2dc58cd1f2218c8f438e7fcf04d2e9c7c83d", "1656015278"]], "pooladdr_symbol_map": [["pooladdr_symbol_map", "'DAI/USDC-001'"], ["pooladdr_symbol_map", "'DAI/USDC-005'"], ["pooladdr_symbol_map", "'USDC/ETH-030'"], ["pooladdr_symbol_map", "'USDC/ETH-005'"], ["default value", "'UNKNOWN'"]], "univ3.Pool.symbol": [["SyntheticField.map", "pooladdr_symbol_map"], ["SyntheticField.map", "pooladdr_symbol_map"]], "pools": [["univ3.Query.pools", "first=10"], ["univ3.Query.pools", "orderBy=univ3.Pool.totalValueLockedUSD"], ["univ3.Query.pools", "orderDirection='desc'"], ["id", "0xa850478adaace4c08fc61de44d8cf3b64f359bec"], ["symbol", "UNKNOWN"]], "burns": [["orderBy", "univ3.Burn.timestamp"], ["orderDirection", "'desc'"]], "univ3.Swap": [["datetime", "SyntheticField.datetime_of_timestamp(univ3.Swap.timestamp)"]], "univ3.Query.pools": [["first", "10"], ["orderBy", "univ3.Pool.totalValueLockedUSD"], ["orderDirection", "'desc'"]], "Query data structure module": [["contains", "data structures"], ["used to represent", "GraphQL queries"], ["immutable", "enforce functional programming style"]], "Subgrounds request": [["has", "dataclass hierarchy"]], "Argument": [["represents", "GraphQL field selection"]], "_description_": [["Returns", "Optional[ Selection ]"]], "_predicate_": [["filter_args", "_"], ["recurse", "True"]], "_self_": [["split", "list"]], "variable_args": [["recurse", "True"]], "varname": [["is", "name of the variable"], ["exists in", "selection"], ["named", "self"]], "self": [["contains", "data"], ["replaced with", "replacement"]], "replacement": [["is called on", "self"], ["applied to", "latter"]], "argname": [["named", "argname"], ["replaced with", "replacement"]], "recurse": [["is", "True"]], "Triplets": [["Returns", "Query object"], ["Returns", "Selections"], ["Returns", "Query objects"], ["Returns", "Query"], ["Returns", "True"], ["Returns", "False"], ["Returns", "bool"], ["Returns", "subset"], ["Returns", "other"], ["Returns", "query"]], "schema": [["selects", "non-list fields"], ["object of Interface", "object_"]], "On this page": [["contains", "Query"], ["contains", "VariableDefinition"], ["contains", "Selection"], ["contains", "Fragment"], ["contains", "Document"]], "Query": [["contains", "VariableDefinition"], ["contains", "Selection"], ["contains", "Fragment"], ["contains", "Document"]], "subgrounds.utils": [["contains_list", "data"], ["default_header", "url"], ["user_agent", "None"]], "subgrounds.dataframe_utils.DataFrameColumns": [["combine", "other"], ["mk_df", "data"]], "path_map": [["is", "dictionary"], ["pairs", "(key FieldPath)"]], "JSON data": [["formatted into", "DataFrame"]], "subgrounds.dataframe_utils": [["columns_of_selections", "list of DataFrame columns specifications"], ["df_of_json", "JSON data formatted into Pandas DataFrames"]], "selections": [["list of", "Selection trees"]], "json_data": [["formatted into", "Pandas DataFrames"]], "df_of_json": [["resulting dataframe(s)", "The resulting dataframe(s)"]], "flatten_dict()": [["Utils", "function"]], "SchemaMeta": [["contains", "data structures"], ["used to represent", "GraphQL schemas"], ["create", "new model"], ["parsing and validating", "input data"], ["raise", "ValidationError"], ["returns", "type information"], ["refers to", "non-existant type"], ["returns", "argument or field definition's underlying type"], ["finds", "nested type"], ["returns", "the type of interest"]], "Playgrounds": [["start with", "sequence"], ["differentiate", "from"], ["create", "account"], ["create", "API key"], ["copy", "API key"], ["use", "proxy API endpoint"], ["is", "endpoint"], ["contains", "path"]], "proxy API endpoint": [["query", "decentralized subgraphs"]], "subgraph": [["compatible with", "Ethereum"], ["find", "IDs"], ["access", "Uniswap V3 data"]], "Playgrounds API": [["is organized around", "REST"], ["features", "top-level resource"], ["uses", "API keys"], ["authenticate", "requests"], ["include", "Playgrounds-Api-Key"]], "API keys": [["authenticate", "requests"], ["carry", "privileges"], ["keep", "secure"], ["share", "publicly accessible areas"]], "Subgraph Proxy": [["provide", "access"], ["hosted on", "The Graph's decentralized network"]], "proxy endpoint": [["gets", "name"]], "proxy endpoints": [["provide", "access"], ["mirror", "equivalent endpoint"]], "stargate_eth": [["Query.usageMetricsDailySnapshots", "first=1000"], ["pools_query", "first=1000"]], "sg": [["initialize", "Subgrounds"], ["load_subgraph", "\"https://api.thegraph.com/subgraphs/name/messari/stargate-ethereum\""], ["query_df", "snapshot_fields"], ["query_df", "creation_fields"], ["query_df", "cumulative_metrics_fields"], ["query_df", "identity_fields"], ["query_df", "liquidity_fields"], ["query_df", "rewards_fields"], ["query_df", "volume_fields"], ["query_df", "value_locked_fields"], ["load_subgraph", "balancer_v2"]], "print": [["\"Cumulative Metrics:\"", "cumulative_metrics_df"], ["\"Snapshot Information:\"", "snapshot_info_df"], ["\"Snapshot Fields:\"", "snapshot_df"], ["\"Creation Fields:\"", "creation_df"], ["\"Cumulative Metrics Fields:\"", "cumulative_metrics_df"], ["\"Identity Fields:\"", "identity_df"], ["\"Liquidity Fields:\"", "liquidity_df"], ["\"Rewards Fields:\"", "rewards_df"], ["\"Volume Fields:\"", "volume_df"], ["\"Total Value Locked Fields:\"", "value_locked_df"]], "FinancialsDailySnapshot": [["Create", "SyntheticField"], ["Create", "datetime"], ["Create", "timestamp field"], ["Create", "human readable datetime string"], ["convert", "timestamp field into human-readable format"], ["define", "synthetic field `datetime`"], ["calculate", "difference in revenue between dailyProtocolSideRevenueUSD and dailySupplySideRevenueUSD fields over past 30 days"], ["calculate", "average of dailyProtocolSideRevenueUSD and dailySupplySideRevenueUSD fields over past 30 days"], ["calculate", "percentage change in revenue between dailyProtocolSideRevenueUSD and dailySupplySideRevenueUSD fields over past 30 days"]], "latest_snapshots": [["convert to", "Pandas dataframe"], ["extract", "first row"], ["squeeze", "res"], ["query_df", "res"]], "Uniswap v3 subgraph": [["Query", "liquidityPools endpoint"]], "liquidityPools endpoint": [["specifies", "first result"], ["specifies", "sorted in descending order"]], "Aave": [["is", "decentralized finance protocol"], ["allows", "people to lend and borrow cryptocurrencies"], ["is", "decentralized finance protocol"], ["allows", "people to lend and borrow cryptocurrencies"]], "Lenders": [["earn", "interest"], ["deposit", "digital assets into liquidity pools"], ["earn", "interest"]], "Borrowers": [["use", "crypto as collateral"], ["take out", "flash loan"], ["can use", "crypto as collateral"]], "AAVE v3": [["is loaded by", "sg.load_subgraph"]], "UsageMetricsDailySnapshot": [["is performed on", "subgraph"]], "interest": [["is earned by", "depositing digital assets into liquidity pools"]], "crypto": [["is used as collateral to take out", "flash loan"]], "flash loan": [["uses", "liquidity"]], "Aave V3": [["introduces", "new risk mitigation features"], ["improves", "capital efficiency"], ["lowers", "gas fees"]], "aave_lending": [["is", "lendingProtocols"], ["name", "None"], ["type", "None"], ["cumulativeBorrowUSD", "None"], ["cumulativeDepositUSD", "None"], ["cumulativeLiquidateUSD", "None"], ["cumulativePositionCount", "None"], ["cumulativeProtocolSideRevenueUSD", "None"]], "aave_overview": [["query_df", "aave_lending"], ["squeeze", "None"]], "fraxlendFactories": [["has id", "fraxlendFactories.id"], ["has total TVL value", "fraxlendFactories.totalTVLValue"], ["has total borrowed value", "fraxlendFactories.totalBorrowedValue"], ["has total collateral locked value", "fraxlendFactories.totalCollateralLockedValue"], ["has position count", "fraxlendFactories.positionCount"], ["has pair count", "fraxlendFactories.pairCount"], ["has asset token count", "fraxlendFactories.assetTokenCount"], ["has collateral token count", "fraxlendFactories.collateralTokenCount"]], "lido_activity": [["is loaded using", "API URL"], ["fetch", "usageMetricsDailySnapshots"], ["specifies ordering options", "sort data"], ["limits", "number of results"], ["fetch", "last 30 days of data"], ["is loaded using", "API URL"], ["is used to interact with", "Lido Ethereum subgraph"], ["constructs a query to fetch", "financialsDailySnapshots entity"], ["specifies ordering options to sort", "data by timestamp"], ["limits the number of results to", "30"], ["creates a SyntheticField named", "datetime"], ["takes the original timestamp field", "converts it to a human-readable format"], ["fetches the data and stores it", "in a DataFrame"], ["demonstrates how the Subgrounds library can be used", "to interact with a subgraph"]], "datetime": [["is created for", "UsageMetricsDailySnapshot entity"], ["takes", "original timestamp field"], ["converts", "timestamp to human-readable format"], ["stores", "as a float"]], "sg.query_df()": [["is used to execute", "query"], ["takes", "list of fields to be fetched"], ["returns", "pandas DataFrame"]], "Subgrounds library": [["interact with", "Lido Ethereum subgraph"], ["can be used to interact with", "subgraph"], ["can be used to interact with", "Lido Ethereum subgraph"], ["can be used to interact with", "fetch specific financial data"], ["can be used to interact with", "particular pool"], ["can be used to interact with", "queries"], ["can be used to interact with", "data"], ["can be used to interact with", "processed"], ["can be used to interact with", "manipulated"], ["can be used to interact with", "displayed"], ["can be used to interact with", "human-readable format"], ["provides", "interface"], ["fetch", "manipulate data"], ["fetch", "data"], ["fetch", "data from blockchains"], ["fetch", "data from Ethereum"], ["fetch", "data from The Graph"], ["fetch", "data from The Graph protocol"], ["fetch", "data from The Graph protocol for indexing"], ["fetch", "data from The Graph protocol for querying"], ["fetch", "data from The Graph protocol for indexing and querying"]], "Lido Ethereum subgraph": [["fetch", "specific financial data"]], "pool": [["ID", "particular pool"]], "necessary libraries": [["imported", "datetime"], ["imported", "SyntheticField"], ["imported", "Subgrounds"], ["imported", "pandas"], ["imported", "numpy"]], "financialsDailySnapshots": [["sorted by", "timestamp"], ["limited to", "last 30 entries"]], "flatten": [["data into", "single DataFrame"]], "analyze": [["single DataFrame", "for analysis"]], "Lido subgraph": [["fetches", "usage metrics daily snapshots"], ["orders by", "timestamp"], ["limits results to", "last 30 days"], ["queries", "daily timestamp"]], "Rocket Pool subgraph": [["fetches", "usage metrics daily snapshots"], ["orders by", "timestamp"], ["limits results to", "last 30 days"]], "Lido": [["is a subgraph of", "Ethereum"]], "rocketPool_subgraph": [["is a subgraph of", "Ethereum"]], "lido_subgraph": [["Query", "usageMetricsDailySnapshots"], ["Query", "usageMetricsDailySnapshots"], ["Query", "usageMetricsDailySnapshots"], ["Query", "usageMetricsDailySnapshots"], ["Query", "usageMetricsDailySnapshots"]]}}