{"graph_dict": {"Subgrounds": [["can be installed via", "pip"], ["can be installed via", "commands"], ["can be installed via", "pip"], ["can be installed via", "commands"], ["can be installed via", "pip"], ["can be installed via", "commands"], ["can be installed via", "pip"], ["can be installed via", "commands"], ["can be installed via", "pip"], ["can be installed via", "commands"], ["requires", "python >= 3.10"], ["is", "class"], ["provides", "top level API"], ["will be using", "class"], ["is used to load", "GraphQL APIs"], ["is meant to be used", "singleton"], ["initialized once", "reused throughout a project"], ["demonstrates how to initialize", "Subgrounds object"], ["load", "GraphQL API"], ["load_subgraph", "\"https://api.thegraph.com/subgraphs/name/messari/curve\""], ["load_subgraph", "\"https://api.thegraph.com/subgraphs/name/messari/curve/finance\""], ["load_subgraph", "\"https://api.thegraph.com/subgraphs/name/messari/curve finance ethereum\""], ["query_df", "curve.Query.liquidityPool(orderBy=pool.cumulativeTotalRevenueUSD)"], ["merge", "list of FieldPaths"], ["query", "function"], ["load_subgraph", "URL"], ["query_df", "list of FieldPaths"], ["query", "query()"], ["query_json", "query_json()"], ["query_df", "query_df()"], ["query_df", "query_df()"], ["load_subgraph", "\"https://api.thegraph.com/subgraphs/name/messari/aave\""], ["load_subgraph", "v2"], ["load_subgraph", "Ethereum"], ["load_subgraph", "sg.load_subgraph"], ["load_subgraph", "aave_v2"], ["load_subgraph", "\"https://api.thegraph.com/subgraphs/name/messari/aave/v2\""], ["provides", "two pagination strategies"], ["implements", "PaginationStrategy"], ["raises", "PaginationError exception"], ["provides", "LegacyStrategy"], ["is", "library"], ["load_subgraph", "\"https://api.thegraph.com/subgraphs/name/messari/curve\\n\\n\\n\\nfinance\\n\\n\\n\\nethereum\""], ["load_subgraph", "\"https://api.thegraph.com/subgraphs/name/messari/aave\\n\\n\\n\\nv2\\n\\n\\n\\nethereum\""], ["load_subgraph", "\"https://api.thegraph.com/subgraphs/name/messari/lido\""], ["query_df", "curve.Query.financialsDailySnapshots(first=2500)"], ["paginated", "requests"], ["access", "data"], ["set", "first argument"], ["execute", "DataRequest"], ["mk_request", "FieldPath"], ["load_subgraph", "uniswap/uniswap-v3"], ["load_api", "None"], ["mk_request", "None"], ["execute", "None"], ["execute_iter", "None"], ["query_json", "None"], ["query_json_iter", "None"], ["query_df", "None"], ["query_df_iter", "None"], ["query", "None"], ["execute", "DataRequest"], ["mk_request", "FieldPath"], ["query_json", "Subgrounds"], ["pagination_strategy", "LegacyStrategy"], ["offers", "PaginationStrategies"], ["paginate", "automatically"], ["load_subgraph", "'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3'"], ["load_subgraph", "'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3'"], ["load_subgraph", "'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3'"], ["simplifies and streamlines", "querying and data analysis"], ["initialized with", "API key"], ["initialized with", "playgrounds api key"], ["initialized with", "PG_API_KEY"], ["initialized with", "headers"], ["initialized with", "Playgrounds Api Key"], ["initialized with", "PG_API_KEY"], ["initialized with", "custom header"], ["initialized with", "API key"], ["initialized with", "custom header"], ["load_subgraph", "\"https://api.thegraph.com/subgraphs/name/messari/stargate-ethereum\""], ["initialize", "Subgrounds"], ["load", "subgraph"], ["load_subgraph", "subgraph_url"], ["load_subgraph", "'https://api.thegraph.com/subgraphs/name/messari/lido-ethereum'"], ["load_subgraph", "subgraph_url"], ["load_subgraph", "subgraph_url"], ["load_subgraph", "'https://api.thegraph.com/subgraphs/name/messari/lido-ethereum'"], ["load_subgraph", "subgraph"], ["imports", "libraries"], ["loads", "environment variables"], ["creates", "Subgrounds object"], ["loads", "Uniswap v3 subgraph"], ["queries", "financialsDailySnapshots endpoint"], ["converts", "query results"], ["extracts", "first row"], ["view", "result"], ["queries", "liquidity pools"], ["retrieves", "information"], ["is used to load", "subgraphs"], ["query data from", "subgraphs"], ["fetch", "queried data"], ["making", "easy to manipulate"], ["making", "easy to analyze"], ["making", "easy to analyze"], ["making", "easy to analyze"], ["making", "easy to analyze"], ["making", "easy to analyze"], ["making", "easy to analyze"], ["is initialized by", "sg"], ["load subgraph", "'https://api.thegraph.com/subgraphs/name/messari/lido-ethereum'"], ["load subgraph", "'https://api.thegraph.com/subgraphs/name/messari/rocket-pool-ethereum'"], ["query usage metrics daily snapshots for", "lido_subgraph"], ["query usage metrics daily snapshots for", "rocketPool_subgraph"], ["Import", "subgrounds"], ["Instantiate", "subgrounds"], ["insert", "Playgrounds API key"], ["from_pg_key", "\"pg-AqAFS8G3TN3Kagdgw2MrGjFvDGUgxImS\""], ["Instantiate", "subgrounds"]], "sg": [["load_subgraph", "\"https://api.thegraph.com/subgraphs/name/messari/curve\""], ["provides a default server timeout of", "30s"], ["initialize", "Subgrounds"], ["load_subgraph", "\"https://api.thegraph.com/subgraphs/name/messari/stargate-ethereum\""], ["query_df", "snapshot_fields"], ["query_df", "creation_fields"], ["query_df", "cumulative_metrics_fields"], ["query_df", "identity_fields"], ["query_df", "liquidity_fields"], ["query_df", "rewards_fields"], ["query_df", "volume_fields"], ["query_df", "value_locked_fields"], ["query_df", "cumulative_metrics_fields"], ["query_df", "snapshot_info_fields"], ["query_df", "protocol_metrics_fields"]], "ethereum": [["is", "Python"], ["is", "analyzing curve pool data"], ["is", "a coffee shop"], ["founded in", "Berkeley"], ["founded in", "1982"], ["is", "a field path"], ["is", "a subgraph"], ["is", "a query"], ["is", "a relative form"], ["is", "a raw form"]], "Filtering": [["is done via", "where argument"]], "subgraphs": [["provides", "several options"]], "filter": [["based on", "field path"]], "filtering": [["can be based on", "comparison logic"], ["can be based on", "standard comparison logic"], ["can be based on", "greater than"], ["can be based on", "less than"]], "entities": [["can have", "layer of nestable objects"]], "objects": [["are filterable in", "where clause"]], "GraphQL": [["assumes", "you are matching"]], "curve.Query.liquidityPool": [["orderBy", "pool.outputToken.lastPriceUSD"]], "FieldPaths": [["originate from", "same subgraph"]], "button": [["enable", "editing and execution"]], "code-blocks": [["on", "this page"]], "liquidityPools": [["orderBy", "cumulativeVolumeUSD"], ["orderDirection", "desc"], ["name", "top 4 most traded pools"], ["dailySnapshots", "top 3 days"]], "dailySnapshots": [["orderBy", "dailyTotalRevenueUSD"]], "aave_markets": [["is", "Query.markets"], ["first", "3"], ["orderBy", "Market.totalValueLockedUSD"], ["orderDirection", "\"desc\""], ["where", "[Market.createdBlockNumber > 14720000]"]], "sg.query": [["a list of", "names"], ["a matching list of", "TVL values"]], "sg.query_json": [["a more complex", "JSON data structure"]], "sg.query_df": [["a simple DataFrame", "gets returned"]], "query_df": [["can also take", "an optional parameter columns"]], "sushiswap": [["load_subgraph", "\"https://api.thegraph.com/subgraphs/name/sushiswap/exchange\""]], "swap": [["price1", "( abs(swap.amount0Out - swap.amount0In) / abs(swap.amount1Out - swap.amount1In) )"]], "last_10_swaps": [["orderBy", "swap.timestamp"], ["orderDirection", "\"desc\""], ["first", "10"], ["orderBy", "swap.timestamp"], ["orderDirection", "\"desc\""], ["first", "10"]], "Pagination": [["is performed by", "Subgrounds"], ["Strategies", "StopPagination"], ["normalize", "None"], ["paginate_iter", "None"], ["paginate", "None"], ["PaginationError", "None"], ["PaginationNode", "None"], ["contains", "pagination algorithms"], ["make use of", "pagination strategies"]], "PaginationStrategy": [["is", "a class"], ["implements", "PaginationStrategy protocol"], ["was in", "error occured state"], ["has method", "step"]], "PaginationError": [["contains", "initial exception message"], ["contains", "PaginationStrategy object"]], "LegacyStrategy": [["supports", "pagination on nested fields"]], "Plotly": [["is", "extension"], ["visualize", "data"], ["is", "a library"], ["is", "a contribution"], ["has", "TraceWrapper"], ["has", "Scatter"], ["has", "Pie"], ["Extending", "subgrounds components"], ["understand", "subgrounds logic"]], "subgrounds": [["is integrated through", "clients"], ["load_subgraph", "url"], ["load_subgraph", "save_schema"], ["load_subgraph", "cache_dir"], ["load_api", "url"], ["load_api", "save_schema"], ["load_api", "cache_dir"]], "subgrounds.Subgrounds": [["bases", "object"], ["global_transforms", "list[subgrounds.transform.RequestTransform]"]], "DataRequest": [["included in", "request"], ["is executed by", "Subgrounds"], ["returns", "response data"], ["is executed by", "Subgrounds"], ["is executed by", "Subgrounds"], ["is executed by", "Subgrounds"], ["is executed by", "Subgrounds"], ["is executed by", "Subgrounds"], ["combine", "FieldPath"], ["include", "FieldPath"], ["object", "DataRequest"], ["execute", "DataRequest"], ["send", "query"], ["return", "data blob"], ["iterate", "data pages"], ["pass through", "transformation layer"], ["transformed to", "DataRequest"], ["yielded", "JSON data"], ["yielded", "response data"], ["has", "Document"]], "'columns'": [["'is used to rename'", "'dataframes(s)'"], ["'must be the same as'", "'number of columns'"]], "'concat'": [["'indicates whether or not'", "'resulting dataframes should be concatenated together'"]], "'dataframes'": [["'must have the same'", "'number of columns'"], ["'must have the same'", "'column names and types'"]], "'names'": [["'can be set using'", "'columns argument'"]], "'Returns'": [["'A DataFrame containing'", "'reponse data'"]], "'Return type'": [["'pd.DataFrame | list'", "'pd.DataFrame'"]], "'Query'": [["'last 10 swaps from'", "'ETH/USDC pool'"]], "'where'": [["'univ3.Swap.pool =='", "\"'0x8ad599c3a0ff1de082011efddc58f1908eb6e6d8'\""]], "Subgraph Utilities": [["class", "subgrounds.Subgraph"], ["class", "subgrounds.FieldPath"], ["class", "subgrounds.SyntheticField"], ["constant", "SyntheticField"], ["returns", "iterator"]], "FieldPath": [["subgraph", "Subgraph"], ["root_type", "TypeRef.T"], ["type_", "TypeRef.T"], ["path", "list"], ["is", "a class"], ["_merge", "merge"], ["_name_path", "name path"], ["_name", "name"], ["_extract_data", "extract data"], ["_selection", "selection"], ["_set_arguments", "set arguments"], ["_select", "select"], ["_extend", "extend"], ["should be included in", "request"], ["should be included in", "request"], ["should be included in", "request"], ["Returns", "type information"], ["Returns", "root field"], ["Returns", "leaf field"], ["Returns", "Selection tree"], ["Parameters", "fpaths"], ["Returns", "list of field names"], ["Returns", "generated name"], ["Extract", "data"], ["Parameters", "data"], ["Returns", "selection or list of selections"], ["_extend", "ext"], ["_select", "name"], ["_description", "None"], ["Return type", "FieldPath"], ["_extend", "ext"], ["_select", "name"]], "SyntheticField": [["f", "Callable"], ["type_", "TypeRef.T"], ["transform", "FieldPath"], ["map", "values"], ["map", "key value pairs"], ["map", "fpath"], ["map", "dict"], ["map", "default"], ["map", "SyntheticField"], ["map", "values"], ["map", "dictionary"], ["f", "Callable"], ["type_", "TypeRef.T"], ["is", "constant"], ["constant", "'MINT'"], ["constant", "'BURN'"], ["datetime_of_timestamp", "timestamp"], ["transform", "FieldPath"], ["representing", "Unix timestamp field"], ["return type", "SyntheticField"], ["map", "dict"], ["_", "f"], ["_", "type_"], ["_", "deps"], ["_", "default"], ["returns", "constant"], ["with value", "value"], ["useful for", "injecting additional static data"], ["map", "values"], ["map", "fpath"], ["map", "dict"], ["map", "default"], ["map", "key value pairs"], ["map", "key"], ["map", "pairs"], ["map", "values"], ["map", "default"], ["constant", "value"], ["is", "constant"], ["is", "SyntheticField"], ["will map", "values"]], "tx_hash": [["timestamp", "1656016553"], ["tx_type", "MINT"], ["origin", "0x3435e7946d40b1a83c0cf154326fc6b3ca908952"], ["amount_USD", "7.879784e+03"], ["timestamp", "1656016284"], ["tx_type", "MINT"], ["origin", "0xdddaaddf59e5a3abff4feadef83b3ceb023a74424ea7"], ["amount_USD", "5.110840e+04"], ["timestamp", "1656016284"], ["tx_type", "BURN"]], "StaticField": [["datetime_of_timestamp", "timestamp"]], "TraceWrapper": [["is", "a class"], ["belongs to", "Plotly"]], "Scatter": [["is", "a class"], ["belongs to", "Plotly"]], "Pie": [["is", "a class"]], "Waterfall": [["is", "graph_object"]], "Funnel": [["is", "graph_object"]], "Indicator": [["is", "graph_object"]], "Scatter3d": [["is", "graph_object"]], "Surface": [["is", "graph_object"]], "Scattergeo": [["is", "graph_object"]], "Choropleth": [["is", "graph_object"]], "Scattermapbox": [["is", "graph_object"]], "Choroplethmapbox": [["is", "graph_object"]], "Densitymapbox": [["is", "graph_object"]], "merge": [["is", "a function"], ["_static_", "selections"], ["_returns_", "list"], ["_returns_", "Selection"], ["selections", "_list_"]], "VariableDefinition": [["name", "query/#subgrounds.query.VariableDefinition.name"], ["type_", "query/#subgrounds.query.VariableDefinition.type_"], ["default", "query/#subgrounds.query.VariableDefinition.default"], ["graphql", "query/#subgrounds.query.VariableDefinition.graphql"], ["has", "InputValue"]], "Argument": [["None", "query/#subgrounds.query.Argument"]], "Selection": [["None", "query/#subgrounds.query.Selection"], ["fmeta", "query/#subgrounds.query.Selection.fmeta"], ["alias", "query/#subgrounds.query.Selection.alias"], ["arguments", "query/#subgrounds.query.Selection.arguments"], ["selection", "query/#subgrounds.query.Selection.selection"], ["has", "Argument"], ["has", "InputValue"], ["contains_list", "field"], ["split", "list"], ["add", "new_selections"], ["remove", "to_remove"], ["variable_args", "recurse"]], "subgrounds.FieldPath": [["is", "FieldOperatorMixin"]], "subgrounds.Subgraph": [["is", "object"]], "fpaths": [["is", "FieldPath"], ["is", "list"], ["is", "FieldPath"], ["is", "list"], ["is", "FieldPath"], ["is", "list"], ["is", "FieldPath"], ["is", "list"], ["is", "FieldPath objects"], ["should be included in", "request"], ["is", "FieldPath object(s)"]], "query_df_iter": [["fpaths", "pagination_strategy"], ["returns", "iterator"], ["response data pages", "as DataFrame"], ["pagination_strategy", "LegacyStrategy"]], "query": [["fpaths", "unwrap"], ["fpaths", "pagination_strategy"], ["returns", "data"], ["pagination_strategy", "LegacyStrategy"], ["transformed to", "query with variables"], ["contains", "other"], ["remove", "other"], ["add", "other"], ["contains_selection", "selection"], ["contains", "other"], ["remove", "other"]], "FieldPath object(s)": [["to query", "None"], ["data", "None"], ["data", "FieldPath object(s)"], ["to query", "None"], ["data pages", "None"], ["data pages", "FieldPath object(s)"]], "fpath": [["is", "FieldPath object(s)"], ["using", "key value pairs"]], "value": [["is", "constant"], ["(str)", "The constant field's value"], ["(int)", "The constant field's value"], ["(float)", "The constant field's value"], ["(bool)", "The constant field's value"], ["is", "str"], ["is", "int"], ["is", "float"], ["is", "constant field's value"], ["is in", "dictionary"]], "univ3.Mint.tx_type": [["is", "SyntheticField.constant('MINT')"]], "univ3.Burn.tx_type": [["is", "SyntheticField.constant('BURN')"]], "897983e+03": [["4", "0x3315617d426fc2b0db5d8dbccd549efaa8f1ae2969ca"], ["4", "0x3315617d426fc2b0db5d8dbccd549efaa8f1ae2969ca"]], "1656015693": [["MINT", "0xb7dd4d134b1794ee848e1af1a62b85d7b2ea9301"], ["MINT", "0xb7dd4d134b1794ee848e1af1a62b85d7b2ea9301"], ["MINT", "0xb7dd4d134b1794ee848e1af1a62b85d7b2ea9301"]], "0.000000e+00": [["11", "0xcc713daa2dc58cd1f2218c8f438e7fcf04d2e9c7c83d"], ["11", "0xcc713daa2dc58cd1f2218c8f438e7fcf04d2e9c7c83d"]], "1656015278": [["BURN", "0xa7c43e2057d89b6946b8865efc8bee3a4ea7d28d"], ["BURN", "0xa7c43e2057d89b6946b8865efc8bee3a4ea7d28d"]], "1.254942e+06": [["5", "0x7bbfae86f0c3c983651bd0671557cd851fc301317c06"], ["5", "0x7bbfae86f0c3c983651bd0671557cd851fc301317c06"]], "1656015111": [["MINT", "0xac56cee8ccd00d0c1d72ce3415140874552e80f4"], ["MINT", "0xac56cee8ccd00d0c1d72ce3415140874552e80f4"]], "3.432075e+04": [["12", "0xea21c3a68a8f0c6a2721a3072e0c8b2edc77f4d2f0d9"], ["12", "0xea21c3a68a8f0c6a2721a3072e0c8b2edc77f4d2f0d9"]], "1656014785": [["BURN", "0x0709b103d46d71458a71e5d81230dd688809a53d"], ["BURN", "0x0709b103d46d71458a71e5d81230dd688809a53d"]], "2.059106e+04": [["6", "0x3bd369bf45c55cab40c62db81bb3e0684fd85fe2b662"], ["6", "0x3bd369bf45c55cab40c62db81bb3e0684fd85fe2b662"]], "1656014120": [["MINT", "0x509984bfc0fb24e2d1377cfec224d3afec4c341e"], ["MINT", "0x509984bfc0fb24e2d1377cfec224d3afec4c341e"]], "1656013237": [["BURN", "0x665d2d2444f2384fb3d96aaa0ea3536b92984dce"], ["2.254100e+05", "19"], ["BURN", "0x01c3424a48c36104ea388482723347f15c0bc1bb1a80"]], "1656013034": [["BURN", "0x0084ee6c8893c01e252198b56ec127443dc27464"]], "timestamp": [["representing", "Unix timestamp field"]], "'0x5777d92f208679db4b9778590fa3cab3ac9e2168'": [["'is'", "'DAI/USDC-001'"], ["'symbol'", "'DAI/USDC-001'"]], "'0x6c6bc977e13df9b0de53b251522280bb72383700'": [["'is'", "'DAI/USDC-005'"], ["'symbol'", "'DAI/USDC-005'"]], "'0x8ad599c3a0ff1de082011efddc58f1908eb6e6d8'": [["'is'", "'USDC/ETH-030'"], ["'symbol'", "'USDC/ETH-030'"]], "'0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640'": [["'is'", "'USDC/ETH-005'"], ["'symbol'", "'USDC/ETH-005'"]], "'0xa850478adaace4c08fc61de44d8cf3b64f359bec'": [["'symbol'", "'UNKNOWN'"]], "'0x3416cf6c708da44db2624d63ea0aaef7113527c6'": [["'symbol'", "'UNKNOWN'"]], "subgrounds.client": [["get_schema", "url"], ["get_schema", "headers"], ["query", "url"], ["query", "query_str"], ["query", "variables"], ["query", "headers"]], "subgrounds.contrib.plotly": [["TraceWrapper", "kwargs"], ["Scatter", "kwargs"]], "subgrounds.contrib.plotly.Pie": [["alias of", "graph_object"]], "subgrounds.contrib.plotly.Bar": [["alias of", "graph_object"]], "subgrounds.contrib.plotly.Heatmap": [["alias of", "graph_object"]], "subgrounds.contrib.plotly.Contour": [["alias of", "graph_object"]], "subgrounds.contrib.plotly.Table": [["alias of", "graph_object"]], "subgrounds.contrib.plotly.Box": [["alias of", "graph_object"]], "subgrounds.contrib.plotly.Violin": [["alias of", "graph_object"]], "subgrounds.contrib.plotly.Histogram": [["alias of", "graph_object"]], "subgrounds.contrib.plotly.Histogram2d": [["alias of", "graph_object"]], "subgrounds.contrib.plotly.Histogram2dContour": [["alias of", "graph_object"]], "subgrounds.contrib.plotly.Funnel": [["alias of", "Waterfall"]], "subgrounds.contrib.plotly.Indicator": [["alias of", "Indicator"]], "subgrounds.contrib.plotly.Scatter3d": [["alias of", "Scatter3d"]], "subgrounds.contrib.plotly.Surface": [["alias of", "Surface"]], "subgrounds.contrib.plotly.Scattergeo": [["alias of", "Scattergeo"]], "subgrounds.contrib.plotly.Choropleth": [["alias of", "Choropleth"]], "subgrounds.contrib.plotly.Scattermapbox": [["alias of", "Scattermapbox"]], "subgrounds.contrib.plotly.Choroplethmapbox": [["alias of", "Choroplethmapbox"]], "subgrounds.contrib.plotly.Densitymapbox": [["alias of", "Densitymapbox"]], "subgrounds.contrib.plotly.Scatterpolar": [["alias of", "Scatterpolar"]], "subgrounds.contrib.plotly.Treemap": [["alias of", "Sunburst"], ["See", "https://plotly.com/python/treemaps/"]], "subgrounds.contrib.plotly.Icicle": [["alias of", "Icicle"], ["See", "https://plotly.com/python/icicle"]], "subgrounds.contrib.plotly.Sankey": [["alias of", "Sankey"]], "subgrounds.contrib.plotly.Parcoords": [["alias of", "Parcoords"]], "subgrounds.contrib.plotly.Parcats": [["alias of", "Parcats"]], "subgrounds.contrib.plotly.Carpet": [["alias of", "Carpet"]], "subgrounds.contrib.plotly.Scattercarpet": [["alias of", "Scattercarpet"]], "subgrounds.contrib.plotly.Contourcarpet": [["alias of", "Contourcarpet"]], "PaginationNode": [["has", "node_idx"], ["has", "filter_field"], ["has", "first_value"], ["has", "skip_value"], ["has", "node_idx"], ["has", "filter_field"], ["has", "first_value"], ["node_idx", "None"], ["filter_field", "None"], ["first_value", "None"], ["skip_value", "None"], ["filter_value", "None"], ["extract", "information about pagination fields"], ["maintain", "nestedness relationship"]], "LegacyStrategyArgGenerator.Cursor": [["has", "update()"], ["has", "step()"], ["has", "args()"], ["has", "reset()"]], "ShallowStrategyArgGenerator.Cursor": [["has", "page_node"], ["has", "inner"]], "subgrounds.pagination": [["contains", "code"]], "subgrounds.pagination.preprocess.PaginationNode.filter_value": [["is", "preprocess/#subgrounds.pagination.preprocess.PaginationNode.filter_value"]], "subgrounds.pagination.preprocess.PaginationNode.filter_value_type": [["is", "preprocess/#subgrounds.pagination.preprocess.PaginationNode.filter_value_type"]], "subgrounds.pagination.preprocess.PaginationNode.key_path": [["is", "preprocess/#subgrounds.pagination.preprocess.PaginationNode.key_path"]], "subgrounds.pagination.preprocess.PaginationNode.inner": [["is", "preprocess/#subgrounds.pagination.preprocess.PaginationNode.inner"]], "subgrounds.pagination.preprocess.PaginationNode.get_vardefs()": [["is", "preprocess/#subgrounds.pagination.preprocess.PaginationNode.get_vardefs"]], "subgrounds.pagination.preprocess.normalize()": [["is", "preprocess/#subgrounds.pagination.preprocess.normalize"]], "pagination": [["contains", "pagination/"]], "subgrounds.pagination.pagination.PaginationError": [["is", "pagination/#subgrounds.pagination.pagination.PaginationError"]], "subgrounds.pagination.pagination.PaginationStrategy": [["is", "pagination/#subgrounds.pagination.pagination.PaginationStrategy"]], "subgrounds.pagination.pagination.PaginationStrategy.step()": [["is", "pagination/#subgrounds.pagination.pagination.PaginationStrategy.step"]], "subgrounds.pagination.PaginationNode": [["represents", "pagination config"], ["refers to", "list field"], ["has", "pagination arguments"], ["has", "nested pagination nodes"]], "subgrounds.pagination.PaginationStrategy": [["step", "returns new query document"], ["step", "returns variables"], ["raises", "StopPagination exception"]], "PaginationStrategies": [["implements", "functions and data structures"]], "query document": [["normalized", "every pagination field"], ["transformed", "form"]], "data page": [["generate", "values for pagination variables"]], "document": [["pruned", "selections containing undefined variables"]], "strategy": [["variable values computed", "step 3"]], "subgrounds.pagination.strategies": [["StopPagination", "exception"], ["SkipPagination", "exception"]], "Strategies": [["include", "StopPagination"], ["include", "SkipPagination"], ["include", "LegacyStrategyArgGenerator"]], "LegacyStrategyArgGenerator": [["Cursor", "update"], ["Cursor", "step"], ["Cursor", "args"], ["Cursor", "reset"]], "ShallowStrategyArgGenerator": [["Cursor", "page_node"], ["Cursor", "inner"]], "subgrounds.pagination.preprocess.PaginationNode": [["represents", "pagination config"], ["node_idx", "index"], ["filter_field", "name"], ["first_value", "initial value"], ["skip_value", "initial value"], ["filter_value", "initial value"], ["filter_value_type", "type"], ["key_path", "location"], ["inner", "nested pagination nodes"], ["get_vardefs", "returns list of variable definitions"]], "subgrounds.pagination.preprocess": [["normalize", "injects graphql components"]], "step": [["takes argument", "page_data"], ["returns", "new query document and its variables"], ["raises exception", "StopPagination"]], "paginate": [["based on", "GraphQL schema"]], "paginate_iter": [["based on", "GraphQL schema"]], "subgrounds.pagination.utils": [["merge", "data1"], ["merge", "data2"], ["merge", "combined result"], ["merge_input_value_object_metas", "data1"], ["merge_input_value_object_metas", "data2"], ["merge_input_value_object_metas", "combined result"]], "data1": [["must be", "the same type"], ["and", "data2"], ["and", "data2"]], "data2": [["must be", "the same type"]], "subgrounds.transform": [["represents", "transformation layer"], ["applied to", "DataRequest objects"], ["applied to", "response data"]], "DocumentTransform": [["represents", "transformation layer"], ["applied to", "Document objects"]], "Document": [["pass through", "transformation layer"], ["transformed to", "Document"], ["yielded", "JSON data"], ["yielded", "JSON data"], ["yielded", "resulting JSON data"], ["yielded", "data"], ["has", "Query"]], "subgrounds.transform.TypeTransform": [["transform to be applied", "scalar fields"], ["type indicating", "scalar values"], ["function to be applied", "scalar values"], ["transform document", "Document objects"], ["transformed document", "Document"], ["transform response", "response data"], ["transformed response data", "dict"]], "subgrounds.transform.LocalSyntheticField": [["transform used", "synthetic fields"], ["transform document", "Document objects"], ["transform response", "response data"]], "Transform": [["is applied to", "response data"], ["is applied to", "all response data"], ["is applied to", "requests"], ["is applied to", "all requests"]], "Request": [["pass through", "transformation layer"], ["pass through", "all requests"]], "Response data": [["of requests", "pass through transformation layer"]], "subgrounds.subgraph.FieldPath": [["is", "subgraph"], ["_root", "subgraph"], ["_leaf", "subgraph"], ["_merge()", "subgraph"], ["_name_path()", "subgraph"], ["_name()", "subgraph"], ["_extract_data()", "subgraph"], ["_selection()", "subgraph"], ["_set_arguments()", "subgraph"], ["_select()", "subgraph"]], "1656015853": [["MINT", "0xc747962e7e416e2a582813b1d7ad59eb83077fa6"]], "0xc747962e7e416e2a582813b1d7ad59eb83077fa6": [["has value", "5.122569e+04"], ["has number", "3"], ["has address", "0x1444744f4021a2046787c1b7b88cd9ac21f071c65acc"]], "1656015773": [["MINT", "0xd11aa2e3a000275ed12b87515c9ac0d67b32e7b9"]], "0xd11aa2e3a000275ed12b87515c9ac0d67b32e7b9": [["has value", "8.897983e+03"], ["has number", "4"], ["has address", "0x3315617d426fc2b0db5d8dbccd549efaa8f1ae2969ca"]], "0xb7dd4d134b1794ee848e1af1a62b85d7b2ea9301": [["has value", "0.000000e+00"]], "pooladdr_symbol_map": [["is", "dictionary"], ["with", "'UNKNOWN' as the default value"], ["is", "dictionary"], ["with", "'UNKNOWN' as the default value"]], "univ3.Pool.symbol": [["is", "SyntheticField.map"], ["SyntheticField.STRING", "pooladdr_symbol_map"], ["univ3.Pool.id", "'UNKNOWN'"], ["is", "SyntheticField.map"]], "pools": [["univ3.Query.pools", "first=10"], ["univ3.Query.pools", "orderBy=univ3.Pool.totalValueLockedUSD"], ["univ3.Query.pools", "orderDirection='desc'"], ["orderBy", "univ3.Pool.totalValueLockedUSD"], ["orderDirection", "'desc'"], ["first", "10"], ["id", "0xa850478adaace4c08fc61de44d8cf3b64f359bec"], ["symbol", "UNKNOWN"]], "univ3": [["Mint.tx_type", "SyntheticField.constant('MINT')"], ["Burn.tx_type", "SyntheticField.constant('BURN')"], ["Query.mints", "first=10"], ["Query.mints", "orderBy=univ3.Mint.timestamp"], ["Query.mints", "orderDirection='desc'"], ["Query.burns", "first=10"], ["Query.burns", "orderBy=univ3.Burn.timestamp"]], "values": [["in", "dict"]], "Query data structure module": [["contains", "data structures"], ["used to represent", "GraphQL queries"], ["immutable", "enforce functional programming style"]], "Query": [["has", "VariableDefinition"], ["has", "Selection"]], "_description_": [["Returns", "Optional[ Selection ]"]], "_predicate_": [["filter_args", "_"], ["recurse", "True"]], "_self_": [["Returns", "_description_"], ["Returns", "Selection"]], "Returns": [["_bool_", "_description_"], ["_list_", "_description_"]], "contains": [["_other_", "Selection"], ["_returns_", "True"]], "contains_argument": [["_argname_", "True"], ["_returns_", "True"]], "varname": [["is", "name of variable"], ["exists in", "selection"]], "self": [["contains", "varname"], ["has", "argument"], ["has", "variable value"], ["has", "select"], ["has", "variable value named"], ["has", "argument named"], ["replaced with", "replacement"], ["has", "inner selections"]], "og_selection": [["remove", "selection_to_remove"], ["contains_selection", "selection"]], "selection": [["remove", "selection_to_remove"], ["contains_selection", "selection"]], "schema": [["selects", "object_"], ["is", "SchemaMeta"]], "object_": [["is", "Interface"], ["selects", "fields"], ["of", "Interface"]], "fields": [["selects", "non-list"], ["of", "GraphQL Object"]], "subgrounds.utils": [["flatten_dict", "data"], ["flatten_dict", "keys"], ["contains_list", "data"], ["default_header", "url"], ["user_agent", "None"]], "subgrounds.dataframe_utils.DataFrameColumns": [["combine", "other"], ["mk_df", "data"]], "SchemaMeta": [["contains", "data structures"], ["represents", "GraphQL schemas"], ["parsing and validating", "input data"], ["raises", "ValidationError"], ["returns", "type information"], ["refers to", "non-existant type"], ["returns", "argument or field definition's underlying type"], ["finds", "nested type"]], "Playgrounds API": [["simplifies", "subgraph queries"], ["eliminates", "need for traditional wallet and GRT management"], ["is organized around", "REST"], ["features", "one top-level resource"]], "Playgrounds": [["start with", "sequence"], ["differentiate from", "other API keys"], ["create", "account"], ["create", "API key"], ["copy", "API key"], ["use", "proxy API endpoint"], ["query", "decentralized subgraphs"], ["access", "Uniswap V3 subgraph data"], ["is", "API"]], "subgraph": [["compatible with", "Ethereum"], ["find", "IDs"], ["load_subgraph", "f\"https://api.playgrounds.network/v1/proxy/subgraphs/id/{uniswap_id}\""]], "API keys": [["authenticate", "requests"], ["carry", "many privileges"], ["keep", "secure"], ["share", "publicly accessible areas"]], "Authentication": [["is performed via", "Playgrounds authorization header"]], "Endpoints": [["currently only host", "single endpoint"]], "Subgraph Proxy": [["provide access to", "subgraphs"], ["hosted on", "The Graph's decentralized network"], ["mirror", "equivalent endpoint"]], "URL": [["contains", "subgraphs/id/3nXfK3RbFrj6mhkGdoKRowEEti2WvmUdxmz73tben6Mb"], ["is", "mirrored"], ["contains", "subgraphs/id/ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7"], ["goes through", "proxy endpoint"], ["is", "going through"], ["contains", "subgraphs/id/3nXfK3RbFrj6mhkGdoKRowEEti2WvmUdxmz73tben6Mb"], ["contains", "subgraphs/id/ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7"], ["contains", "subgraphs/id/:subgraph_id"], ["contains", "subgraphs/id/ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7"]], "proxy endpoint": [["would be", "https://api.playgrounds.network/v1/proxy/subgraphs/id/ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7"]], "stargate_eth": [["Query", "usageMetricsDailySnapshots"], ["pools_query", "first=1000"]], "stargate_eth.UsageMetricsDailySnapshot": [["datetime", "SyntheticField"], ["timestamp", "SyntheticField"]], "FinancialsDailySnapshot": [["called", "datetime"], ["format", "timestamp"], ["convert", "timestamp field"], ["define", "synthetic fields"], ["calculate", "revDiffRevenueUSD30"], ["calculate", "avgDailyRevenueUSD30"], ["calculate", "revenueMargin30"]], "Subgrounds library": [["is imported by", "Python"], ["is imported for", "handling decentralized subgraphs"], ["interact with", "Lido Ethereum subgraph"], ["fetch", "specific financial data"], ["import", "SyntheticField"], ["import", "Subgrounds"], ["import", "pandas"], ["import", "numpy"], ["can be used to interact with", "subgraph"], ["can be used to interact with", "Lido Ethereum subgraph"], ["can be used to interact with", "fetch specific financial data"], ["can be used to interact with", "particular pool"], ["can be used to interact with", "queries"], ["can be used to interact with", "data"], ["can be used to interact with", "processed"], ["can be used to interact with", "manipulated"], ["can be used to interact with", "displayed"], ["can be used to interact with", "human-readable format"], ["provides", "interface"], ["fetch", "manipulate data"], ["from", "The Graph"]], "dotenv": [["is imported by", "Python"]], "os": [["is imported by", "Python"]], "graph_api_key": [["is assigned", "the value of os.getenv('GRAPH_API_KEY')"]], "Subgrounds object": [["is created by", "sg = Subgrounds()"], ["initialize", "sg"]], "Uniswap v3 subgraph": [["is loaded using", "sg.load_subgraph(f'https://gateway.thegraph.com/api/{graph_api_key}/subgraphs/id/ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7')"]], "financialsDailySnapshots endpoint": [["is queried with", "uni.Query.financialsDailySnapshots()"]], "query results": [["are converted to", "a Pandas dataframe"], ["are converted to", "a Pandas dataframe"], ["are converted to", "a Pandas dataframe"]], "first row": [["is extracted from", "the Pandas dataframe"], ["is extracted from", "the Pandas dataframe"], ["is extracted from", "the Pandas dataframe"]], "resulting Pandas series": [["is stored in", "res"], ["is stored in", "res2"], ["is stored in", "res3"]], "liquidityPools endpoint": [["is queried with", "uni.Query.liquidityPools()"]], "dexAmmProtocols endpoint": [["is queried with", "uni.Query.dexAmmProtocols()"]], "Aave": [["is", "decentralized finance protocol"], ["allows", "people to lend and borrow cryptocurrencies"], ["is", "decentralized finance protocol"], ["allows", "people to lend and borrow cryptocurrencies"]], "Lenders": [["earn", "interest"], ["deposit", "digital assets"], ["earn", "interest"], ["deposit", "digital assets into liquidity pools"]], "Borrowers": [["use", "crypto as collateral"], ["take out", "flash loan"], ["use", "crypto as collateral"], ["take out", "flash loan"]], "AAVE v3 subgraph": [["is loaded by", "passing its ID to a URL string"]], "UsageMetricsDailySnapshot query": [["is performed on", "subgraph"]], "Two methods": [["are demonstrated for", "converting timestamp data to a more human readable format"]], "Aave V3": [["introduces", "new risk mitigation features"], ["improves", "capital efficiency"], ["lowers", "gas fees"]], "aave_lending": [["is", "lending protocols"], ["name", "None"], ["type", "None"], ["cumulativeBorrowUSD", "None"], ["cumulativeDepositUSD", "None"], ["cumulativeLiquidateUSD", "None"], ["cumulativePositionCount", "None"], ["cumulativeProtocolSideRevenueUSD", "None"], ["cumulativeSupplySideRevenueUSD", "None"], ["cumulativeTotalRevenueUSD", "None"]], "fraxlendFactories": [["has id", "fraxlendFactories.id"], ["has total TVL value", "fraxlendFactories.totalTVLValue"], ["has total borrowed value", "fraxlendFactories.totalBorrowedValue"], ["has total collateral locked value", "fraxlendFactories.totalCollateralLockedValue"], ["has position count", "fraxlendFactories.positionCount"], ["has pair count", "fraxlendFactories.pairCount"], ["has asset token count", "fraxlendFactories.assetTokenCount"], ["has collateral token count", "fraxlendFactories.collateralTokenCount"]], "users": [["has address", "users.address"], ["has id", "users.id"]], "lido_activity": [["is loaded using", "API URL"], ["fetch", "usageMetricsDailySnapshots"], ["specifies ordering options", "sort data"], ["limits", "number of results"], ["fetch", "last 30 days of data"], ["creates", "SyntheticField"], ["fetch data and store", "DataFrame"], ["demonstrates", "how to interact with subgraph"], ["fetch specific data using", "queries"], ["is loaded using", "API URL"], ["is used to interact with", "Lido Ethereum subgraph"], ["constructs a query to fetch", "financialsDailySnapshots entity"], ["specifies ordering options to sort", "data by timestamp"], ["limits the number of results to", "30"], ["creates a SyntheticField named", "datetime"], ["takes the original timestamp field", "converts it to a human-readable format"], ["fetches the data and stores it in", "DataFrame"], ["demonstrates how the Subgrounds library can be used to interact with", "subgraph"], ["fetches specific financial data using", "queries"]], "pool": [["has ID", "pool's ID"]], "Lido Ethereum subgraph": [["load", "API URL"]], "Subgraph object": [["named", "lido_pool_stETH"]], "code": [["constructs", "query"], ["specifies ordering options", "sort data"], ["limits number of results", "30"], ["filters results", "pool with specified ID"], ["import", "libraries"], ["initialize", "Subgrounds instance"]], "financialsDailySnapshots": [["sorted by", "timestamp"], ["limited to", "last 30 entries"], ["query", "required fields"], ["include", "synthetic fields"]], "data": [["flatten", "into a single DataFrame"]], "Subgrounds instance": [["used to", "interact"], ["load", "Lido subgraph"], ["load", "Rocket Pool subgraph"]], "Lido subgraph": [["query", "financials daily snapshots"]], "Rocket Pool subgraph": [["query", "financials daily snapshots"]], "protocol revenue analysis": [["query", "financials daily snapshots"], ["fetch", "latest snapshot"], ["compare", "cumulative supply-side revenue"], ["compare", "protocol-side revenue"], ["compare", "total revenue"]], "protocol usage analysis": [["query", "usage metrics daily snapshots"], ["fetch", "data"]], "lido_subgraph": [["is queried for", "usageMetricsDailySnapshots"], ["is ordered by", "UsageMetricsDailySnapshot.timestamp"], ["is ordered in", "desc"], ["is limited to", "30"]], "rocketPool_subgraph": [["is queried for", "usageMetricsDailySnapshots"], ["is ordered by", "UsageMetricsDailySnapshot.timestamp"]]}}