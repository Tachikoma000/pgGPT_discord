{"docstore/metadata": {"6888df80-3d59-4e62-8979-60bf80e6f230": {"doc_hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "0dd9ca4b-f0bf-4786-a1a3-5a892a15ccf8": {"doc_hash": "40506d8e1050b48b4fba410de6bf02da8ff6b6075905f4a299c0916cf0e5ade0", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "febede2c-0580-4e76-b883-13d304850516": {"doc_hash": "36004dc3f10b557a671da1989c40063e8725be106e2227b463520dc56115f8f5", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "2055f65e-ef86-40e9-a4f8-d36f812d9fe9": {"doc_hash": "0d35b2e03adf964f840ba1a3dad9febee6de5fe4e46bb691b515bf5aac819999", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "b70f778c-4633-42b4-be11-4e66a9447118": {"doc_hash": "f60988f0b5343474582ddec24caa30940f4b25f7b7391407e463c910378f9044", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "1ee03137-0f38-4ddd-8aa3-63aa28ac1c4a": {"doc_hash": "b82738f21ed5b73187ead3d89087eded0b03c4f34bf401ff2b75ab35aa7638bc", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "ac5a5374-ef74-4e02-804d-9e70e30c9428": {"doc_hash": "5734aab852f4e0e3791e1795e912e45bc8da6d7fac53904ab12af6524a221925", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "14b75e40-443e-487c-8f7e-18920c42580d": {"doc_hash": "ff7a5fc70d19c0e39a078718f57c2951e5e0cd490c76bd61e583d63aadc4b1cb", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "e9fddf6f-4682-431a-b171-b6b5fe96b200": {"doc_hash": "21b3c0ed95cf12fca8c8204629f4e018259e031ece83128704c6d22664106d97", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "cee5bef6-f750-4e85-a9f4-c1cb2ae89bd7": {"doc_hash": "35413d2c3462cd4b0085d4f1317c537e63efbc5e2442613d7dc0da61430cfa45", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "1536558c-fc71-4d4d-8656-7590bdaf9a2d": {"doc_hash": "6de1909f99951318b97b5c78472d31e5b49de05f0f64f45b77b502d8d5b18372", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "26b07f71-b2fa-4f1f-b9b1-a6b39265fccf": {"doc_hash": "d061c18ad790e6d71e3cd632d97df90109c4c4bcfa8d48615cb7f46d83e8bd2a", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "8399ff61-10ec-4b36-ae1c-fe9c1690fec5": {"doc_hash": "de983a0b0cd5165e0d348656269ff7b43ffe07e3bbbf7786fe5d42c2e31f7a73", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "5ab17022-5121-46c1-8025-44c2884069a9": {"doc_hash": "6b827be77d6b43d6585c298769080b8aed84c4f1d92671a6f51a0aec201030bb", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "9598ae58-6791-48ed-ae7e-531f0c37f2e2": {"doc_hash": "4a7a0e31abc26c045ab9a4e93e011e3f3c51e5b4ea730fb16cfaec8dbe25e982", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "191d1eba-9cee-4331-9c2c-cce7bc16a5d5": {"doc_hash": "d826f0ff575438613db87be876c2e37605e9f92917f44cd290d3de725eb7898c", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "575cb777-a82d-45d5-9619-fd358ccf61b7": {"doc_hash": "70f0917f4cd91c29821133e46ffc32fe1a0191c4dedda8e3343d70965195b3bb", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "17767a90-8bc8-409f-bee0-c90ff7650c43": {"doc_hash": "fa4f5310a68f484c26a7f4bf086c877bd08d6dc5528e70a3697db2a511a197b2", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "af85d3f6-c500-41de-bdd7-780f77d03b98": {"doc_hash": "f94d8f3e19df3d55e85111ab33693d1dd194ea53cf1c267e8c79a0ea79466c97", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "b5f73156-24af-45f7-af53-f07ad49b60a4": {"doc_hash": "8a3b5af86591f8d1bc50a36780eb01abf6502f61d8569b0587e40dc36350ecfa", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "0f8b564d-15dc-4d8c-9206-6d59f52e3ed0": {"doc_hash": "9d089fe95a23791b9397164403b4eb5821be593ecb17f85cb58fd92f14818a1a", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "36c6bcb9-0263-47e2-9845-bb1ef8a9d33e": {"doc_hash": "f422826a8059130ac5b1d19ad295b87d39cbfa5356da6f4c45f6f0abcec33324", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "e13ed7b0-889d-4963-a78e-4e5c98b0b838": {"doc_hash": "47db134219cc4fd9a9d700a1db5232b4d6cfd1c0584b0ee51f12a2defb732b16", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "08475c8e-fff7-4bb3-b0f9-9f5f1a21d8a6": {"doc_hash": "3c6c4ba6b09598873323fcc2f0ebea30b82b6a084241577c1900c8daa00902cb", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "befbf254-cc94-4ed5-a97c-982433f389d6": {"doc_hash": "072ca6453e2f3ed325114d8052131b3847406c114a9b4ea99a23e2ab7f0c44ed", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "2f31b042-3456-4641-9cf9-9621f23c3d55": {"doc_hash": "95e43d5a2ca153edf2efb1aeb1e1b7386a91fe52aecfc34e1065073d9ba8df82", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "36f64dad-b373-42ca-8ef0-993a521b1aae": {"doc_hash": "c09002851a208d3407cb3a6f4edb3999687ffb6c6f5fc171bfceb3d54b2d72cd", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "1dddc5f7-7a51-4188-8168-bdefb4497934": {"doc_hash": "fd844798c93f99cf14491b979ffe60e7e73a0af97685cc1b0699025f3ceecbac", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "62814325-a688-4d18-a881-6392055f6b7e": {"doc_hash": "eec4b4932987edc1f900a61357bdfdcbc8cfcff44eb29a11a92912c8d14790d5", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "7293036a-853a-44ff-8f27-3930add251c7": {"doc_hash": "bb4c21182f596af8f0e39a88c4402b31852dedbba3815d3177da64453f7fdda1", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "2e715348-b562-4564-bdda-bec2931f11aa": {"doc_hash": "89be416eb8f58f2722dba575b9aa390bd7bd82e368967b0eda26ce649919e5b3", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "db86de7b-957b-47ed-b579-5bf321cdb005": {"doc_hash": "b5824edf744c587e99136d9ecb9df53adc96fdcec5a1da325926d816da40a4ee", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "a282b293-4e32-441f-9c6c-a4fbbec494a9": {"doc_hash": "6a1f745a444249724c155f343d4749a058bd060b2663ae02d9edb351ab33f698", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "4f641019-71e3-4fc8-8cc5-ed8e468fed03": {"doc_hash": "03528e9f4bb0ff77ba9900040575ea9874a56008c28b15d75ca3f62431b30ed2", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "f64074a6-4da7-462a-80d5-28fb3a8596b0": {"doc_hash": "0abc4bad0395248e13f9780c545df7b4466ceb00c53622cbaec5f01dc47eb3b2", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "2691bbf9-b3e6-4658-859b-69102f39a367": {"doc_hash": "e067ecc1ba602eb94b3054ce07f180ae248f28fc1a6e25c6cae05cd95b4236ee", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "d1b4ae7c-35b3-4971-8c54-a7d544831910": {"doc_hash": "dd2f404edc522a3438d1b5d50d90c263e553e19c6e2d11d6cbaa4f2a888945ab", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "0f956dc1-900b-4f5e-a9f1-62263fb5d0ba": {"doc_hash": "0cde4527525385c50525ae0369a35e8d234a1ee420013d7695c6139b3d9e9af7", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "e93e9137-2561-409b-82d4-c320d3fc1b21": {"doc_hash": "0385bd0223aad198366a08fee8ba2e1cec78da2baeb06152643c03bfc3a609df", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "8b39b92b-eb73-47ca-aae2-3864a235fdfb": {"doc_hash": "a257632d18364a809c3414a533abf4364a25b4c65560fc61efe798ce9ddac86d", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "523ccbe2-4bee-4ec3-b060-094cd0db8d2f": {"doc_hash": "38f717c41d9ccb502c50e0d536c255e5412655201ab8e5bf60fc6eaf218404e5", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "cc6f9d3e-d61a-4347-818c-e42ebc1fbebf": {"doc_hash": "c066db2ee16cd25373dc41cd732f13e26331c964076897f4b276f2979f61281b", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "63bac93d-76c4-4966-bbf5-b884c3d63608": {"doc_hash": "109eea63c13b40e6ec3831da14b35b0240c710a03ae26e22f015140bc1d60cd4", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "9bb308f6-5e3c-4f18-baff-a9c2171ceafa": {"doc_hash": "de0f1c1b6de7c2c91b5dff3836436e65a1cfce18288c0e240ab52796b2b011d0", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "b8077d67-e2e6-45e7-a813-4b1f94d29ca4": {"doc_hash": "e5fc3c9986960f549ed88381fe71afb6fe3a1c34c13ec2a3ce803e4ceae2cdf3", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "c54dfa4e-8f49-4a25-b334-fc77086cd190": {"doc_hash": "0f8f024a488b93ba8463cb41f89b056978f21d1019f9e412c9bb2edfa12d55e6", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "9ba2513e-35c5-4389-b2ca-2920b87797ae": {"doc_hash": "69397465ec962e43d7f6e08967fb73305d0f4979a508c58259d84ae1a50d97a1", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "45dc3ffa-01ec-4885-a593-628e6abc58ab": {"doc_hash": "4e945279b51f01ef489d770eb32eff74f5a06eeb9dfb9f007d09688665a2c899", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "df85356b-0623-4e7a-89e9-cb40867e66b3": {"doc_hash": "4a1b0daf1691e8bd17a2f39a8fc9a1f0e346dac3d3c5d07a679a2159429ab579", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "7f9ac8e5-0c9f-4d58-85a9-e933b9a38ecf": {"doc_hash": "a622ffcb2eef1d63df2c56092fbd0734812a8870a299e51fa4e5f3f9ef7d488a", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "61c889ef-aaf3-4f55-a366-d00170881834": {"doc_hash": "7b08d1ff666ddd7d73ae30b6401f13538caf2356771ea1ca48d0aa366d2ec2eb", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "536866bf-bc69-4883-a08b-eae52c0a2889": {"doc_hash": "99aa27ef8ce93743725bd8413000d38ddbbaa71cc0f280e18de1c97bd465092c", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "0e10d85d-6931-4044-803c-917dd6579d11": {"doc_hash": "549eb45a870771462cd810969ce3568e3884855fb118709803bc532d0aaeaa0c", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "323dba3c-f5c1-46b5-934a-ae6707a289f5": {"doc_hash": "99d179e61bb3844135ea4f0372d7b695155cefba04758f97275a8409c84b7870", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "7e5ddc51-8443-48fc-b883-22e174fa8500": {"doc_hash": "2c4264fa211968c5cf0f98f4023e7a423e3e0a9ab62f800f32aa81d7201d9d2a", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "f4edfacd-0a2b-4bef-8485-3346b9da7b7f": {"doc_hash": "f5502e3892280eb5b051d9272ad6f1f0ca559ad0b9b1d902800d54dcadfc25ea", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "0791498d-4d53-468e-847e-2af7fe6908f4": {"doc_hash": "34b0762c945a9c6462bc9100af3018139bd75c7a06f8a5a613c6463f1b460339", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "27322c01-00c0-47e3-b951-1b35cd4940f6": {"doc_hash": "79b3405f3837ba1db1d976ad4c2352913726f8e5394068cfe55ee08c66c1f58b", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "c3ef5a56-3abb-4b31-8cf6-9ca6d992796e": {"doc_hash": "d15523415fb74d4a2458be94933e5fad4c0cf5243825f76dbf52730313ea033c", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "27503548-e47a-4dc1-93cf-fa8ba904a8b6": {"doc_hash": "c15075b52ab15993bbbb1d25191dad0231b95dc21fc0940cfcd6a7bf74de2721", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "3ceffdd7-bb55-432d-96ae-de9c0ed22675": {"doc_hash": "4f03ee9c562eb8b752e2f909519d6e00dc68b908619a007652e6522e3e15d67b", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "6dcc5551-b7ec-4101-a79b-6cf88bcd0e2e": {"doc_hash": "9903bc54ef7753e67a8f270e885e6992ebdc644af3f9e6f51d5e16faaca66752", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "949f6e0e-546b-4fac-af73-10bfb5083816": {"doc_hash": "4fcb53991c6e568416bea2a3cc3b24a59a1830cdba2807e945213aa2cbb3e138", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "3f12f444-d3b1-4d72-81fa-9b7e2fc4dfea": {"doc_hash": "2ba1d7058b15479ee89fe3f25e7811b3385e09e2e22213dc35d5bee528d0d846", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "5d7f4772-81ff-4dd6-a39b-4959652e9917": {"doc_hash": "033b38a2e7af9da909a532b32840c3517540d584b80e62e1d52c2b21fad53f7d", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "6059e66f-8e9c-442e-b929-bd183fda6911": {"doc_hash": "dd2f404edc522a3438d1b5d50d90c263e553e19c6e2d11d6cbaa4f2a888945ab", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "d4e5c146-261f-4786-870c-e798469a42df": {"doc_hash": "8cb73516130b01ffc4b17db5f924dd2bcc7586a3d111645d17dcef349ec4ec60", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "4c447626-e273-4907-ad81-7652748fefef": {"doc_hash": "13beeb88711abcad2bd89112f50ac50efb5f55f1745b51b7f1a311f1698415c1", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "aa0079f1-5296-470a-be4d-82d7dcaf243d": {"doc_hash": "3b48d9282e1904bc3f283c28f5cacea71184affab0b1e89ba6d71a8e97a1cfe6", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "040fe259-3f70-46fe-8675-ac6a79689ede": {"doc_hash": "cb7d5b54e8bf6f9b997dc731303bae1d4a2aa1e97a29468f90ce0df718148ca2", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "d2bffe09-495c-49c0-97c3-f2b1d488ce96": {"doc_hash": "5a5ccad0da7780dce9a98f62dd8921f3f9cb180dba5f33c6bab66cf2e700efa8", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "f672153f-2f80-4253-8a2f-ea40405445e1": {"doc_hash": "d1acf60ccebeb5e5ffddc00a36306dd0d61bee0902f76df26614fbeff37ee07d", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "98d8f26e-da10-42b4-b51b-7a9ee17f14d0": {"doc_hash": "8f00e1c40f97c86e85a3b8ee5a37d3bb3c9a45d009b0a463f83c8d93c0c3edf8", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "37c94eb0-f121-4cb4-93cd-1a493c1b48ce": {"doc_hash": "07afdc84886829aeb1ee7a0b63d16f7429070cbbcb19d088f8d5a6f87ff7f898", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "d87ef362-5644-4bad-8113-6b3f9f42b68f": {"doc_hash": "765192cc1d04461468afedfa8180ed445b5cc9f9da1146e97da89c2935c319b8", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "67a2aa5c-e978-46ee-a74d-748e0148ab50": {"doc_hash": "151dff16facc805b14bcc573034b87de193059eecfebeb538964bb68a0d7eb74", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "af962e47-df7c-41ea-8bf8-5cd48a1330a1": {"doc_hash": "71db8362665262ebe34fdf7e130a9775cc4e210fd5c3b1d6795de6fe786a3cae", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "a1504708-830b-41aa-98df-3169775b8751": {"doc_hash": "6a4e83b6134ae110fd073ba165fa844c62c756d2075e0a22b1390eb7e2db7933", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "e709efcf-6b5f-45fe-8a50-17001553a908": {"doc_hash": "fe855f92cbe99b76cfbed37024946b3eff12a616d3a280c056197effb67bb9cd", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "83ba0778-c1f5-477f-bc8d-fd797da1472e": {"doc_hash": "bea3487e887e6fa58086547647a02d0765983555c0fd905fc54b0b0405b1123c", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "3e08cc67-3287-4b45-bbab-274b86455874": {"doc_hash": "e131bf36226e8705a2dd98b13e3a3933570a608e83c1852fb1fc079310342db7", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "1bd7149e-1433-4989-a865-39c2e5bbf5de": {"doc_hash": "f522bf10d91facc61a05a492211999ba027848103102bd0dd65c15b8524b67b1", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "239c52cf-6f39-4126-bcfd-31b269e23165": {"doc_hash": "b14468d89046b17bdc796fe6e04bd1d8e2bc0f61833fd900e3f3e46f38a6c6d2", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "5404d721-d0c1-48a6-b2b7-d0a546c15943": {"doc_hash": "a05156a14593060c48bc503f99d0df8d9b2c506d9fbcfd7522151e57db17bbf9", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "de04d79d-a139-421a-9550-532526d43bdd": {"doc_hash": "a5b1ed0fda5c82ecc225c0c16b020dcee7c1b51ec147cc6c6f1766a2ea811a81", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "c0ee0688-d92c-482c-93af-afa44ef1f9e4": {"doc_hash": "6594060d19840ecbde46a02869849d9fc5ec98d65144c16dac024aa7a00de40d", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "7bdbc701-f717-41aa-8b96-daefd48fe62e": {"doc_hash": "f1c82e7dda411e4e87d1c49a4180de8a116f49c9a8e5cc0260da6f60f2b06b96", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "4158580a-c635-40ea-9dd4-aa328f15e0ed": {"doc_hash": "7afb95ca6804d85e9300563d1ae8a459c3651a0c4be2eaaf94f00c572bfefd39", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "966e6fc2-9a76-43f8-b02e-3380c8c8503c": {"doc_hash": "62c2fc7123da0e764da38025e5357ec2e60b252cec151b826e95f97eeb9a5677", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "39e93f87-8a64-481a-8f66-a0fb156c5576": {"doc_hash": "a3bcb9b9f237f861bae859d9b15e786d916a6942314510a3faa8e20461543526", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "145a2d82-7eab-4646-8db2-03d4eddece95": {"doc_hash": "b5404d7d678d0ccd5fab1e231b90b743423a78478045459e9a2b1983088e0902", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "87410f2f-db61-473a-a660-1f78c4f4d406": {"doc_hash": "ee644d5349a7265b72f88bd0b6428c7fe714fe91e4f506cf0aab2b8a6bd0b733", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "a15718ec-7c32-4e83-a468-2c7cac2e498c": {"doc_hash": "ff060e9ae86a76937b1498f6b4dd0251080b43b193eefcf5ed902f320200a26f", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "b5f77a82-a58b-46e7-8a16-e58602604832": {"doc_hash": "aaa58755d157c7f6345de039cba97090ef84a9b567354dcbcded80135e918468", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "1f49895a-20c2-407f-a01c-18ac948ba573": {"doc_hash": "c41d98413a028d14fbf1ff62236bba7c8510b8f705f48dc1588865aa80312e99", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "e4403e21-e33e-4acd-abbf-3768a59219a4": {"doc_hash": "13dd12ac371f8eb1c2e329a6599a9f28666b3d1e966893b6b130030d4bf3b102", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "931eadd7-e714-436a-bfc5-c0453d6216e5": {"doc_hash": "29c4b21d6d98c90aece433d3d22d065be5c1f776a006955dcf056c72f8aa4156", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "f48b46d4-4906-43cb-8e23-56888faf773e": {"doc_hash": "b97d66f3e1763b1ca7f67b962eb77ed06f7b60177222df389757e061b58acc3a", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "6f7f2d1a-b14f-4208-b8b1-dfe72f7e5e98": {"doc_hash": "3f628fe6b2d729148a4b3e8387ea242fcc1e5af1c3644f00923c027460b6d537", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}, "e8d99d60-52bc-453e-9fce-223ec717b2c9": {"doc_hash": "aba64bb6a6aa7aa85c62463b9ac5a147fd8378190a668ed0bbc08efedfcba325", "ref_doc_id": "6888df80-3d59-4e62-8979-60bf80e6f230"}}, "docstore/data": {"0dd9ca4b-f0bf-4786-a1a3-5a892a15ccf8": {"__data__": {"id_": "0dd9ca4b-f0bf-4786-a1a3-5a892a15ccf8", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "3": {"node_id": "febede2c-0580-4e76-b883-13d304850516", "node_type": null, "metadata": {}, "hash": "36004dc3f10b557a671da1989c40063e8725be106e2227b463520dc56115f8f5"}}, "hash": "40506d8e1050b48b4fba410de6bf02da8ff6b6075905f4a299c0916cf0e5ade0", "text": "# Subgrounds #\n\nAn intuitive python library for interfacing with Subgraphs.\n\n## Features #\n\n\n\n**Simple\n\n** : Leverage a Pythonic API to easily build queries and transformations without the need for raw GraphQL manipulation.\n\n\n\n**Automated\n\n** : Automatically handle pagination and schema introspection for effortless data retrieval.\n\n\n\n**Powerful\n\n** : Create sophisticated queries using the ` SyntheticFields ` transformation system.\n\n\n\n\n\n\n\n### Getting Started\n\nStart using Subgrounds in 5 minutes!\n\n[ ](getting_started/)\n\n### Advanced Topics\n\nLearn how to conjure more complex queries\n\n[ ](advanced_topics/)\n\n### Examples\n\nCheckout our curated list of community examples\n\n[ ](examples/)\n\n### FAQ\n\nQuick answers to your most burning questions\n\n[ ](faq/)\n\n### Tutorials\n\nLinks to our recorded video tutorials\n\n[ ](videos/)\n\n### API Reference\n\nAuto-generated docs from our codebase\n\n[ ](api_reference/)\n\n\n\n\n\n\n\n### Changelog\n\nKeep up with Subgrounds and the latest changes\n\n[ ](changelog/)\n\n### Contributing\n\nLearn how you can help improve Subgrounds!\n\n[ ](contributing/)\n\n\n\n\n\n\n\n](../api/reference/proxy/deployment_id/)\n\n[ Playgrounds ](../../)\n\nLogo](../../_static/assets/pg\n\n\n\nlogotype\n\n\n\nprimary.svg)\n\n# Getting Started #\n\n## Installation #\n\nSubgrounds can be installed via ` pip ` with the following commands:\n\npip install -\n\n\n\nupgrade subgrounds\n\n# or\n\npython\n\n\n\nm pip install -", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "febede2c-0580-4e76-b883-13d304850516": {"__data__": {"id_": "febede2c-0580-4e76-b883-13d304850516", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "0dd9ca4b-f0bf-4786-a1a3-5a892a15ccf8", "node_type": null, "metadata": {}, "hash": "40506d8e1050b48b4fba410de6bf02da8ff6b6075905f4a299c0916cf0e5ade0"}, "3": {"node_id": "2055f65e-ef86-40e9-a4f8-d36f812d9fe9", "node_type": null, "metadata": {}, "hash": "0d35b2e03adf964f840ba1a3dad9febee6de5fe4e46bb691b515bf5aac819999"}}, "hash": "36004dc3f10b557a671da1989c40063e8725be106e2227b463520dc56115f8f5", "text": "upgrade subgrounds\n\nImportant\n\nSubgrounds requires ` python >= 3.10 ` .\n\nYou can check your version of python via: ` python --version `\n\nNote\n\nWe recommend creating python environments to help manage your packages. These help in ensuring your projects have the correct versions for the packages you care about.\n\nIf you run into problems during installation, see [ Environment Setup ](../faq/setup/) .\n\n## Simple example #\n\nThe following example grabs a subgraph for the Aave v2 protocol and queries the top 5 markets ordered by TVL (total value locked), selects their name and their TVL (in USD) and returns the data as a pandas [ ` DataFrame ` ](http://pandas.pydata.org/pandas- docs/dev/reference/api/pandas.DataFrame.html#pandas.DataFrame \"\\(in pandas v2.1.0.dev0+1421.g5f672dc704\\)\") .\n\n>>> from subgrounds import Subgrounds >>> >>> sg = Subgrounds() >>> >>> # Load >>> aave_v2 = sg.load_subgraph( ... \"https://api.thegraph.com/subgraphs/name/messari/aave-v2-ethereum\") >>> >>> # Construct the query >>> latest = aave_v2.Query.markets( ... orderBy=aave_v2.Market.totalValueLockedUSD, ... orderDirection='desc', ... first=5, ... ) >>> >>> # Return query to a dataframe >>> sg.query_df([ ... latest.name, ... latest.totalValueLockedUSD, ... ]) markets_name markets_totalValueLockedUSD 0 Aave interest bearing STETH 1.338931e+09 1 Aave interest bearing WETH 8.387106e+08 2 Aave interest bearing WBTC 6.082906e+08 3 Aave interest bearing USDC 4.085144e+08 4 Aave interest bearing USDT 3.370399e+08\n\nOn this page\n\nGetting Started\n\nInstallation\n\nSimple example\n\n# The Basics #\n\nImportant\n\nThis documentation is \u2728 interactive \u2728, allowing you to easily test and experiment with subgrounds. By clicking the \"Run Code\" button below, a Python server will be launched in the background using Jupyter Notebook. This will give you access to a Python environment where you can execute and interact with subgrounds code in real-time.\n\nEach code block acts like a cell within a Jupyter notebook which means they are **connected** . So [ ` Subgrounds ` ](../../api_reference/top_level/#subgrounds.Subgrounds \"subgrounds.Subgrounds\") created in an earlier cell can be reused in lower ones.\n\nOnce you click the \"Run Code\" button, the code cells will visually change with 3 new buttons:\n\nCommand\n\n|\n\nDescription\n\n--\n\n\n\n|---\n\nRun\n\n|\n\nThis executes the current cell\n\nRestart\n\n|\n\nThis will restart the kernel\n\nRestart & Run All\n\n|\n\nThis will restart the kernel and run every cell from top to bottom.The _easiest_ way to interact with the docs is via the \"Restart & Run All\" button as it ensures that all the python state is loaded corrected.Then you can feel free to edit a cell and click \"Run\" to play around as you please.Run code\n\nWarning\n\nAfter you click \"Run Code\", interactivity will begin to hydrate the page and **This takes time** .In some cases, you might need to refresh the page and try again.This feature is best used on the **latest** Chrome-based browsers, feel free to report any issues on other browsers to our [ Discord\n\n## Subgrounds #\n\nThe [ ` Subgrounds ` ](../../api_reference/top_level/#subgrounds.Subgrounds \"subgrounds.Subgrounds\") class provides the top level API and most users will be using this class exclusively.This class is used to load (i.e.: introspect) GraphQL APIs (subgraph **or** vanilla GraphQL APIs) as well as execute querying operations.Moreover, this class is meant to be used as a singleton, i.e.: initialized once and reused throughout a project.The code cell below demonstrates how to initialize your [ ` Subgrounds ` ](../../api_reference/top_level/#subgrounds.Subgrounds \"subgrounds.Subgrounds\") object and load a GraphQL API.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2055f65e-ef86-40e9-a4f8-d36f812d9fe9": {"__data__": {"id_": "2055f65e-ef86-40e9-a4f8-d36f812d9fe9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "febede2c-0580-4e76-b883-13d304850516", "node_type": null, "metadata": {}, "hash": "36004dc3f10b557a671da1989c40063e8725be106e2227b463520dc56115f8f5"}, "3": {"node_id": "b70f778c-4633-42b4-be11-4e66a9447118", "node_type": null, "metadata": {}, "hash": "f60988f0b5343474582ddec24caa30940f4b25f7b7391407e463c910378f9044"}}, "hash": "0d35b2e03adf964f840ba1a3dad9febee6de5fe4e46bb691b515bf5aac819999", "text": "Note\n\nBoth [ ` load_subgraph ` ](../../api_reference/top_level/#subgrounds.Subgrounds.load_subgraph \"subgrounds.Subgrounds.load_subgraph\") and [ ` load_api ` ](../../api_reference/top_level/#subgrounds.Subgrounds.load_api \"subgrounds.Subgrounds.load_api\") result in similar structures except subgraphs provide better optics since there's more schema data to explore.Loading Aave v2 and snapshot api sources #\n\nfrom subgrounds import Subgrounds\n\n# Initialize Subgrounds\n\nsg = Subgrounds()\n\n# Load a subgraph using its API URL aave_v2 = sg.load_subgraph( \"https://api.thegraph.com/subgraphs/name/messari/aave-v2-ethereum\")\n\n# Load a vanilla GraphQL API using its API URL snapshot = sg.load_api(\"https://hub.snapshot.org/graphql\")\n\n## Getting the Data #\n\nOnce you load in your subgraphs (or vanilla APIs), you can start gathering data via [ ` query() ` ](../../api_reference/top_level/#subgrounds.Subgrounds.query \"subgrounds.Subgrounds.query\") .Gathering the names of the latest markets in Aave #\n\nsg.query([\n\naave_v2.Query.markets.name\n\n])\n\nGathering the titles and scores of the latest proposals from snapshot #\n\nsg.query([\n\nsnapshot.Query.proposals.title,\n\nsnapshot.Query.proposals.scores_total,\n\n])\n\nOn this page\n\nThe Basics\n\nSubgrounds\n\nGetting the Data\n\n# Field Paths #\n\n[ ` FieldPaths ` ](../../api_reference/top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") are the main building blocks used to construct Subgrounds queries.A [ ` FieldPath ` ](../../api_reference/top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") represents a selection path through a GraphQL schema starting from the root ` Query ` entity (see [ The Query and Mutation types ](https://graphql.org/learn/schema/#the-query-and-mutation-types) ) all the way down to a scalar leaf.[ ` FieldPath ` ](../../api_reference/top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") are created by simply selecting attributes starting from the subgraph object returned by the [ ` load_subgraph ` ](../../api_reference/top_level/#subgrounds.Subgrounds.load_subgraph \"subgrounds.Subgrounds.load_subgraph\") or [ ` load_api ` ](../../api_reference/top_level/#subgrounds.Subgrounds.load_api \"subgrounds.Subgrounds.load_api\") methods:\n\nClick for Interactive Documentation\n\nClicking this button will enable editing and execution of the code-blocks on this page.Learn more [ here ](../basics/) .Run code\n\nLoading a curve subgraph #\n\nfrom subgrounds import Subgrounds\n\nsg = Subgrounds()\n\ncurve = sg.load_subgraph(\n\n\"https://api.thegraph.com/subgraphs/name/messari/curve\n\n\n\nfinance\n\n\n\nethereum\")\n\nPython\n\nAnalyzing curve pool data via the ` curve.Query.pools ` [ ` FieldPath ` ](../../api_reference/top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") #\n\n# `curve.Query.pools` is a field path curve_pools = curve.Query.liquidityPools\n\n# We can then query based on the routing of these objects sg.query_df([ curve_pools.inputTokens.name, curve_pools.outputToken.name, ])\n\nGraphQL\n\nThis is the GraphQL that subgrounds produces #\n\nquery {\n\nliquidityPools {\n\ninputTokens {\n\nname\n\n}\n\noutputToken {\n\nname\n\n}\n\n}\n\n}\n\nNote\n\nIf you're having trouble understanding the naming and pathing of the [ ` FieldPath ` ](../../api_reference/top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") classes in subgrounds, we recommend:", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b70f778c-4633-42b4-be11-4e66a9447118": {"__data__": {"id_": "b70f778c-4633-42b4-be11-4e66a9447118", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "2055f65e-ef86-40e9-a4f8-d36f812d9fe9", "node_type": null, "metadata": {}, "hash": "0d35b2e03adf964f840ba1a3dad9febee6de5fe4e46bb691b515bf5aac819999"}, "3": {"node_id": "1ee03137-0f38-4ddd-8aa3-63aa28ac1c4a", "node_type": null, "metadata": {}, "hash": "b82738f21ed5b73187ead3d89087eded0b03c4f34bf401ff2b75ab35aa7638bc"}}, "hash": "f60988f0b5343474582ddec24caa30940f4b25f7b7391407e463c910378f9044", "text": "**Use the[ Graph _i_ QL ](https://api.thegraph.com/subgraphs/name/messari/curve\n\nfinance\n\nethereum) Interface:\n\n**\n\nCopy and paste the subgraph URL into your web browser to access the [ Graph _i_ QL ](https://api.thegraph.com/subgraphs/name/messari/curve\n\nfinance\n\nethereum) interface.\n\nThis tool allows you to build a GraphQL string via the graphical query builder, which can help you understand the structure of the subgraph.\n\n\n\n**Leverage IDE Language Support:\n\n**\n\nIf you use an IDE with Jupyter Notebook support (i.e. VSCode), you can take advantage of the built\n\nin language server to auto\n\ncomplete the field paths as you work.\n\nTo use this method, import and load the subgraph in the first notebook cell, then use it in later cells to benefit from auto\n\ncompletion suggestions based on the schema.\n\nThis feature is particularly easy to use in VSCode, as the included Python extension automatically enables this behavior.\n\n[ Playgrounds ](../../../../)\n\nLogo](../../../../_static/assets/pg\n\n\n\nlogotype\n\n\n\nprimary.svg)\n\n# Arguments #\n\nSome [ ` FieldPaths ` ](../../../api_reference/top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") can be parameterized with certain arguments such as specific token ids, sorting by certain fields, etc. These arguments can be configured by \"calling\" said function (e.g. ` aave_v2.Query.market(first=10) ` ).\n\nClick for Interactive Documentation\n\nClicking this button will enable editing and execution of the code-blocks on this page. Learn more [ here ](../../basics/) .\n\nRun code\n\nLoading a curve subgraph #\n\nfrom subgrounds import Subgrounds\n\nsg = Subgrounds()\n\ncurve = sg.load_subgraph(\n\n\"https://api.thegraph.com/subgraphs/name/messari/curve\n\n\n\nfinance", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1ee03137-0f38-4ddd-8aa3-63aa28ac1c4a": {"__data__": {"id_": "1ee03137-0f38-4ddd-8aa3-63aa28ac1c4a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "b70f778c-4633-42b4-be11-4e66a9447118", "node_type": null, "metadata": {}, "hash": "f60988f0b5343474582ddec24caa30940f4b25f7b7391407e463c910378f9044"}, "3": {"node_id": "ac5a5374-ef74-4e02-804d-9e70e30c9428", "node_type": null, "metadata": {}, "hash": "5734aab852f4e0e3791e1795e912e45bc8da6d7fac53904ab12af6524a221925"}}, "hash": "b82738f21ed5b73187ead3d89087eded0b03c4f34bf401ff2b75ab35aa7638bc", "text": "ethereum\")\n\nPython\n\nAnalyzing curve pool data via the ` curve.Query.pools ` [ ` FieldPath ` ](../../../api_reference/top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") #\n\n# `curve.Query.pools` is a field path # we \"call it to add arguments! curve_pools = curve.Query.liquidityPools( first=10, orderBy=curve.LiquidityPool.totalValueLockedUSD, orderDirection=\"desc\", where=[ curve.LiquidityPool.createdBlockNumber > 14720000 ] )\n\n# We can then query based on the routing of these objects sg.query_df([ curve_pools.outputToken.name, curve_pools.totalValueLockedUSD, ])\n\nGraphQL\n\nAnalyzing curve pool data via the ` curve.Query.pools ` [ ` FieldPath ` ](../../../api_reference/top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") #\n\nquery {\n\nliquidityPools(\n\nfirst: 10\n\norderBy: totalValueLockedUSD\n\norderDirection: desc\n\nwhere: {createdBlockNumber_gt: 14720000}\n\n) {\n\noutputToken{\n\nname\n\n}\n\ntotalValueLockedUSD\n\n}\n\n}\n\nNote\n\nNotice that the values for the ` orderBy ` and ` where ` arguments are [ ` FieldPath ` ](../../../api_reference/top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") themselves. This allows users to construct complex queries in pure Python by using the [ ` Subgraph ` ](../../../api_reference/top_level/#subgrounds.Subgraph \"subgrounds.Subgraph\") object returned when loading an API.\n\nThe [ ` FieldPaths ` ](../../../api_reference/top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") _here_ are used as in their relative form, i.e. : they do not start from the root ` Query ` entity, but rather start from an entity type (in this case the ` Pool ` entity).\n\nWarning\n\nIt is important to make sure that the relative [ ` FieldPath ` ](../../../api_reference/top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") used as values for the ` orderBy ` and ` where ` arguments match the entity type of the field on which the arguments are applied (in our example, the ` pools ` field is of type ` Pool ` ). If this is not respected, a type error exception will be thrown.\n\nArgument values can _also_ be supplied in their \"raw\" form, without the use of relative [ ` FieldPaths ` ](../../../api_reference/top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") :\n\nRaw Form\n\ncurve_pools = curve.Query.liquidityPools(\n\nfirst=10,\n\norderBy=\"totalValueLockedUSD\",\n\norderDirection=\"desc\",\n\nwhere={\n\n\"createdBlockNumber_gt\": 14720000\n\n}\n\n)\n\nRelative Form\n\ncurve_pools = curve.Query.liquidityPools(\n\nfirst=10,\n\norderBy=curve.LiquidityPool.totalValueLockedUSD,\n\norderDirection=\"desc\",\n\nwhere=[\n\ncurve.LiquidityPool.createdBlockNumber > 14720000\n\n]\n\n)\n\nWarning\n\nWhen using raw form instead of relative form, you lose out on any type validation. This means, errors will only surface when using ` query ` rather than surfacing when building the [ ` FieldPaths ` ](../../../api_reference/top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") .\n\nWe **highly** recommend sticking with relative form, even if it seems more verbose!\n\n[ Playgrounds ](../../../../)\n\nLogo](../../../../_static/assets/pg\n\n\n\nlogotype", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ac5a5374-ef74-4e02-804d-9e70e30c9428": {"__data__": {"id_": "ac5a5374-ef74-4e02-804d-9e70e30c9428", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "1ee03137-0f38-4ddd-8aa3-63aa28ac1c4a", "node_type": null, "metadata": {}, "hash": "b82738f21ed5b73187ead3d89087eded0b03c4f34bf401ff2b75ab35aa7638bc"}, "3": {"node_id": "14b75e40-443e-487c-8f7e-18920c42580d", "node_type": null, "metadata": {}, "hash": "ff7a5fc70d19c0e39a078718f57c2951e5e0cd490c76bd61e583d63aadc4b1cb"}}, "hash": "5734aab852f4e0e3791e1795e912e45bc8da6d7fac53904ab12af6524a221925", "text": "primary.svg)\n\n# Filtering #\n\nFiltering subgraphs in ` subgrounds ` is done via the ` where ` argument in [ ` FieldPath ` ](../../../api_reference/top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") . A subgraph's GraphQL provides several options to filter based on nearly any field path.\n\nClick for Interactive Documentation\n\nClicking this button will enable editing and execution of the code-blocks on this page. Learn more [ here ](../../basics/) .\n\nRun code\n\nWe will be using curve as the base subgraph for the following examples #\n\nfrom subgrounds import Subgrounds\n\nsg = Subgrounds()\n\ncurve = sg.load_subgraph(\n\n\"https://api.thegraph.com/subgraphs/name/messari/curve\n\n\n\nfinance\n\n\n\nethereum\")\n\npool = curve.LiquidityPool # shorthand for examples\n\nNote\n\nIn some of the following examples, multiple conditions are stacked on top of each other. This would **not** result in any data being returned since the multiple conditions would likely conflict with each other.\n\n## Matching Values #\n\nUsing the ` == ` and ` =! ` operators in Python, matching exact or negated values on field paths is pretty straight forward:\n\nRelative Form\n\nsg.query_df(\n\ncurve.Query.liquidityPools(\n\nwhere=[\n\nisSingleSided == False,\n\n# or\n\nisSingleSided != True,\n\n]\n\n)\n\n)\n\nRaw Form\n\nsg.query_df(\n\ncurve.Query.liquidityPools(\n\nwhere={\n\n\"isSingleSided\": False,\n\n# or\n\n\"isSingleSided_not\": False,\n\n}\n\n)\n\n)\n\n## Comparisons #\n\nFiltering can also be based on standard comparison logic on any field path, such as \"greater than\", \"less than\", etc \u2014 generally more useful for numeric fields.\n\nRelative Form\n\nsg.query_df(\n\ncurve.Query.liquidityPools(\n\nwhere=[\n\npool.cumulativeVolumeUSD > 150000000,\n\npool.cumulativeVolumeUSD >= 150000000,\n\npool.cumulativeVolumeUSD < 150000000,\n\npool.cumulativeVolumeUSD <= 150000000,\n\n]\n\n)\n\n)\n\nRaw Form\n\nsg.query_df(\n\ncurve.Query.liquidityPools(\n\nwhere={\n\n\"cumulativeVolumeUSD_gt\": 150000000,\n\n\"cumulativeVolumeUSD_gte\": 150000000,\n\n\"cumulativeVolumeUSD_lt\": 150000000,\n\n\"cumulativeVolumeUSD_lte\": 150000000,\n\n}\n\n)\n\n)\n\n## Nested Filtering #\n\nEntities can have any layer of nestable objects which thereby are **also** filterable in the ` where ` clause:\n\nRelative Form\n\nsg.query_df(\n\ncurve.Query.liquidityPools(\n\nwhere=[\n\npool.hourlySnapshots.hourlyVolumeUSD > 1000\n\n]\n\n)\n\n)\n\nRaw Form\n\nsg.query_df(\n\ncurve.Query.liquidityPools(\n\nwhere={\n\n\"hourlySnapshots_\": {\"hourlyVolumeUSD_gt\": 14720000}\n\n}\n\n)\n\n)\n\nNote\n\nThe trailing ` _ ` prefix is needed in the GraphQL form since without it, GraphQL assumes you are matching the exact value!\n\nOn this page\n\nFiltering\n\nMatching Values\n\nComparisons\n\nNested Filtering\n\n[ Playgrounds ](../../../../)\n\nLogo](../../../../_static/assets/pg\n\n\n\nlogotype", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "14b75e40-443e-487c-8f7e-18920c42580d": {"__data__": {"id_": "14b75e40-443e-487c-8f7e-18920c42580d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "ac5a5374-ef74-4e02-804d-9e70e30c9428", "node_type": null, "metadata": {}, "hash": "5734aab852f4e0e3791e1795e912e45bc8da6d7fac53904ab12af6524a221925"}, "3": {"node_id": "e9fddf6f-4682-431a-b171-b6b5fe96b200", "node_type": null, "metadata": {}, "hash": "21b3c0ed95cf12fca8c8204629f4e018259e031ece83128704c6d22664106d97"}}, "hash": "ff7a5fc70d19c0e39a078718f57c2951e5e0cd490c76bd61e583d63aadc4b1cb", "text": "primary.svg)\n\n# Sorting #\n\nData can also be queried based on specific sort of a field path. This can be helpful if you want get data such as the top performing pools based on revenue, etc.\n\nClick for Interactive Documentation\n\nClicking this button will enable editing and execution of the code-blocks on this page. Learn more [ here ](../../basics/) .\n\nRun code\n\nWe will be using curve as the base subgraph for the following examples #\n\nfrom subgrounds import Subgrounds\n\nsg = Subgrounds()\n\ncurve = sg.load_subgraph(\n\n\"https://api.thegraph.com/subgraphs/name/messari/curve\n\n\n\nfinance\n\n\n\nethereum\")\n\npool = curve.LiquidtyPool # shorthand for examples snapshot = curve.DailySnapshot\n\n## The Basics #\n\nTo sort, we define the ` orderBy ` argument on a field path:\n\nSorting by performing pools by total cumulative revenue #\n\nsg.query_df(\n\ncurve.Query.liquidityPool(orderBy=pool.cumulativeTotalRevenueUSD)\n\n)\n\nBy default, the sorting method is ascending. We can change it to descending (providing us with the highest performing pools) via ` orderDirection ` :\n\nSorting by the top performing pools by total cumulative revenue #\n\nsg.query_df(\n\ncurve.Query.liquidityPool(orderBy=pool.cumulativeTotalRevenueUSD, orderDirection=\"desc\")\n\n)\n\n## Layered Sorting #\n\nSince nested fields can also have arguments, we can layer multiple sortings on top of each other:\n\nSorting the top 4 liquidity pools and the top 3 trading days #\n\ntop_pools = curve.Query.liquidityPool(\n\nfirst=4,\n\norderBy=pool.cumulativeTotalRevenueUSD,\n\norderDirection=\"desc\",\n\n)\n\nsg.query_df(\n\ntop_pools.dailySnapshots(\n\nfirst=3,\n\norderBy=snapshot.dailyVolumeUSD,\n\norderDirection=\"desc\",\n\n)\n\n)\n\nWarning\n\nAdding more complexity to your query will lead to longer query times as the indexer has to perform multiple internal database queries to construct the data as you request. If you hit the natural timeout of 30s, you can try running the query again as the indexer will continue to process your query in the background, caching the value for future queries.\n\n## Sorting by Nested Fields #\n\nWe aren't just limited by sorting only on the top-level fields \u2014 we can sort _by_ nested fields. This is different than layering since we are ordering the main list of rows based upon a nested value (usually within an object).\n\nDanger\n\nNested filtering usually only works at a maximum depth of **2** and may not work across older subgraphs.\n\nSorting liquidity pools based upon the output token's last traded price. #\n\nsg.query_df(\n\ncurve.Query.liquidityPool(\n\norderBy=pool.outputToken.lastPriceUSD,\n\norderDirection=\"desc\",\n\n)\n\n)\n\nOn this page\n\nSorting\n\nThe Basics\n\nLayered Sorting\n\nSorting by Nested Fields\n\n[ Playgrounds ](../../../../)\n\nLogo](../../../../_static/assets/pg\n\n\n\nlogotype", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e9fddf6f-4682-431a-b171-b6b5fe96b200": {"__data__": {"id_": "e9fddf6f-4682-431a-b171-b6b5fe96b200", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "14b75e40-443e-487c-8f7e-18920c42580d", "node_type": null, "metadata": {}, "hash": "ff7a5fc70d19c0e39a078718f57c2951e5e0cd490c76bd61e583d63aadc4b1cb"}, "3": {"node_id": "cee5bef6-f750-4e85-a9f4-c1cb2ae89bd7", "node_type": null, "metadata": {}, "hash": "35413d2c3462cd4b0085d4f1317c537e63efbc5e2442613d7dc0da61430cfa45"}}, "hash": "21b3c0ed95cf12fca8c8204629f4e018259e031ece83128704c6d22664106d97", "text": "primary.svg)\n\n# Merging #\n\nWhen passing a list of [ ` FieldPaths ` ](../../../api_reference/top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") to any [ ` query() ` ](../../../api_reference/top_level/#subgrounds.Subgrounds.query \"subgrounds.Subgrounds.query\") function, subgrounds will merge them into a single query.\n\nWarning\n\nThis is **only** true if the [ ` FieldPaths ` ](../../../api_reference/top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") originate from the **same subgraph** .\n\nClick for Interactive Documentation\n\nClicking this button will enable editing and execution of the code-blocks on this page. Learn more [ here ](../../basics/) .\n\nRun code\n\nPython\n\nIn this query, we are taking the **top 4 curve pools** by **cumulative volume** and analyzing the **top 3 days by daily total revenue** #\n\nfrom subgrounds import Subgrounds\n\nsg = Subgrounds()\n\ncurve = sg.load_subgraph(\n\n\"https://api.thegraph.com/subgraphs/name/messari/curve\n\n\n\nfinance\n\n\n\nethereum\")\n\n# Partial FieldPath selecting the top 4 most traded pools on Curve most_traded_pools = curve.Query.liquidityPools( orderBy=curve.LiquidityPool.cumulativeVolumeUSD, orderDirection=\"desc\", first=4, )\n\n# Partial FieldPath selecting the top 2 pools by daily total revenue of # the top 4 most traded tokens. # Mote that reuse of `most_traded_pools` in the partial FieldPath most_traded_snapshots = most_traded_pools.dailySnapshots( orderBy=curve.LiquidityPoolDailySnapshot.dailyTotalRevenue, orderDirection=\"desc\", first=3, )\n\n# Querying: # - the name of the top 4 most traded pools, their 2 most liquid # pools' token symbols and their 2 most liquid pool's TVL in USD sg.query_df([ most_traded_pools.name, most_traded_snapshots.dailyVolumeUSD, most_traded_snapshots.dailyTotalRevenueUSD, ])\n\nGraphQL\n\nIn this query, we are taking the **top 4 curve pools** by **cumulative volume** and analyzing the **top 3 days by daily total revenue** #\n\nquery { liquidityPools(first: 4, orderBy: cumulativeVolumeUSD, orderDirection: desc) { name dailySnapshots(first: 3, orderBy: dailyTotalRevenueUSD, orderDirection: desc) { dailyVolumeUSD dailyTotalRevenueUSD } } }\n\nNote\n\nThis becomes very helpful when chaining partial [ ` FieldPaths ` ](../../../api_reference/top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") together since you can leverage normal python constructs to help organize the data as you want to access and [ ` query() ` ](../../../api_reference/top_level/#subgrounds.Subgrounds.query \"subgrounds.Subgrounds.query\") will handle the rest!\n\n# Querying #\n\nSubgrounds provides 3 main ways to query data, which provide different data structures and typing:\n\nFunction\n\n|\n\nReturn Type\n\n|\n\nDescription\n\n--\n\n\n\n|--", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "cee5bef6-f750-4e85-a9f4-c1cb2ae89bd7": {"__data__": {"id_": "cee5bef6-f750-4e85-a9f4-c1cb2ae89bd7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "e9fddf6f-4682-431a-b171-b6b5fe96b200", "node_type": null, "metadata": {}, "hash": "21b3c0ed95cf12fca8c8204629f4e018259e031ece83128704c6d22664106d97"}, "3": {"node_id": "1536558c-fc71-4d4d-8656-7590bdaf9a2d", "node_type": null, "metadata": {}, "hash": "6de1909f99951318b97b5c78472d31e5b49de05f0f64f45b77b502d8d5b18372"}}, "hash": "35413d2c3462cd4b0085d4f1317c537e63efbc5e2442613d7dc0da61430cfa45", "text": "|---\n\n[ ` query() ` ](../../api_reference/top_level/#subgrounds.Subgrounds.query \"subgrounds.Subgrounds.query\")\n\n|\n\n[ ` str ` ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") | [ ` int ` ](https://docs.python.org/3/library/functions.html#int \"\\(in Python v3.11\\)\") | [ ` float ` ](https://docs.python.org/3/library/functions.html#float \"\\(in Python v3.11\\)\") | [ ` bool ` ](https://docs.python.org/3/library/functions.html#bool \"\\(in Python v3.11\\)\") | [ ` list ` ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") | [ ` tuple ` ](https://docs.python.org/3/library/stdtypes.html#tuple \"\\(in Python v3.11\\)\") | ` None `\n\n|\n\nThe shape of the queried data will determine the shape of the returned data (e.g. whether you query a single entity, list of entities)\n\n[ ` query_json() ` ](../../api_reference/top_level/#subgrounds.Subgrounds.query_json \"subgrounds.Subgrounds.query_json\")\n\n|\n\n[ ` dict ` ](https://docs.python.org/3/library/stdtypes.html#dict \"\\(in Python v3.11\\)\")\n\n|\n\nFor subgraphs, this _can_ include generated id keys for each generated sub- query.\n\n[ ` query_df() ` ](../../api_reference/top_level/#subgrounds.Subgrounds.query_df \"subgrounds.Subgrounds.query_df\")\n\n|\n\n[ ` DataFrame ` ](http://pandas.pydata.org/pandas- docs/dev/reference/api/pandas.DataFrame.html#pandas.DataFrame \"\\(in pandas v2.1.0.dev0+1421.g5f672dc704\\)\") | [ ` list ` ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") [ [ ` DataFrame ` ](http://pandas.pydata.org/pandas- docs/dev/reference/api/pandas.DataFrame.html#pandas.DataFrame \"\\(in pandas v2.1.0.dev0+1421.g5f672dc704\\)\") ]\n\n|\n\nFlattened based on the schema of the API from [ ` query_json() ` ](../../api_reference/top_level/#subgrounds.Subgrounds.query_json \"subgrounds.Subgrounds.query_json\") , mimicking an SQL ` JOIN ` operation. If flattening isn't possible, multiple [ ` Dataframes ` ](http://pandas.pydata.org/pandas- docs/dev/reference/api/pandas.DataFrame.html#pandas.DataFrame \"\\(in pandas v2.1.0.dev0+1421.g5f672dc704\\)\") will be returned (like when querying a nested list).\n\nTip\n\n[ ` query_df() ` ](../../api_reference/top_level/#subgrounds.Subgrounds.query_df \"subgrounds.Subgrounds.query_df\") will likely the best choice for you!\n\n## Quick Example #\n\nThe following code blocks present a comparison between all methods using the ` aave-v2 ` market data:\n\nClick for Interactive Documentation\n\nClicking this button will enable editing and execution of the code-blocks on this page. Learn more [ here ](../basics/) .\n\nRun code\n\nSetup for the following examples of the query methods using the Aave V2 data from Ethereum #\n\nfrom subgrounds import Subgrounds\n\nsg = Subgrounds()\n\naave_v2 = sg.load_subgraph(\n\n\"https://api.thegraph.com/subgraphs/name/messari/aave\n\n\n\nv2", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1536558c-fc71-4d4d-8656-7590bdaf9a2d": {"__data__": {"id_": "1536558c-fc71-4d4d-8656-7590bdaf9a2d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "cee5bef6-f750-4e85-a9f4-c1cb2ae89bd7", "node_type": null, "metadata": {}, "hash": "35413d2c3462cd4b0085d4f1317c537e63efbc5e2442613d7dc0da61430cfa45"}, "3": {"node_id": "26b07f71-b2fa-4f1f-b9b1-a6b39265fccf", "node_type": null, "metadata": {}, "hash": "d061c18ad790e6d71e3cd632d97df90109c4c4bcfa8d48615cb7f46d83e8bd2a"}}, "hash": "6de1909f99951318b97b5c78472d31e5b49de05f0f64f45b77b502d8d5b18372", "text": "ethereum\")\n\naave_markets = aave_v2.Query.markets(\n\nfirst=3,\n\norderBy=aave_v2.Market.totalValueLockedUSD,\n\norderDirection=\"desc\",\n\nwhere=[\n\naave_v2.Market.createdBlockNumber > 14720000\n\n]\n\n)\n\nquery\n\nA list of names and a matching list TVL values gets returned #\n\nsg.query([\n\naave_markets.name,\n\naave_markets.totalValueLockedUSD,\n\n])\n\nquery_json\n\nA more complex JSON data structure gets returned #\n\nsg.query_json([\n\naave_markets.name,\n\naave_markets.totalValueLockedUSD,\n\n])\n\nquery_df\n\n\u2728 A simple [ ` DataFrame ` ](http://pandas.pydata.org/pandas- docs/dev/reference/api/pandas.DataFrame.html#pandas.DataFrame \"\\(in pandas v2.1.0.dev0+1421.g5f672dc704\\)\") gets returned #\n\nsg.query_df([\n\naave_markets.name,\n\naave_markets.totalValueLockedUSD,\n\n])\n\nNaming your columns\n\n[ ` query_df() ` ](../../api_reference/top_level/#subgrounds.Subgrounds.query_df \"subgrounds.Subgrounds.query_df\") can also take an optional parameter ` columns ` , which let you name the column for each field path!sg.query_df(\n\n[aave_markets.name, aave_markets.totalValueLockedUSD],\n\ncolumns=[\"Name\", \"TVL (USD)\"],\n\n)\n\nTip _New in version 1.7.0_\n\nThe Graph provides a default server timeout of 30s so we've chosen this as our default for subgrounds.However, if you are using a custom or self-hosted indexer, you might want to adjust this timeout value.You can do so via the ` timeout ` constructor param.sg = Subgrounds(timeout=60)\n\n](../field_paths/merging/)\n\nOn this page\n\nQuerying\n\nQuick Example\n\n# Synthetic Fields #\n\nOne of Subgrounds' unique features is the ability to define schema-based (i.e.: pre-querying) transformations using [ ` SyntheticFields ` ](../../api_reference/top_level/#subgrounds.SyntheticField \"subgrounds.SyntheticField\") .[ ` SyntheticFields ` ](../../api_reference/top_level/#subgrounds.SyntheticField \"subgrounds.SyntheticField\") can be created using Python arithmetic operators on relative [ ` FieldPath ` ](../../api_reference/top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") (i.e.: [ ` FieldPaths ` ](../../api_reference/top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") starting from an entity and not the root ` Query ` object) and must be added to the entity which they enhance.Once added to an entity, [ ` SyntheticFields ` ](../../api_reference/top_level/#subgrounds.SyntheticField \"subgrounds.SyntheticField\") can be queried just like regular GraphQL fields.The example below demonstrates how to create a simple [ ` SyntheticField ` ](../../api_reference/top_level/#subgrounds.SyntheticField \"subgrounds.SyntheticField\") to calculate the swap price of ` Swap ` events stored on the Sushiswap subgraph:\n\nClick for Interactive Documentation\n\nClicking this button will enable editing and execution of the code-blocks on this page.Learn more [ here ](../basics/) .", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "26b07f71-b2fa-4f1f-b9b1-a6b39265fccf": {"__data__": {"id_": "26b07f71-b2fa-4f1f-b9b1-a6b39265fccf", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "1536558c-fc71-4d4d-8656-7590bdaf9a2d", "node_type": null, "metadata": {}, "hash": "6de1909f99951318b97b5c78472d31e5b49de05f0f64f45b77b502d8d5b18372"}, "3": {"node_id": "8399ff61-10ec-4b36-ae1c-fe9c1690fec5", "node_type": null, "metadata": {}, "hash": "de983a0b0cd5165e0d348656269ff7b43ffe07e3bbbf7786fe5d42c2e31f7a73"}}, "hash": "d061c18ad790e6d71e3cd632d97df90109c4c4bcfa8d48615cb7f46d83e8bd2a", "text": "Run code\n\nfrom subgrounds import Subgrounds\n\nsg = Subgrounds()\n\nsushiswap = sg.load_subgraph( \"https://api.thegraph.com/subgraphs/name/sushiswap/exchange\") swap = sushiswap.Swap # short hand for ease-of-use\n\n# Define a synthetic field named price1 (the swap price of token1, # in terms of token0) on Swap entities swap.price1 = ( abs(swap.amount0Out - swap.amount0In) / abs(swap.amount1Out - swap.amount1In) )\n\n# Build query to get the last 10 swaps of the WETH-USDC pair on Sushiswap weth_usdc = sushiswap.Query.pair(id=\"0x397ff1542f962076d0bfe58ea045ffa2d347aca0\")\n\nlast_10_swaps = weth_usdc.swaps(\n\norderBy=swap.timestamp,\n\norderDirection=\"desc\",\n\nfirst=10\n\n)\n\n# Query swap prices using the `SyntheticField` price1 as if they were regular fields sg.query_df([ last_10_swaps.timestamp, last_10_swaps.price1 # synthetic fields get used the same! ])[ ` SyntheticFields ` ](../../api_reference/top_level/#subgrounds.SyntheticField \"subgrounds.SyntheticField\") can _also_ be created using the constructor, allowing for much more complex transformations.from datetime import datetime\n\nfrom subgrounds import SyntheticField\n\n# Create a SyntheticField on the Swap entity called `datetime`, which will format # the timestamp field into something more human readable swap.datetime = SyntheticField( f=lambda timestamp: str(datetime.fromtimestamp(timestamp)), type_=SyntheticField.STRING, deps=swap.timestamp, )\n\nlast_10_swaps = sushiswap.Query.swaps(\n\norderBy=swap.timestamp,\n\norderDirection=\"desc\",\n\nfirst=10,\n\n)\n\nsg.query_df([\n\nlast_10_swaps.datetime,\n\nlast_10_swaps.pair.token0.symbol,\n\nlast_10_swaps.pair.token1.symbol,\n\n])\n\n## Helpers #\n\nSince there are several common instances [ ` SyntheticFields ` ](../../api_reference/top_level/#subgrounds.SyntheticField \"subgrounds.SyntheticField\") we see in the wild, we've added some helper constructors for ease of use.### ` SyntheticField.datetime_of_timestamp ` #\n\nThis helper constructor makes it easy to convert ` timestamps ` into [ ` datetime ` ](https://docs.python.org/3/library/datetime.html#datetime.datetime \"\\(in Python v3.11\\)\") objects.Helper Method\n\nswap.datetime = SyntheticField.datetime_of_timestamp(swap.timestamp)\n\nTranslation\n\nswap.datetime = SyntheticField(\n\nf=lambda timestamp: str(datetime.fromtimestamp(timestamp)),\n\ntype_=SyntheticField.STRING,\n\ndeps=swap.timestamp,\n\n)\n\n](../querying/)\n\nOn this page\n\nSynthetic Fields\n\nHelpers\n\n` SyntheticField.datetime_of_timestamp `\n\n# Pagination #\n\n_New in version` 1.0.0 ` _\n\nClick for Interactive Documentation\n\nClicking this button will enable editing and execution of the code-blocks on this page.Learn more [ here ](../../getting_started/basics/) .Run code\n\nBy default, Subgrounds handles GraphQL query pagination automatically.That is, if a query selects more than 1000 entities using the ` first ` argument (1000 being The Graph's limit to the ` first ` argument), then Subgrounds will automatically split the query into multiple queries that each query at most 1000 entities.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "8399ff61-10ec-4b36-ae1c-fe9c1690fec5": {"__data__": {"id_": "8399ff61-10ec-4b36-ae1c-fe9c1690fec5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "26b07f71-b2fa-4f1f-b9b1-a6b39265fccf", "node_type": null, "metadata": {}, "hash": "d061c18ad790e6d71e3cd632d97df90109c4c4bcfa8d48615cb7f46d83e8bd2a"}, "3": {"node_id": "5ab17022-5121-46c1-8025-44c2884069a9", "node_type": null, "metadata": {}, "hash": "6b827be77d6b43d6585c298769080b8aed84c4f1d92671a6f51a0aec201030bb"}}, "hash": "de983a0b0cd5165e0d348656269ff7b43ffe07e3bbbf7786fe5d42c2e31f7a73", "text": "Pagination is performed by Subgrounds with the use of a pagination strategy: a class that implements the [ ` PaginationStrategy ` ](../../api_reference/internal/pagination/#subgrounds.pagination.PaginationStrategy \"subgrounds.pagination.PaginationStrategy\") protocol.Subgrounds provides two pagination strategies out of the box, however, users wishing to implement their own strategy should create a class that implements the aforementioned protocol (see below).If at some point during the pagination process, an unhandled exception occurs, Subgrounds will raise a [ ` PaginationError ` ](../../api_reference/internal/pagination/#subgrounds.pagination.PaginationError \"subgrounds.pagination.PaginationError\") exception containing the initial exception message as well as the [ ` PaginationStrategy ` ](../../api_reference/internal/pagination/#subgrounds.pagination.PaginationStrategy \"subgrounds.pagination.PaginationStrategy\") object in the state it was in when the error occured, which, in the case of iterative querying (e.g.: when using [ ` query_df_iter() ` ](../../api_reference/top_level/#subgrounds.Subgrounds.query_df_iter \"subgrounds.Subgrounds.query_df_iter\") ), could be useful to recover and start pagination from a later stage.## Available Strategies #\n\nSubgrounds provides two pagination strategies out of the box:\n\n1.` LegacyStrategy ` : A pagination strategy that implements the pagination algorithm that was used by default prior to this update.This pagination strategy supports pagination on nested fields, but is quite slow.Below is an example of a query for which you should use this strategy:\n\nquery {\n\nliquidityPools(first: 10) {\n\nswaps(first: 5000) {\n\nid\n\n}\n\n}\n\n}\n\n2.` ShallowStrategy ` : A new pagination strategy that is faster than the ` LegacyStrategy ` , but does not paginate on nested list fields.In other words, this strategy is best when nested list fields select fewer than 1000 entities.Below is an example of a query for which you should use this strategy:\n\nquery {\n\nliquidityPools(first: 5000) {\n\nswaps(first: 10) {\n\nid\n\n}\n\n}\n\n}\n\nTo use either pagination strategy, set the ` pagination_strategy ` argument of toplevel querying functions:\n\nfrom subgrounds import Subgrounds\n\nfrom subgrounds.pagination import ShallowStrategy\n\nsg = Subgrounds()\n\nsubgraph = sg.load_subgraph(\n\n\"https://api.thegraph.com/subgraphs/name/messari/compound\n\n\n\nv2\n\n\n\nethereum\")\n\nmkt_daily_snapshots = subgraph.Query.marketDailySnapshots(\n\norderBy=\"timestamp\",\n\norderDirection=\"desc\",\n\nfirst=50,\n\n)\n\nfield_paths = [\n\nmkt_daily_snapshots.timestamp,\n\nmkt_daily_snapshots.market.inputToken.symbol,\n\nmkt_daily_snapshots.rates.rate,\n\nmkt_daily_snapshots.rates.side,\n\n]\n\nsg.query_df(field_paths, pagination_strategy=ShallowStrategy)\n\nNote that pagination can be explicitly disabled by setting ` LegacyStrategy ` to ` None ` , in which case the query will be executed as-is:\n\nsg.query_df(field_paths, pagination_strategy=None)\n\n](../contrib/plotly/)\n\nOn this page\n\nPagination\n\nAvailable Strategies\n\n[ Playgrounds ](../../../../)\n\nLogo](../../../../_static/assets/pg\n\n\n\nlogotype", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5ab17022-5121-46c1-8025-44c2884069a9": {"__data__": {"id_": "5ab17022-5121-46c1-8025-44c2884069a9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "8399ff61-10ec-4b36-ae1c-fe9c1690fec5", "node_type": null, "metadata": {}, "hash": "de983a0b0cd5165e0d348656269ff7b43ffe07e3bbbf7786fe5d42c2e31f7a73"}, "3": {"node_id": "9598ae58-6791-48ed-ae7e-531f0c37f2e2", "node_type": null, "metadata": {}, "hash": "4a7a0e31abc26c045ab9a4e93e011e3f3c51e5b4ea730fb16cfaec8dbe25e982"}}, "hash": "6b827be77d6b43d6585c298769080b8aed84c4f1d92671a6f51a0aec201030bb", "text": "primary.svg)\n\n# Custom Strategies #\n\n_New in version` 1.0.0 ` _\n\nSubgrounds allows developers to create their own pagination strategy by creating a class that implements the [ ` PaginationStrategy ` ](../../../api_reference/internal/pagination/#subgrounds.pagination.PaginationStrategy \"subgrounds.pagination.PaginationStrategy\") protocol:\n\nThe class's constructor should accept a [ ` SchemaMeta ` ](../../../api_reference/internal/schema/#subgrounds.schema.SchemaMeta \"subgrounds.schema.SchemaMeta\") argument which represents the schema of the subgraph API that the query is directed to and a [ ` Document ` ](../../../api_reference/internal/query/#subgrounds.query.Document \"subgrounds.query.Document\") argument which represents the query to be paginated on.If no pagination is required for the given document, then the constructor should raise a [ ` SkipPagination ` ](../../../api_reference/internal/pagination/strategies/#subgrounds.pagination.strategies.SkipPagination \"subgrounds.pagination.strategies.SkipPagination\") exception.The class's ` step ` method is where the main logic of the pagination strategy is located.The method accepts a single argument, ` page_data ` which is a dictionary containing the response data of the previous query (i.e.: the previous page of data).The ` step ` method should return a tuple ` (doc, vars) ` , where ` doc ` is a [ ` Document ` ](../../../api_reference/internal/query/#subgrounds.query.Document \"subgrounds.query.Document\") representing the query to be made to fetch the next page of data.When pagination is over (e.g.: when all pages of data have been fetched), the ` step ` method should raise a [ ` StopPagination ` ](../../../api_reference/internal/pagination/strategies/#subgrounds.pagination.strategies.StopPagination \"subgrounds.pagination.strategies.StopPagination\") exception.Below is the algorithm used by [ ` Subgrounds ` ](../../../api_reference/top_level/#subgrounds.Subgrounds \"subgrounds.Subgrounds\") to paginate over a query document given a pagination strategy:\n\ndef paginate( schema: SchemaMeta, doc: Document, pagination_strategy: Type[PaginationStrategy], headers: dict[str, Any], ) -> dict[str, Any]: \"\"\"Executes the request document `doc` based on the GraphQL schema `schema` and returns the response as a JSON dictionary.Args: schema (SchemaMeta): The GraphQL schema on which the request document is based doc (Document): The request document\n\nReturns: dict[str, Any]: The response data as a JSON dictionary \"\"\"\n\ntry:\n\nstrategy = pagination_strategy(schema, doc)\n\ndata: dict[str, Any] = {} doc, args = strategy.step()\n\nwhile True:\n\ntry:\n\npage_data = client.query(\n\nurl=doc.url,\n\nquery_str=doc.graphql,\n\nvariables=doc.variables | args,\n\nheaders=headers,\n\n)\n\ndata = merge(data, page_data)\n\ndoc, args = strategy.step(page_data)\n\nexcept StopPagination:\n\nbreak\n\nexcept Exception as exn:\n\nraise PaginationError(exn.args[0], strategy)\n\nreturn data\n\nexcept SkipPagination:\n\nreturn client.query(\n\ndoc.url, doc.graphql, variables=doc.variables, headers=headers\n\n)\n\n# Getting More Data #\n\nClick for Interactive Documentation\n\nClicking this button will enable editing and execution of the code-blocks on this page.Learn more [ here ](../../getting_started/basics/) .Run code\n\nBy default, subgraphs will emit only 100 rows for a given entity.In order to surface more data from an entity, you must leverage [ field arguments ](../../getting_started/field_paths/arguments/) , specifically the ` first ` argument.This specifies how many entities you wish to retrieve from that specific entity.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9598ae58-6791-48ed-ae7e-531f0c37f2e2": {"__data__": {"id_": "9598ae58-6791-48ed-ae7e-531f0c37f2e2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "5ab17022-5121-46c1-8025-44c2884069a9", "node_type": null, "metadata": {}, "hash": "6b827be77d6b43d6585c298769080b8aed84c4f1d92671a6f51a0aec201030bb"}, "3": {"node_id": "191d1eba-9cee-4331-9c2c-cce7bc16a5d5", "node_type": null, "metadata": {}, "hash": "d826f0ff575438613db87be876c2e37605e9f92917f44cd290d3de725eb7898c"}}, "hash": "4a7a0e31abc26c045ab9a4e93e011e3f3c51e5b4ea730fb16cfaec8dbe25e982", "text": "Gathering data from the curve finance subgraph #\n\nfrom subgrounds import Subgrounds\n\nwith Subgrounds() as sg:\n\ncurve = sg.load_subgraph(\n\n\"https://api.thegraph.com/subgraphs/name/messari/curve\n\n\n\nfinance\n\n\n\nethereum\")\n\nsg.query_df(\n\ncurve.Query.financialsDailySnapshots(first=2500)\n\n)\n\nNote\n\nIt is possible to query more than a 100 rows worth of data **without** specifying a ` first ` argument by using nested fields. Essentially, you would be querying multiple rows for each row as ` subgrounds ` would paginated the nested field and then auto-flatten said field.\n\n## Pagination #\n\nSubgraphs and GraphQL usually restrict you to a maximum ` first ` argument of ` 1000 ` . In ` subgrounds ` , you can specify as large as a number as you want as ` subgrounds ` will automatically create multiple, **paginated** , requests to retrieve more data. This means you'll be able to access all the data from an entity by just setting the ` first ` argument to a high-enough number!\n\n\n\n\n\n\n\n### Field Arguments\n\nCustomizing other field path arguments\n\n[ ](../../getting_started/field_paths/arguments/)\n\n### Pagination\n\nLearn more about how ` subgrounds ` paginates!\n\n[ ](../../advanced_topics/pagination/)\n\n](../exporting/)\n\nOn this page\n\nGetting More Data\n\nPagination\n\n[ Playgrounds ](../../../../)\n\nLogo](../../../../_static/assets/pg\n\n\n\nlogotype\n\n\n\nprimary.svg)\n\n# Plotly #\n\n_New in version` 1.4.0 ` _\n\nThe Subgrounds Plotly Wrapper is an extension of the Plotly components to understand and work seamlessly with the Subgrounds library. It provides a convenient way to visualize data fetched from subgraphs using Plotly, by wrapping Plotly's trace components with additional functionality.\n\n\n\n\n\nResources**\n\n[ Plotly Docs ](https://plotly.com/python/)\n\nRun code\n\n## Getting Started #\n\nTo start using the Subgrounds Plotly Wrapper, you'll need to import the required components:\n\nfrom subgrounds import Subgrounds from subgrounds.contrib.plotly import Figure, Indicator\n\nNext, load your subgraph using the Subgrounds library:\n\nsg = Subgrounds()\n\naave_v2 = sg.load_subgraph(\"https://api.thegraph.com/subgraphs/name/messari/aave\n\n\n\nv2\n\n\n\nethereum\")\n\nNow, you can create a Figure instance with the appropriate traces:\n\nFigure(\n\nsubgrounds=sg,\n\ntraces=[\n\nIndicator(value=pair.token0Price),\n\n],\n\n)\n\n## Examples #\n\nHere are some code examples demonstrating how to use the Subgrounds Plotly Wrapper:\n\n### Simple Indcator #\n\nAn indicator for the price of a token #\n\nfrom subgrounds import Subgrounds from subgrounds.contrib.plotly import Figure, Indicator\n\nsg = Subgrounds()\n\naave_v2 = sg.load_subgraph(\"https://api.thegraph.com/subgraphs/name/messari/aave\n\n\n\nv2\n\n\n\nethereum\")\n\nFigure(\n\nsubgrounds=sg,\n\ntraces=[\n\nIndicator(value=pair.token0Price),\n\n],\n\n)\n\n### Scatter and Bar Plots #\n\nScatter and bar plots across a months worth of data #\n\nfrom datetime import datetime\n\nimport pandas as pd\n\nfrom subgrounds import FieldPath, Subgrounds, SyntheticField from subgrounds.contrib.plotly import Figure, Scatter, Bar\n\nsg = Subgrounds()\n\nlido_activity = sg.load_subgraph(\n\n\"https://api.thegraph.com/subgraphs/name/messari/lido", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "191d1eba-9cee-4331-9c2c-cce7bc16a5d5": {"__data__": {"id_": "191d1eba-9cee-4331-9c2c-cce7bc16a5d5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "9598ae58-6791-48ed-ae7e-531f0c37f2e2", "node_type": null, "metadata": {}, "hash": "4a7a0e31abc26c045ab9a4e93e011e3f3c51e5b4ea730fb16cfaec8dbe25e982"}, "3": {"node_id": "575cb777-a82d-45d5-9619-fd358ccf61b7", "node_type": null, "metadata": {}, "hash": "70f0917f4cd91c29821133e46ffc32fe1a0191c4dedda8e3343d70965195b3bb"}}, "hash": "d826f0ff575438613db87be876c2e37605e9f92917f44cd290d3de725eb7898c", "text": "ethereum\"\n\n)\n\nusage_daily_snapshot_30days = lido_activity.Query.usageMetricsDailySnapshots(\n\norderBy=lido_activity.UsageMetricsDailySnapshot.timestamp,\n\norderDirection=\"desc\",\n\nfirst=30,\n\n)\n\ndaily_snapshot = lido_activity.UsageMetricsDailySnapshot\n\ndaily_snapshot.datetime = SyntheticField.datetime_of_timestamp(\n\ndaily_snapshot.timestamp\n\n)\n\n# Create the Scatter trace with appropriate field paths trace = Scatter( x=usage_daily_snapshot_30days.datetime, y=usage_daily_snapshot_30days.dailyActiveUsers, )\n\n# Create the Figure instance with the trace and display it fig = Figure( subgrounds=sg, traces=trace, layout=dict( title=\"Daily Active Users vs Datetime\", xaxis=dict(title=\"Datetime\"), yaxis=dict(title=\"Daily Active Users\") ), )\n\n# Create the Bar trace with appropriate field paths: trace2 = Bar( x=usage_daily_snapshot_30days.datetime, y=usage_daily_snapshot_30days.dailyTransactionCount, )\n\n# Create the Figure instance with the trace and display it: fig2 = Figure( subgrounds=sg, traces=trace2, layout=dict( title=\"Daily Transaction Count\", xaxis=dict(title=\"Datetime\"), yaxis=dict(title=\"Daily Transaction Count\") ), )\n\nShow figure 1 #\n\nfig.figure.show()\n\nShow figure 2 #\n\nfig2.figure.show()\n\nIn this example, we first load a subgraph and fetch data for the past 30 days. We then create a synthetic field to convert the timestamp into a datetime object. Next, we create a Scatter trace and a Bar trace with the appropriate field paths. Finally, we create two Figure instances and display them.\n\nWith the Subgrounds Plotly Wrapper, you can easily extend the provided classes to support more Plotly trace types and create custom visualizations for your subgraph data.\n\nOn this page\n\nPlotly\n\nGetting Started\n\nExamples\n\nSimple Indcator\n\nScatter and Bar Plots\n\n# Top Level APIs #\n\nThis page outlines the api-reference describing all of the APIs that are exported at the top-level of ` subgrounds ` \u2014 aka, APIs for the majority of users.\n\n## Clients #\n\nThis is your main entrypoint for using ` Subgrounds ` as all aspects of the subgrounds logic is integrated through these clients.\n\n_ class _ subgrounds. Subgrounds ( _ headers: dict[str _ , _ typing.Any] = <factory> _ , _ global_transforms: list[subgrounds.transform.RequestTransform] = <factory> _ , _ subgraphs: dict[str _ , _ subgrounds.subgraph.subgraph.Subgraph] = <factory> _ ) #\n\nBases: [ ` object ` ](https://docs.python.org/3/library/functions.html#object \"\\(in Python v3.11\\)\")\n\nload_subgraph ( _ url _ , _ save_schema = False _ , _ cache_dir = 'schemas/' _ ) #\n\nPerforms introspection on the provided GraphQL API ` url ` to get the schema, stores the schema if ` save_schema ` is ` True ` and returns a generated class representing the subgraph with all its entities.\n\nParameters :\n\n\n\n**url\n\n** ( [ _str_ ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") )\n\n-- The url of the API\n\nReturns :\n\nA generated class representing the subgraph and its entities\n\nReturn type :\n\nSubgraph\n\nload_api ( _ url _ , _ save_schema = False _ , _ cache_dir = 'schemas/' _ ) #\n\nPerforms introspection on the provided GraphQL API ` url ` to get the schema, stores the schema if ` save_schema ` is ` True ` and returns a generated class representing the GraphQL endpoint with all its entities.\n\nParameters :", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "575cb777-a82d-45d5-9619-fd358ccf61b7": {"__data__": {"id_": "575cb777-a82d-45d5-9619-fd358ccf61b7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "191d1eba-9cee-4331-9c2c-cce7bc16a5d5", "node_type": null, "metadata": {}, "hash": "d826f0ff575438613db87be876c2e37605e9f92917f44cd290d3de725eb7898c"}, "3": {"node_id": "17767a90-8bc8-409f-bee0-c90ff7650c43", "node_type": null, "metadata": {}, "hash": "fa4f5310a68f484c26a7f4bf086c877bd08d6dc5528e70a3697db2a511a197b2"}}, "hash": "70f0917f4cd91c29821133e46ffc32fe1a0191c4dedda8e3343d70965195b3bb", "text": "**url\n\n** ( [ _str_ ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") )\n\n-- The url of the API\n\nReturns :\n\nA generated class representing the subgraph and its entities\n\nReturn type :\n\nSubgraph\n\nmk_request ( _ fpaths _ ) #\n\nCreates a ` DataRequest ` object by combining one or more ` FieldPath ` objects.\n\nParameters :\n\n](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\")\n\nincluded in the request\n\nReturns :\n\nA new ` DataRequest ` object\n\nReturn type :\n\n[ DataRequest ](../internal/query/#subgrounds.query.DataRequest\n\n\"subgrounds.query.DataRequest\")\n\nexecute ( _ req _ , _ pagination_strategy = LegacyStrategy _ ) #\n\nExecutes a ` DataRequest ` object, sending the underlying query(ies) to the server and returning a data blob (list of Python dictionaries, one per actual query).\n\nParameters :\n\n\n\n**req\n\n** ( [ _DataRequest_ ](../internal/query/#subgrounds.query.DataRequest \"subgrounds.query.DataRequest\") )\n\n-- The ` DataRequest ` object to be executed\n\nReturns :\n\nThe reponse data\n\nReturn type :\n\n[ list ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") [ [ dict ](https://docs.python.org/3/library/stdtypes.html#dict \"\\(in Python v3.11\\)\") ]\n\nexecute_iter ( _ req _ , _ pagination_strategy = LegacyStrategy _ ) #\n\nSame as execute , except that an iterator is returned which will iterate the data pages.\n\nParameters :\n\n\n\n**req\n\n** ( [ _DataRequest_ ](../internal/query/#subgrounds.query.DataRequest \"subgrounds.query.DataRequest\") )\n\n-- The ` DataRequest ` object to be executed\n\nReturns :\n\nAn iterator over the reponse data pages\n\nReturn type :\n\nIterator[ [ dict ](https://docs.python.org/3/library/stdtypes.html#dict \"\\(in Python v3.11\\)\") ]\n\nquery_json ( _ fpaths _ , _ pagination_strategy = LegacyStrategy _ ) #\n\nEquivalent to ` Subgrounds.execute(Subgrounds.mk_request(fpaths),\n\npagination_strategy) ` .Parameters :\n\nReturns :\n\nThe reponse data\n\nReturn type :\n\n[ list ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") [ [ dict ](https://docs.python.org/3/library/stdtypes.html#dict \"\\(in Python v3.11\\)\") [ [ str ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") , Any]]\n\nquery_json_iter ( _ fpaths _ , _ pagination_strategy = LegacyStrategy _ ) #\n\nSame as query_json except an iterator over the response data pages is returned.Parameters :\n\nReturns :\n\nThe reponse data\n\nReturn type :\n\n[ list ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") [ [ dict ](https://docs.python.org/3/library/stdtypes.html#dict \"\\(in Python v3.11\\)\") [ [ str ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") , Any]]\n\nquery_df ( _ fpaths _ , _ columns = None _ , _ concat = False _ , _ pagination_strategy = LegacyStrategy _ ) #\n\nSame as ` Subgrounds.query() ` but formats the response data into a Pandas DataFrame.If the response data cannot be flattened to a single query (e.g.: when querying multiple list fields that return different entities), then multiple dataframes are returned\n\n` fpaths ` is a list of ` FieldPath ` objects that indicate which data must be queried.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "17767a90-8bc8-409f-bee0-c90ff7650c43": {"__data__": {"id_": "17767a90-8bc8-409f-bee0-c90ff7650c43", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "575cb777-a82d-45d5-9619-fd358ccf61b7", "node_type": null, "metadata": {}, "hash": "70f0917f4cd91c29821133e46ffc32fe1a0191c4dedda8e3343d70965195b3bb"}, "3": {"node_id": "af85d3f6-c500-41de-bdd7-780f77d03b98", "node_type": null, "metadata": {}, "hash": "f94d8f3e19df3d55e85111ab33693d1dd194ea53cf1c267e8c79a0ea79466c97"}}, "hash": "fa4f5310a68f484c26a7f4bf086c877bd08d6dc5528e70a3697db2a511a197b2", "text": "` columns ` is an optional argument used to rename the dataframes(s) columns.The length of ` columns ` must be the same as the number of columns of _all_ returned dataframes.` concat ` indicates whether or not the resulting dataframes should be concatenated together.The dataframes must have the same number of columns, as well as the same column names and types (the names can be set using the ` columns ` argument).Parameters :\n\nReturns :\n\nA DataFrame containing the reponse data\n\nReturn type :\n\npd.DataFrame | [ list ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") [pd.DataFrame]\n\nExample:\n\n>>> from subgrounds import Subgrounds >>> sg = Subgrounds() >>> univ3 = sg.load_subgraph('https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3')\n\n# Define price SyntheticField >>> univ3.Swap.price = abs(univ3.Swap.amount0) / abs(univ3.Swap.amount1)\n\n# Query last 10 swaps from the ETH/USDC pool >>> eth_usdc = univ3.Query.swaps( ... orderBy=univ3.Swap.timestamp, ... orderDirection='desc', ... first=10, ... where=[ ... univ3.Swap.pool == '0x8ad599c3a0ff1de082011efddc58f1908eb6e6d8' ... ] ... ) >>> sg.query_df([ ... eth_usdc.timestamp, ... eth_usdc.price ... ]) swaps_timestamp swaps_price 0 1643213811 2618.886394 1 1643213792 2618.814281 2 1643213792 2617.500494 3 1643213763 2615.458495 4 1643213763 2615.876574 5 1643213739 2615.352390 6 1643213678 2615.205713 7 1643213370 2614.115746 8 1643213210 2613.077301 9 1643213196 2610.686563\n\nquery_df_iter ( _ fpaths _ , _ pagination_strategy = LegacyStrategy _ ) #\n\nSame as query_df except an iterator over the response data pages is returned :param fpaths: One or more FieldPath objects that\n\n> should be included in the request\n\nParameters :\n\nReturns :\n\nAn iterator over the response data pages, each as a DataFrame\n\nReturn type :\n\nIterator[pd.DataFrame]\n\nquery ( _ fpaths _ , _ unwrap = True _ , _ pagination_strategy = LegacyStrategy _ ) #\n\nExecutes one or multiple ` FieldPath ` objects immediately and return the data (as a tuple if multiple ` FieldPath ` objects are provided).Parameters :\n\nReturns :\n\nThe ` FieldPath ` object(s) data\n\nReturn type :\n\n[ [ type ](https://docs.python.org/3/library/functions.html#type \"\\(in Python v3.11\\)\") ]\n\nExample:\n\n>>> from subgrounds import Subgrounds >>> sg = Subgrounds() >>> univ3 = sg.load_subgraph('https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3')\n\n# Define price SyntheticField >>> univ3.Swap.price = abs(univ3.Swap.amount0) / abs(univ3.Swap.amount1)\n\n# Construct FieldPath to get price of last swap on ETH/USDC pool >>> eth_usdc_last = univ3.Query.swaps( ... orderBy=univ3.Swap.timestamp, ... orderDirection='desc', ... first=1, ... where=[ ... univ3.Swap.pool == '0x8ad599c3a0ff1de082011efddc58f1908eb6e6d8' ... ] ... ).price\n\n# Query last price FieldPath >>> sg.query(eth_usdc_last) 2628.975030015892\n\nquery_iter ( _ fpaths _ , _ unwrap = True _ , _ pagination_strategy = LegacyStrategy _ ) #\n\nSame as query except an iterator over the resonse data pages is returned.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "af85d3f6-c500-41de-bdd7-780f77d03b98": {"__data__": {"id_": "af85d3f6-c500-41de-bdd7-780f77d03b98", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "17767a90-8bc8-409f-bee0-c90ff7650c43", "node_type": null, "metadata": {}, "hash": "fa4f5310a68f484c26a7f4bf086c877bd08d6dc5528e70a3697db2a511a197b2"}, "3": {"node_id": "b5f73156-24af-45f7-af53-f07ad49b60a4", "node_type": null, "metadata": {}, "hash": "8a3b5af86591f8d1bc50a36780eb01abf6502f61d8569b0587e40dc36350ecfa"}}, "hash": "f94d8f3e19df3d55e85111ab33693d1dd194ea53cf1c267e8c79a0ea79466c97", "text": "Parameters :\n\nReturns :\n\nAn iterator over the ` FieldPath ` object(s)' data pages\n\nReturn type :\n\nIterator[ [ type ](https://docs.python.org/3/library/functions.html#type \"\\(in Python v3.11\\)\") ]\n\n## Subgraph Utilities #\n\n_ class _ subgrounds.Subgraph ( _ url: 'str', schema: 'SchemaMeta', transforms: 'list[DocumentTransform]' = [<subgrounds.transform.TypeTransform object at 0x7fba98ae0580>, <subgrounds.transform.TypeTransform object at 0x7fba98ae0640>], is_subgraph: 'bool' = True _ ) #\n\n_ class _ subgrounds.FieldPath ( _ subgraph : 'Subgraph' _ , _ root_type : 'TypeRef.T' _ , _ type_ : 'TypeRef.T' _ , _ path : 'list[Tuple[Optional[dict[str, Any]], TypeMeta.FieldMeta]]' _ ) #\n\n_ class _ subgrounds.SyntheticField ( _ f : 'Callable' _ , _ type_ : 'TypeRef.T' _ , _ deps : 'list[FieldPath | SyntheticField] | FieldPath | SyntheticField' _ , _ default : 'Any' = None _ ) #\n\n_ static _ constant ( _ value _ ) #\n\nReturns a constant ` SyntheticField ` with value ` value ` .Useful for injecting additional static data to a schema or merging entities.Parameters :\n\n**value** ( [ _str_ ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") _|_ [ _int_ ](https://docs.python.org/3/library/functions.html#int \"\\(in Python v3.11\\)\") _|_ [ _float_ ](https://docs.python.org/3/library/functions.html#float \"\\(in Python v3.11\\)\") _|_ [ _bool_ ](https://docs.python.org/3/library/functions.html#bool \"\\(in Python v3.11\\)\") ) -- The constant field's value\n\nReturns :\n\nThe constant ` SyntheticField `\n\nReturn type :\n\nSyntheticField\n\nExample:\n\n>>> from subgrounds.subgrounds import Subgrounds >>> from subgrounds.subgraph import SyntheticField >>> sg = Subgrounds() >>> univ3 = sg.load_subgraph( ... 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3' ... )\n\n# Create constant SyntheticFields\n\n>>> univ3.Mint.tx_type = SyntheticField.constant('MINT')\n\n>>> univ3.Burn.tx_type = SyntheticField.constant('BURN')\n\n# Last 10 mints and burns >>> mints = univ3.Query.mints( ... first=10, ... orderBy=univ3.Mint.timestamp, ... orderDirection='desc' ... ) >>> burns = univ3.Query.burns( ... first=10, ... orderBy=univ3.Burn.timestamp, ... orderDirection='desc' ... )\n\n# Query mints and burns.Notice that we merge the two entity tables by # setting `concat=True` and overwriting the column names (columns must # match the `FieldPaths`) >>> df = sg.query_df([ . mints.transaction.id, . mints.timestamp, . mints.tx_type, . mints.origin, . mints.amountUSD, . burns.transaction.id, . burns.timestamp, . burns.tx_type, . burns.origin, . burns.amountUSD, . ], columns=['tx_hash', 'timestamp', 'tx_type', 'origin', 'amount_USD'], concat=True)\n\n# Sort the DataFrame >>> df.sort_values(by=['timestamp'],", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b5f73156-24af-45f7-af53-f07ad49b60a4": {"__data__": {"id_": "b5f73156-24af-45f7-af53-f07ad49b60a4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "af85d3f6-c500-41de-bdd7-780f77d03b98", "node_type": null, "metadata": {}, "hash": "f94d8f3e19df3d55e85111ab33693d1dd194ea53cf1c267e8c79a0ea79466c97"}, "3": {"node_id": "0f8b564d-15dc-4d8c-9206-6d59f52e3ed0", "node_type": null, "metadata": {}, "hash": "9d089fe95a23791b9397164403b4eb5821be593ecb17f85cb58fd92f14818a1a"}}, "hash": "8a3b5af86591f8d1bc50a36780eb01abf6502f61d8569b0587e40dc36350ecfa", "text": "ascending=False) tx_hash timestamp tx_type origin amount_USD 0 0xcbe1bacacc1e64fe613ae5eef2063563bd0057d1e3df. 1656016553 MINT 0x3435e7946d40b1a83c0cf154326fc6b3ca908952 7.879784e+03 1 0xdddaaddf59e5a3abff4feadef83b3ceb023a74424ea7. 1656016284 MINT 0xc747962e7e416e2a582813b1d7ad59eb83077fa6 5.110840e+04 10 0xa7671452c34a3b083083ef81e364489c2c9ee801a3b8. 1656016284 BURN 0xd40db77990bbb30514276b5ac17c3ce5cc9c951f 2.804573e+05 2 0xc132e73975e77c2c2c91fcf332018dfb01aac0ca9471. 1656015853 MINT 0xc747962e7e416e2a582813b1d7ad59eb83077fa6 5.122569e+04 3 0x1444744f4021a2046787c1b7b88cd9ac21f071c65acc. 1656015773 MINT 0xd11aa2e3a000275ed12b87515c9ac0d67b32e7b9 8.897983e+03 4 0x3315617d426fc2b0db5d8dbccd549efaa8f1ae2969ca. 1656015693 MINT 0xb7dd4d134b1794ee848e1af1a62b85d7b2ea9301 0.000000e+00 11 0xcc713daa2dc58cd1f2218c8f438e7fcf04d2e9c7c83d. 1656015278 BURN 0xa7c43e2057d89b6946b8865efc8bee3a4ea7d28d 1.254942e+06 5 0x7bbfae86f0c3c983651bd0671557cd851fc301317c06. 1656015111 MINT 0xac56cee8ccd00d0c1d72ce3415140874552e80f4 3.432075e+04 12 0xea21c3a68a8f0c6a2721a3072e0c8b2edc77f4d2f0d9. 1656014785 BURN 0x0709b103d46d71458a71e5d81230dd688809a53d 2.059106e+04 6 0x3bd369bf45c55cab40c62db81bb3e0684fd85fe2b662.\n\n1656014120 MINT 0x509984bfc0fb24e2d1377cfec224d3afec4c341e 2.517578e+03 13 0x1ea59da77c442479af8fb51501a931260d473e249de7. 1656014018 BURN 0x509984bfc0fb24e2d1377cfec224d3afec4c341e 0.000000e+00 7 0xb9d31ef78b8bf786b422d948dd1fba246710078abff8. 1656013998 MINT 0x22dfec183294d257f80c15d3c9cd47495bdc728c 8.365750e+04 14 0xc5e3ec84a2860e3c3a055ccdced435a67b4aff4dd3be. 1656013946 BURN 0xac56cee8ccd00d0c1d72ce3415140874552e80f4 3.363809e+04 8 0x7c736255d9a4ebf4781069a1b2a929ad89100f1af980.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0f8b564d-15dc-4d8c-9206-6d59f52e3ed0": {"__data__": {"id_": "0f8b564d-15dc-4d8c-9206-6d59f52e3ed0", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "b5f73156-24af-45f7-af53-f07ad49b60a4", "node_type": null, "metadata": {}, "hash": "8a3b5af86591f8d1bc50a36780eb01abf6502f61d8569b0587e40dc36350ecfa"}, "3": {"node_id": "36c6bcb9-0263-47e2-9845-bb1ef8a9d33e", "node_type": null, "metadata": {}, "hash": "f422826a8059130ac5b1d19ad295b87d39cbfa5356da6f4c45f6f0abcec33324"}}, "hash": "9d089fe95a23791b9397164403b4eb5821be593ecb17f85cb58fd92f14818a1a", "text": "1656013913 MINT 0x4ce6aea89f059915ae5efbf34a2a8adc544ae09e 4.837287e+04 15 0x95cf56b9eb69aa45048a9b7b3e472df5bc3bfad591cd. 1656013728 BURN 0x4ce6aea89f059915ae5efbf34a2a8adc544ae09e 5.110010e+04 9 0x76dd2bbf43485c224471dd823c2992178f031f27194b. 1656013599 MINT 0x234a644868c419ce0dcdd9fd539762eba47f3759 5.363896e+03 16 0x47e595b02fdcb51ff42a5008e53be7ee3bdf8063b580. 1656013580 BURN 0xaf0fdd39e5d92499b0ed9f68693da99c0ec1e92e 0.000000e+00 17 0xe20ec9702f455d74b3cc1f54fe2f3450604ca5037a72. 1656013455 BURN 0xaf0fdd39e5d92499b0ed9f68693da99c0ec1e92e 0.000000e+00 18 0xac3e95666be3a45fdfbbfa513a114136ea6ecffb9de2. 1656013237 BURN 0x665d2d2444f2384fb3d96aaa0ea3536b92984dce 2.254100e+05 19 0x01c3424a48c36104ea388482723347f15c0bc1bb1a80. 1656013034 BURN 0x0084ee6c8893c01e252198b56ec127443dc27464 0.000000e+00\n\n_ static _ datetime_of_timestamp ( _ timestamp _ ) #\n\nReturns a ` SyntheticField ` that will transform the ` FieldPath ` ` timestamp ` into a human-readable ISO8601 string.Parameters :\n\nrepresenting a Unix timestamp field.Returns :\n\nAn ISO8601 datetime string ` SyntheticField ` .Return type :\n\nSyntheticField\n\nExample:\n\n>>> from subgrounds.subgrounds import Subgrounds >>> from subgrounds.subgraph import SyntheticField >>> sg = Subgrounds() >>> univ3 = sg.load_subgraph( ... 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3' ... )\n\n# Create datetime SyntheticField\n\n>>> univ3.Swap.datetime = SyntheticField.datetime_of_timestamp(univ3.Swap.timestamp)\n\n# Query 100 swaps >>> sg.query_df([ ... univ3.Query.swaps.timestamp, ... univ3.Query.swaps.datetime, ... ]) swaps_timestamp swaps_datetime 0 1625105710 2021-06-30 22:15:10 1 1629253724 2021-08-17 22:28:44 2 1647333277 2022-03-15 04:34:37 3 1630801974 2021-09-04 20:32:54 4 1653240241 2022-05-22 13:24:01 .. ... ... 95 1646128326 2022-03-01 04:52:06 96 1646128326 2022-03-01 04:52:06 97 1626416555 2021-07-16 02:22:35 98 1626416555 2021-07-16 02:22:35 99 1625837291 2021-07-09 09:28:11\n\n_ static _ map ( _ dict _ , _ type_ _ , _ fpath _ , _ default = None _ ) #\n\nReturns a SyntheticField that will map the values of ` fpath ` using the key value pairs in ` dict ` .If a value is not in the dictionary, then ` default ` will be used instead.Parameters :\n\n\n\n**type\n\n** ( _TypeRef.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "36c6bcb9-0263-47e2-9845-bb1ef8a9d33e": {"__data__": {"id_": "36c6bcb9-0263-47e2-9845-bb1ef8a9d33e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "0f8b564d-15dc-4d8c-9206-6d59f52e3ed0", "node_type": null, "metadata": {}, "hash": "9d089fe95a23791b9397164403b4eb5821be593ecb17f85cb58fd92f14818a1a"}, "3": {"node_id": "e13ed7b0-889d-4963-a78e-4e5c98b0b838", "node_type": null, "metadata": {}, "hash": "47db134219cc4fd9a9d700a1db5232b4d6cfd1c0584b0ee51f12a2defb732b16"}}, "hash": "f422826a8059130ac5b1d19ad295b87d39cbfa5356da6f4c45f6f0abcec33324", "text": "T_ )\n\n-- The type of the resulting field\n\nReturns :\n\nA map SyntheticField\n\nReturn type :\n\nSyntheticField\n\nExample:\n\n>>> from subgrounds.subgrounds import Subgrounds >>> from subgrounds.subgraph import SyntheticField >>> sg = Subgrounds() >>> univ3 = sg.load_subgraph( . 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3' . )\n\n# Hand-crafted mapping of pool addresses to symbol >>> pooladdr_symbol_map = { . '0x5777d92f208679db4b9778590fa3cab3ac9e2168': 'DAI/USDC-001', . '0x6c6bc977e13df9b0de53b251522280bb72383700': 'DAI/USDC-005', . '0x8ad599c3a0ff1de082011efddc58f1908eb6e6d8': 'USDC/ETH-030', . '0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640': 'USDC/ETH-005', . }\n\n# Create map SyntheticField using our dictionary with 'UNKNOWN' as the # default value >>> univ3.Pool.symbol = SyntheticField.map( . pooladdr_symbol_map, . SyntheticField.STRING, . univ3.Pool.id, . 'UNKNOWN' . )\n\n# Query top 10 pools by TVL >>> pools = univ3.Query.pools( . first=10, . orderBy=univ3.Pool.totalValueLockedUSD, . orderDirection='desc' . ) >>> sg.query_df([ . pools.id, . pools.symbol . ]) pools_id pools_symbol 0 0xa850478adaace4c08fc61de44d8cf3b64f359bec UNKNOWN 1 0x5777d92f208679db4b9778590fa3cab3ac9e2168 DAI/USDC-001 2 0x6c6bc977e13df9b0de53b251522280bb72383700 DAI/USDC-005 3 0x8ad599c3a0ff1de082011efddc58f1908eb6e6d8 USDC/ETH-030 4 0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640 USDC/ETH-005 5 0x3416cf6c708da44db2624d63ea0aaef7113527c6 UNKNOWN 6 0xcbcdf9626bc03e24f779434178a73a0b4bad62ed UNKNOWN 7 0xc63b0708e2f7e69cb8a1df0e1389a98c35a76d52 UNKNOWN 8 0x4585fe77225b41b697c938b018e2ac67ac5a20c0 UNKNOWN 9 0x4e68ccd3e89f51c3074ca5072bbac773960dfa36 UNKNOWN\n\nOn this page\n\nTop Level APIs\n\nClients\n\n` Subgrounds `\n\n` Subgrounds.load_subgraph() `\n\n` Subgrounds.load_api() `\n\n` Subgrounds.mk_request() `\n\n` Subgrounds.execute() `\n\n` Subgrounds.execute_iter() `\n\n` Subgrounds.query_json() `\n\n` Subgrounds.query_json_iter() `\n\n` Subgrounds.query_df() `\n\n` Subgrounds.query_df_iter() `\n\n` Subgrounds.query() `\n\n` Subgrounds.query_iter() `\n\nSubgraph Utilities\n\n` Subgraph `\n\n` FieldPath `\n\n` SyntheticField `\n\n` SyntheticField.constant() `\n\n` SyntheticField.datetime_of_timestamp() `\n\n` SyntheticField.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e13ed7b0-889d-4963-a78e-4e5c98b0b838": {"__data__": {"id_": "e13ed7b0-889d-4963-a78e-4e5c98b0b838", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "36c6bcb9-0263-47e2-9845-bb1ef8a9d33e", "node_type": null, "metadata": {}, "hash": "f422826a8059130ac5b1d19ad295b87d39cbfa5356da6f4c45f6f0abcec33324"}, "3": {"node_id": "08475c8e-fff7-4bb3-b0f9-9f5f1a21d8a6", "node_type": null, "metadata": {}, "hash": "3c6c4ba6b09598873323fcc2f0ebea30b82b6a084241577c1900c8daa00902cb"}}, "hash": "47db134219cc4fd9a9d700a1db5232b4d6cfd1c0584b0ee51f12a2defb732b16", "text": "map() `\n\n# Internal #\n\n[ Client ](client/)\n\n[ Base ](client/base/)\n\n[ Sync ](client/sync/)\n\n[ Async_ ](client/async_/)\n\n[ ` get_schema() ` ](client/#subgrounds.client.get_schema)\n\n[ ` query() ` ](client/#subgrounds.client.query)\n\n[ Contrib ](contrib/)\n\n[ Plotly ](contrib/plotly/)\n\n[ ` TraceWrapper ` ](contrib/plotly/#subgrounds.contrib.plotly.TraceWrapper)\n\n[ ` Scatter ` ](contrib/plotly/#subgrounds.contrib.plotly.Scatter)\n\n[ ` Scatter.graph_object ` ](contrib/plotly/#subgrounds.contrib.plotly.Scatter.graph_object)\n\n[ ` Pie ` ](contrib/plotly/#subgrounds.contrib.plotly.Pie)\n\n[ ` Pie.graph_object ` ](contrib/plotly/#subgrounds.contrib.plotly.Pie.graph_object)\n\n[ ` Bar ` ](contrib/plotly/#subgrounds.contrib.plotly.Bar)\n\n[ ` Bar.graph_object ` ](contrib/plotly/#subgrounds.contrib.plotly.Bar.graph_object)\n\n[ ` Heatmap ` ](contrib/plotly/#subgrounds.contrib.plotly.Heatmap)\n\n[ ` Heatmap.graph_object ` ](contrib/plotly/#subgrounds.contrib.plotly.Heatmap.graph_object)\n\n[ ` Contour ` ](contrib/plotly/#subgrounds.contrib.plotly.Contour)\n\n[ ` Contour.graph_object ` ](contrib/plotly/#subgrounds.contrib.plotly.Contour.graph_object)\n\n[ ` Table ` ](contrib/plotly/#subgrounds.contrib.plotly.Table)\n\n[ ` Table.graph_object ` ](contrib/plotly/#subgrounds.contrib.plotly.Table.graph_object)\n\n[ ` Box ` ](contrib/plotly/#subgrounds.contrib.plotly.Box)\n\n[ ` Box.graph_object ` ](contrib/plotly/#subgrounds.contrib.plotly.Box.graph_object)\n\n[ ` Violin ` ](contrib/plotly/#subgrounds.contrib.plotly.Violin)\n\n[ ` Violin.graph_object ` ](contrib/plotly/#subgrounds.contrib.plotly.Violin.graph_object)\n\n[ ` Histogram ` ](contrib/plotly/#subgrounds.contrib.plotly.Histogram)\n\n[ ` Histogram.graph_object ` ](contrib/plotly/#subgrounds.contrib.plotly.Histogram.graph_object)\n\n[ ` Histogram2d ` ](contrib/plotly/#subgrounds.contrib.plotly.Histogram2d)\n\n[ ` Histogram2d.graph_object ` ](contrib/plotly/#subgrounds.contrib.plotly.Histogram2d.graph_object)\n\n[ ` Histogram2dContour ` ](contrib/plotly/#subgrounds.contrib.plotly.Histogram2dContour)\n\n[ ` Histogram2dContour.graph_object ` ](contrib/plotly/#subgrounds.contrib.plotly.Histogram2dContour.graph_object)\n\n[ ` Ohlc ` ](contrib/plotly/#subgrounds.contrib.plotly.Ohlc)\n\n[ ` Ohlc.graph_object ` ](contrib/plotly/#subgrounds.contrib.plotly.Ohlc.graph_object)\n\n[ ` Candlestick ` ](contrib/plotly/#subgrounds.contrib.plotly.Candlestick)\n\n[ ` Candlestick.graph_object ` ](contrib/plotly/#subgrounds.contrib.plotly.Candlestick.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "08475c8e-fff7-4bb3-b0f9-9f5f1a21d8a6": {"__data__": {"id_": "08475c8e-fff7-4bb3-b0f9-9f5f1a21d8a6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "e13ed7b0-889d-4963-a78e-4e5c98b0b838", "node_type": null, "metadata": {}, "hash": "47db134219cc4fd9a9d700a1db5232b4d6cfd1c0584b0ee51f12a2defb732b16"}, "3": {"node_id": "befbf254-cc94-4ed5-a97c-982433f389d6", "node_type": null, "metadata": {}, "hash": "072ca6453e2f3ed325114d8052131b3847406c114a9b4ea99a23e2ab7f0c44ed"}}, "hash": "3c6c4ba6b09598873323fcc2f0ebea30b82b6a084241577c1900c8daa00902cb", "text": "graph_object)\n\n[ ` Waterfall ` ](contrib/plotly/#subgrounds.contrib.plotly.Waterfall)\n\n[ ` Waterfall.graph_object ` ](contrib/plotly/#subgrounds.contrib.plotly.Waterfall.graph_object)\n\n[ ` Funnel ` ](contrib/plotly/#subgrounds.contrib.plotly.Funnel)\n\n[ ` Funnel.graph_object ` ](contrib/plotly/#subgrounds.contrib.plotly.Funnel.graph_object)\n\n[ ` Indicator ` ](contrib/plotly/#subgrounds.contrib.plotly.Indicator)\n\n[ ` Indicator.graph_object ` ](contrib/plotly/#subgrounds.contrib.plotly.Indicator.graph_object)\n\n[ ` Scatter3d ` ](contrib/plotly/#subgrounds.contrib.plotly.Scatter3d)\n\n[ ` Scatter3d.graph_object ` ](contrib/plotly/#subgrounds.contrib.plotly.Scatter3d.graph_object)\n\n[ ` Surface ` ](contrib/plotly/#subgrounds.contrib.plotly.Surface)\n\n[ ` Surface.graph_object ` ](contrib/plotly/#subgrounds.contrib.plotly.Surface.graph_object)\n\n[ ` Scattergeo ` ](contrib/plotly/#subgrounds.contrib.plotly.Scattergeo)\n\n[ ` Scattergeo.graph_object ` ](contrib/plotly/#subgrounds.contrib.plotly.Scattergeo.graph_object)\n\n[ ` Choropleth ` ](contrib/plotly/#subgrounds.contrib.plotly.Choropleth)\n\n[ ` Choropleth.graph_object ` ](contrib/plotly/#subgrounds.contrib.plotly.Choropleth.graph_object)\n\n[ ` Scattermapbox ` ](contrib/plotly/#subgrounds.contrib.plotly.Scattermapbox)\n\n[ ` Scattermapbox.graph_object ` ](contrib/plotly/#subgrounds.contrib.plotly.Scattermapbox.graph_object)\n\n[ ` Choroplethmapbox ` ](contrib/plotly/#subgrounds.contrib.plotly.Choroplethmapbox)\n\n[ ` Choroplethmapbox.graph_object ` ](contrib/plotly/#subgrounds.contrib.plotly.Choroplethmapbox.graph_object)\n\n[ ` Densitymapbox ` ](contrib/plotly/#subgrounds.contrib.plotly.Densitymapbox)\n\n[ ` Densitymapbox.graph_object ` ](contrib/plotly/#subgrounds.contrib.plotly.Densitymapbox.graph_object)\n\n[ ` Scatterpolar ` ](contrib/plotly/#subgrounds.contrib.plotly.Scatterpolar)\n\n[ ` Scatterpolar.graph_object ` ](contrib/plotly/#subgrounds.contrib.plotly.Scatterpolar.graph_object)\n\n[ ` Barpolar ` ](contrib/plotly/#subgrounds.contrib.plotly.Barpolar)\n\n[ ` Barpolar.graph_object ` ](contrib/plotly/#subgrounds.contrib.plotly.Barpolar.graph_object)\n\n[ ` Sunburst ` ](contrib/plotly/#subgrounds.contrib.plotly.Sunburst)\n\n[ ` Sunburst.graph_object ` ](contrib/plotly/#subgrounds.contrib.plotly.Sunburst.graph_object)\n\n[ ` Treemap ` ](contrib/plotly/#subgrounds.contrib.plotly.Treemap)\n\n[ ` Treemap.graph_object ` ](contrib/plotly/#subgrounds.contrib.plotly.Treemap.graph_object)\n\n[ ` Icicle ` ](contrib/plotly/#subgrounds.contrib.plotly.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "befbf254-cc94-4ed5-a97c-982433f389d6": {"__data__": {"id_": "befbf254-cc94-4ed5-a97c-982433f389d6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "08475c8e-fff7-4bb3-b0f9-9f5f1a21d8a6", "node_type": null, "metadata": {}, "hash": "3c6c4ba6b09598873323fcc2f0ebea30b82b6a084241577c1900c8daa00902cb"}, "3": {"node_id": "2f31b042-3456-4641-9cf9-9621f23c3d55", "node_type": null, "metadata": {}, "hash": "95e43d5a2ca153edf2efb1aeb1e1b7386a91fe52aecfc34e1065073d9ba8df82"}}, "hash": "072ca6453e2f3ed325114d8052131b3847406c114a9b4ea99a23e2ab7f0c44ed", "text": "Icicle)\n\n[ ` Icicle.graph_object ` ](contrib/plotly/#subgrounds.contrib.plotly.Icicle.graph_object)\n\n[ ` Sankey ` ](contrib/plotly/#subgrounds.contrib.plotly.Sankey)\n\n[ ` Sankey.graph_object ` ](contrib/plotly/#subgrounds.contrib.plotly.Sankey.graph_object)\n\n[ ` Parcoords ` ](contrib/plotly/#subgrounds.contrib.plotly.Parcoords)\n\n[ ` Parcoords.graph_object ` ](contrib/plotly/#subgrounds.contrib.plotly.Parcoords.graph_object)\n\n[ ` Parcats ` ](contrib/plotly/#subgrounds.contrib.plotly.Parcats)\n\n[ ` Parcats.graph_object ` ](contrib/plotly/#subgrounds.contrib.plotly.Parcats.graph_object)\n\n[ ` Carpet ` ](contrib/plotly/#subgrounds.contrib.plotly.Carpet)\n\n[ ` Carpet.graph_object ` ](contrib/plotly/#subgrounds.contrib.plotly.Carpet.graph_object)\n\n[ ` Scattercarpet ` ](contrib/plotly/#subgrounds.contrib.plotly.Scattercarpet)\n\n[ ` Scattercarpet.graph_object ` ](contrib/plotly/#subgrounds.contrib.plotly.Scattercarpet.graph_object)\n\n[ ` Contourcarpet ` ](contrib/plotly/#subgrounds.contrib.plotly.Contourcarpet)\n\n[ ` Contourcarpet.graph_object ` ](contrib/plotly/#subgrounds.contrib.plotly.Contourcarpet.graph_object)\n\n[ Dash ](contrib/dash/)\n\n[ ` Refreshable ` ](contrib/dash/#subgrounds.contrib.dash.Refreshable)\n\n[ ` Graph ` ](contrib/dash/#subgrounds.contrib.dash.Graph)\n\n[ ` DataTable ` ](contrib/dash/#subgrounds.contrib.dash.DataTable)\n\n[ ` AutoUpdate ` ](contrib/dash/#subgrounds.contrib.dash.AutoUpdate)\n\n[ Pagination ](pagination/)\n\n[ Strategies ](pagination/strategies/)\n\n[ ` StopPagination ` ](pagination/strategies/#subgrounds.pagination.strategies.StopPagination)\n\n[ ` SkipPagination ` ](pagination/strategies/#subgrounds.pagination.strategies.SkipPagination)\n\n[ ` LegacyStrategyArgGenerator ` ](pagination/strategies/#subgrounds.pagination.strategies.LegacyStrategyArgGenerator)\n\n[ ` LegacyStrategyArgGenerator.Cursor ` ](pagination/strategies/#subgrounds.pagination.strategies.LegacyStrategyArgGenerator.Cursor)\n\n[ ` ShallowStrategyArgGenerator ` ](pagination/strategies/#subgrounds.pagination.strategies.ShallowStrategyArgGenerator)\n\n[ ` ShallowStrategyArgGenerator.Cursor ` ](pagination/strategies/#subgrounds.pagination.strategies.ShallowStrategyArgGenerator.Cursor)\n\n[ Preprocess ](pagination/preprocess/)\n\n[ ` PaginationNode ` ](pagination/preprocess/#subgrounds.pagination.preprocess.PaginationNode)\n\n[ ` PaginationNode.node_idx ` ](pagination/preprocess/#subgrounds.pagination.preprocess.PaginationNode.node_idx)\n\n[ ` PaginationNode.filter_field ` ](pagination/preprocess/#subgrounds.pagination.preprocess.PaginationNode.filter_field)\n\n[ ` PaginationNode.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2f31b042-3456-4641-9cf9-9621f23c3d55": {"__data__": {"id_": "2f31b042-3456-4641-9cf9-9621f23c3d55", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "befbf254-cc94-4ed5-a97c-982433f389d6", "node_type": null, "metadata": {}, "hash": "072ca6453e2f3ed325114d8052131b3847406c114a9b4ea99a23e2ab7f0c44ed"}, "3": {"node_id": "36f64dad-b373-42ca-8ef0-993a521b1aae", "node_type": null, "metadata": {}, "hash": "c09002851a208d3407cb3a6f4edb3999687ffb6c6f5fc171bfceb3d54b2d72cd"}}, "hash": "95e43d5a2ca153edf2efb1aeb1e1b7386a91fe52aecfc34e1065073d9ba8df82", "text": "first_value ` ](pagination/preprocess/#subgrounds.pagination.preprocess.PaginationNode.first_value)\n\n[ ` PaginationNode.skip_value ` ](pagination/preprocess/#subgrounds.pagination.preprocess.PaginationNode.skip_value)\n\n[ ` PaginationNode.filter_value ` ](pagination/preprocess/#subgrounds.pagination.preprocess.PaginationNode.filter_value)\n\n[ ` PaginationNode.filter_value_type ` ](pagination/preprocess/#subgrounds.pagination.preprocess.PaginationNode.filter_value_type)\n\n[ ` PaginationNode.key_path ` ](pagination/preprocess/#subgrounds.pagination.preprocess.PaginationNode.key_path)\n\n[ ` PaginationNode.inner ` ](pagination/preprocess/#subgrounds.pagination.preprocess.PaginationNode.inner)\n\n[ ` PaginationNode.get_vardefs() ` ](pagination/preprocess/#subgrounds.pagination.preprocess.PaginationNode.get_vardefs)\n\n[ ` normalize() ` ](pagination/preprocess/#subgrounds.pagination.preprocess.normalize)\n\n[ Pagination ](pagination/pagination/)\n\n[ ` PaginationError ` ](pagination/pagination/#subgrounds.pagination.pagination.PaginationError)\n\n[ ` PaginationStrategy ` ](pagination/pagination/#subgrounds.pagination.pagination.PaginationStrategy)\n\n[ ` PaginationStrategy.step() ` ](pagination/pagination/#subgrounds.pagination.pagination.PaginationStrategy.step)\n\n[ ` paginate() ` ](pagination/pagination/#subgrounds.pagination.pagination.paginate)\n\n[ ` paginate_iter() ` ](pagination/pagination/#subgrounds.pagination.pagination.paginate_iter)\n\n[ Utils ](pagination/utils/)\n\n[ ` merge() ` ](pagination/utils/#subgrounds.pagination.utils.merge)\n\n[ ` merge_input_value_object_metas() ` ](pagination/utils/#subgrounds.pagination.utils.merge_input_value_object_metas)\n\n[ ` normalize() ` ](pagination/#subgrounds.pagination.normalize)\n\n[ ` paginate_iter() ` ](pagination/#subgrounds.pagination.paginate_iter)\n\n[ ` paginate() ` ](pagination/#subgrounds.pagination.paginate)\n\n[ ` PaginationError ` ](pagination/#subgrounds.pagination.PaginationError)\n\n[ ` PaginationNode ` ](pagination/#subgrounds.pagination.PaginationNode)\n\n[ ` PaginationNode.node_idx ` ](pagination/#subgrounds.pagination.PaginationNode.node_idx)\n\n[ ` PaginationNode.filter_field ` ](pagination/#subgrounds.pagination.PaginationNode.filter_field)\n\n[ ` PaginationNode.first_value ` ](pagination/#subgrounds.pagination.PaginationNode.first_value)\n\n[ ` PaginationNode.skip_value ` ](pagination/#subgrounds.pagination.PaginationNode.skip_value)\n\n[ ` PaginationNode.filter_value ` ](pagination/#subgrounds.pagination.PaginationNode.filter_value)\n\n[ ` PaginationNode.filter_value_type ` ](pagination/#subgrounds.pagination.PaginationNode.filter_value_type)\n\n[ ` PaginationNode.key_path ` ](pagination/#subgrounds.pagination.PaginationNode.key_path)\n\n[ ` PaginationNode.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "36f64dad-b373-42ca-8ef0-993a521b1aae": {"__data__": {"id_": "36f64dad-b373-42ca-8ef0-993a521b1aae", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "2f31b042-3456-4641-9cf9-9621f23c3d55", "node_type": null, "metadata": {}, "hash": "95e43d5a2ca153edf2efb1aeb1e1b7386a91fe52aecfc34e1065073d9ba8df82"}, "3": {"node_id": "1dddc5f7-7a51-4188-8168-bdefb4497934", "node_type": null, "metadata": {}, "hash": "fd844798c93f99cf14491b979ffe60e7e73a0af97685cc1b0699025f3ceecbac"}}, "hash": "c09002851a208d3407cb3a6f4edb3999687ffb6c6f5fc171bfceb3d54b2d72cd", "text": "inner ` ](pagination/#subgrounds.pagination.PaginationNode.inner)\n\n[ ` PaginationNode.get_vardefs() ` ](pagination/#subgrounds.pagination.PaginationNode.get_vardefs)\n\n[ ` PaginationStrategy ` ](pagination/#subgrounds.pagination.PaginationStrategy)\n\n[ ` PaginationStrategy.step() ` ](pagination/#subgrounds.pagination.PaginationStrategy.step)\n\n[ Transform ](transform/)\n\n[ ABCs ](transform/abcs/)\n\n[ Apply ](transform/apply/)\n\n[ Defaults ](transform/defaults/)\n\n[ Transforms ](transform/transforms/)\n\n[ Utils ](transform/utils/)\n\n[ ` RequestTransform ` ](transform/#subgrounds.transform.RequestTransform)\n\n[ ` RequestTransform.transform_request() ` ](transform/#subgrounds.transform.RequestTransform.transform_request)\n\n[ ` RequestTransform.transform_response() ` ](transform/#subgrounds.transform.RequestTransform.transform_response)\n\n[ ` DocumentTransform ` ](transform/#subgrounds.transform.DocumentTransform)\n\n[ ` DocumentTransform.transform_document() ` ](transform/#subgrounds.transform.DocumentTransform.transform_document)\n\n[ ` DocumentTransform.transform_response() ` ](transform/#subgrounds.transform.DocumentTransform.transform_response)\n\n[ ` TypeTransform ` ](transform/#subgrounds.transform.TypeTransform)\n\n[ ` TypeTransform.type_ ` ](transform/#subgrounds.transform.TypeTransform.type_)\n\n[ ` TypeTransform.f ` ](transform/#subgrounds.transform.TypeTransform.f)\n\n[ ` TypeTransform.transform_document() ` ](transform/#subgrounds.transform.TypeTransform.transform_document)\n\n[ ` TypeTransform.transform_response() ` ](transform/#subgrounds.transform.TypeTransform.transform_response)\n\n[ ` LocalSyntheticField ` ](transform/#subgrounds.transform.LocalSyntheticField)\n\n[ ` LocalSyntheticField.subgraph ` ](transform/#subgrounds.transform.LocalSyntheticField.subgraph)\n\n[ ` LocalSyntheticField.fmeta ` ](transform/#subgrounds.transform.LocalSyntheticField.fmeta)\n\n[ ` LocalSyntheticField.type_ ` ](transform/#subgrounds.transform.LocalSyntheticField.type_)\n\n[ ` LocalSyntheticField.f ` ](transform/#subgrounds.transform.LocalSyntheticField.f)\n\n[ ` LocalSyntheticField.default ` ](transform/#subgrounds.transform.LocalSyntheticField.default)\n\n[ ` LocalSyntheticField.args ` ](transform/#subgrounds.transform.LocalSyntheticField.args)\n\n[ ` LocalSyntheticField.transform_document() ` ](transform/#subgrounds.transform.LocalSyntheticField.transform_document)\n\n[ ` LocalSyntheticField.transform_response() ` ](transform/#subgrounds.transform.LocalSyntheticField.transform_response)\n\n[ ` SplitTransform ` ](transform/#subgrounds.transform.SplitTransform)\n\n[ ` SplitTransform.transform_request() ` ](transform/#subgrounds.transform.SplitTransform.transform_request)\n\n[ ` SplitTransform.transform_response() ` ](transform/#subgrounds.transform.SplitTransform.transform_response)\n\n[ Subgraph ](subgraph/)\n\n[ Fieldpath ](subgraph/fieldpath/)\n\n[ ` fieldpaths_of_object() ` ](subgraph/fieldpath/#subgrounds.subgraph.fieldpath.fieldpaths_of_object)\n\n[ ` FieldPath ` ](subgraph/fieldpath/#subgrounds.subgraph.fieldpath.FieldPath)\n\n[ ` FieldPath._root ` ](subgraph/fieldpath/#subgrounds.subgraph.fieldpath.FieldPath._root)\n\n[ ` FieldPath._leaf ` ](subgraph/fieldpath/#subgrounds.subgraph.fieldpath.FieldPath._leaf)\n\n[ ` FieldPath.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1dddc5f7-7a51-4188-8168-bdefb4497934": {"__data__": {"id_": "1dddc5f7-7a51-4188-8168-bdefb4497934", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "36f64dad-b373-42ca-8ef0-993a521b1aae", "node_type": null, "metadata": {}, "hash": "c09002851a208d3407cb3a6f4edb3999687ffb6c6f5fc171bfceb3d54b2d72cd"}, "3": {"node_id": "62814325-a688-4d18-a881-6392055f6b7e", "node_type": null, "metadata": {}, "hash": "eec4b4932987edc1f900a61357bdfdcbc8cfcff44eb29a11a92912c8d14790d5"}}, "hash": "fd844798c93f99cf14491b979ffe60e7e73a0af97685cc1b0699025f3ceecbac", "text": "_merge() ` ](subgraph/fieldpath/#subgrounds.subgraph.fieldpath.FieldPath._merge)\n\n[ ` FieldPath._name_path() ` ](subgraph/fieldpath/#subgrounds.subgraph.fieldpath.FieldPath._name_path)\n\n[ ` FieldPath._name() ` ](subgraph/fieldpath/#subgrounds.subgraph.fieldpath.FieldPath._name)\n\n[ ` FieldPath._extract_data() ` ](subgraph/fieldpath/#subgrounds.subgraph.fieldpath.FieldPath._extract_data)\n\n[ ` FieldPath._selection() ` ](subgraph/fieldpath/#subgrounds.subgraph.fieldpath.FieldPath._selection)\n\n[ ` FieldPath._set_arguments() ` ](subgraph/fieldpath/#subgrounds.subgraph.fieldpath.FieldPath._set_arguments)\n\n[ ` FieldPath._select() ` ](subgraph/fieldpath/#subgrounds.subgraph.fieldpath.FieldPath._select)\n\n[ ` FieldPath._extend() ` ](subgraph/fieldpath/#subgrounds.subgraph.fieldpath.FieldPath._extend)\n\n[ ` SyntheticField ` ](subgraph/fieldpath/#subgrounds.subgraph.fieldpath.SyntheticField)\n\n[ ` SyntheticField.constant() ` ](subgraph/fieldpath/#subgrounds.subgraph.fieldpath.SyntheticField.constant)\n\n[ ` SyntheticField.datetime_of_timestamp() ` ](subgraph/fieldpath/#subgrounds.subgraph.fieldpath.SyntheticField.datetime_of_timestamp)\n\n[ ` SyntheticField.map() ` ](subgraph/fieldpath/#subgrounds.subgraph.fieldpath.SyntheticField.map)\n\n[ Filter ](subgraph/filter/)\n\n[ ` Filter ` ](subgraph/filter/#subgrounds.subgraph.filter.Filter)\n\n[ ` Filter.Operator ` ](subgraph/filter/#subgrounds.subgraph.filter.Filter.Operator)\n\n[ Object ](subgraph/object/)\n\n[ ` Object ` ](subgraph/object/#subgrounds.subgraph.object.Object)\n\n[ ` Object._select() ` ](subgraph/object/#subgrounds.subgraph.object.Object._select)\n\n[ Subgraph ](subgraph/subgraph/)\n\n[ ` Subgraph ` ](subgraph/subgraph/#subgrounds.subgraph.subgraph.Subgraph)\n\n[ ` FieldPath ` ](subgraph/#subgrounds.subgraph.FieldPath)\n\n[ ` Filter ` ](subgraph/#subgrounds.subgraph.Filter)\n\n[ ` Filter.Operator ` ](subgraph/#subgrounds.subgraph.Filter.Operator)\n\n[ ` Object ` ](subgraph/#subgrounds.subgraph.Object)\n\n[ ` Subgraph ` ](subgraph/#subgrounds.subgraph.Subgraph)\n\n[ ` SyntheticField ` ](subgraph/#subgrounds.subgraph.SyntheticField)\n\n[ ` SyntheticField.constant() ` ](subgraph/#subgrounds.subgraph.SyntheticField.constant)\n\n[ ` SyntheticField.datetime_of_timestamp() ` ](subgraph/#subgrounds.subgraph.SyntheticField.datetime_of_timestamp)\n\n[ ` SyntheticField.map() ` ](subgraph/#subgrounds.subgraph.SyntheticField.map)\n\n[ Errors ](errors/)\n\n[ ` SubgroundsError ` ](errors/#subgrounds.errors.SubgroundsError)\n\n[ ` SchemaError ` ](errors/#subgrounds.errors.SchemaError)\n\n[ ` TransformError ` ](errors/#subgrounds.errors.TransformError)\n\n[ ` ServerError ` ](errors/#subgrounds.errors.ServerError)\n\n[ ` GraphQLError ` ](errors/#subgrounds.errors.GraphQLError)\n\n[ Query ](query/)\n\n[ ` VariableDefinition ` ](query/#subgrounds.query.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "62814325-a688-4d18-a881-6392055f6b7e": {"__data__": {"id_": "62814325-a688-4d18-a881-6392055f6b7e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "1dddc5f7-7a51-4188-8168-bdefb4497934", "node_type": null, "metadata": {}, "hash": "fd844798c93f99cf14491b979ffe60e7e73a0af97685cc1b0699025f3ceecbac"}, "3": {"node_id": "7293036a-853a-44ff-8f27-3930add251c7", "node_type": null, "metadata": {}, "hash": "bb4c21182f596af8f0e39a88c4402b31852dedbba3815d3177da64453f7fdda1"}}, "hash": "eec4b4932987edc1f900a61357bdfdcbc8cfcff44eb29a11a92912c8d14790d5", "text": "VariableDefinition)\n\n[ ` VariableDefinition.name ` ](query/#subgrounds.query.VariableDefinition.name)\n\n[ ` VariableDefinition.type_ ` ](query/#subgrounds.query.VariableDefinition.type_)\n\n[ ` VariableDefinition.default ` ](query/#subgrounds.query.VariableDefinition.default)\n\n[ ` VariableDefinition.graphql ` ](query/#subgrounds.query.VariableDefinition.graphql)\n\n[ ` Argument ` ](query/#subgrounds.query.Argument)\n\n[ ` Selection ` ](query/#subgrounds.query.Selection)\n\n[ ` Selection.fmeta ` ](query/#subgrounds.query.Selection.fmeta)\n\n[ ` Selection.alias ` ](query/#subgrounds.query.Selection.alias)\n\n[ ` Selection.arguments ` ](query/#subgrounds.query.Selection.arguments)\n\n[ ` Selection.selection ` ](query/#subgrounds.query.Selection.selection)\n\n[ ` Selection.iter() ` ](query/#subgrounds.query.Selection.iter)\n\n[ ` Selection.iter_args() ` ](query/#subgrounds.query.Selection.iter_args)\n\n[ ` Selection.filter() ` ](query/#subgrounds.query.Selection.filter)\n\n[ ` Selection.filter_args() ` ](query/#subgrounds.query.Selection.filter_args)\n\n[ ` Selection.map() ` ](query/#subgrounds.query.Selection.map)\n\n[ ` Selection.map_args() ` ](query/#subgrounds.query.Selection.map_args)\n\n[ ` Selection.contains_list() ` ](query/#subgrounds.query.Selection.contains_list)\n\n[ ` Selection.split() ` ](query/#subgrounds.query.Selection.split)\n\n[ ` Selection.add() ` ](query/#subgrounds.query.Selection.add)\n\n[ ` Selection.remove() ` ](query/#subgrounds.query.Selection.remove)\n\n[ ` Selection.variable_args() ` ](query/#subgrounds.query.Selection.variable_args)\n\n[ ` Selection.merge() ` ](query/#subgrounds.query.Selection.merge)\n\n[ ` Selection.contains() ` ](query/#subgrounds.query.Selection.contains)\n\n[ ` Selection.contains_argument() ` ](query/#subgrounds.query.Selection.contains_argument)\n\n[ ` Selection.get_argument() ` ](query/#subgrounds.query.Selection.get_argument)\n\n[ ` Selection.get_argument_by_variable() ` ](query/#subgrounds.query.Selection.get_argument_by_variable)\n\n[ ` Selection.substitute_arg() ` ](query/#subgrounds.query.Selection.substitute_arg)\n\n[ ` Selection.prune_undefined() ` ](query/#subgrounds.query.Selection.prune_undefined)\n\n[ ` Query ` ](query/#subgrounds.query.Query)\n\n[ ` Query.graphql ` ](query/#subgrounds.query.Query.graphql)\n\n[ ` Query.iter() ` ](query/#subgrounds.query.Query.iter)\n\n[ ` Query.iter_args() ` ](query/#subgrounds.query.Query.iter_args)\n\n[ ` Query.iter_vardefs() ` ](query/#subgrounds.query.Query.iter_vardefs)\n\n[ ` Query.filter() ` ](query/#subgrounds.query.Query.filter)\n\n[ ` Query.filter_args() ` ](query/#subgrounds.query.Query.filter_args)\n\n[ ` Query.map() ` ](query/#subgrounds.query.Query.map)\n\n[ ` Query.map_args() ` ](query/#subgrounds.query.Query.map_args)\n\n[ ` Query.add() ` ](query/#subgrounds.query.Query.add)\n\n[ ` Query.remove() ` ](query/#subgrounds.query.Query.remove)\n\n[ ` Query.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7293036a-853a-44ff-8f27-3930add251c7": {"__data__": {"id_": "7293036a-853a-44ff-8f27-3930add251c7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "62814325-a688-4d18-a881-6392055f6b7e", "node_type": null, "metadata": {}, "hash": "eec4b4932987edc1f900a61357bdfdcbc8cfcff44eb29a11a92912c8d14790d5"}, "3": {"node_id": "2e715348-b562-4564-bdda-bec2931f11aa", "node_type": null, "metadata": {}, "hash": "89be416eb8f58f2722dba575b9aa390bd7bd82e368967b0eda26ce649919e5b3"}}, "hash": "bb4c21182f596af8f0e39a88c4402b31852dedbba3815d3177da64453f7fdda1", "text": "contains_selection() ` ](query/#subgrounds.query.Query.contains_selection)\n\n[ ` Query.contains() ` ](query/#subgrounds.query.Query.contains)\n\n[ ` Query.select() ` ](query/#subgrounds.query.Query.select)\n\n[ ` Fragment ` ](query/#subgrounds.query.Fragment)\n\n[ ` Document ` ](query/#subgrounds.query.Document)\n\n[ ` Document.map() ` ](query/#subgrounds.query.Document.map)\n\n[ ` Document.map_args() ` ](query/#subgrounds.query.Document.map_args)\n\n[ ` Document.prune_undefined() ` ](query/#subgrounds.query.Document.prune_undefined)\n\n[ ` DataRequest ` ](query/#subgrounds.query.DataRequest)\n\n[ ` selections_of_object() ` ](query/#subgrounds.query.selections_of_object)\n\n[ Schema ](schema/)\n\n[ ` SchemaMeta ` ](schema/#subgrounds.schema.SchemaMeta)\n\n[ ` SchemaMeta.type_of_typeref() ` ](schema/#subgrounds.schema.SchemaMeta.type_of_typeref)\n\n[ ` SchemaMeta.type_of() ` ](schema/#subgrounds.schema.SchemaMeta.type_of)\n\n[ ` SchemaMeta.type_of_input_object_meta() ` ](schema/#subgrounds.schema.SchemaMeta.type_of_input_object_meta)\n\n[ Utils ](utils/)\n\n[ ` flatten_dict() ` ](utils/#subgrounds.utils.flatten_dict)\n\n[ ` contains_list() ` ](utils/#subgrounds.utils.contains_list)\n\n[ ` default_header() ` ](utils/#subgrounds.utils.default_header)\n\n[ ` user_agent() ` ](utils/#subgrounds.utils.user_agent)\n\n[ ` DataFrameColumns ` ](utils/#subgrounds.dataframe_utils.DataFrameColumns)\n\n[ ` DataFrameColumns.combine() ` ](utils/#subgrounds.dataframe_utils.DataFrameColumns.combine)\n\n[ ` DataFrameColumns.mk_df() ` ](utils/#subgrounds.dataframe_utils.DataFrameColumns.mk_df)\n\n[ ` columns_of_selections() ` ](utils/#subgrounds.dataframe_utils.columns_of_selections)\n\n[ ` df_of_json() ` ](utils/#subgrounds.dataframe_utils.df_of_json)\n\n## Module contents #\n\n_ class _ subgrounds.FieldPath ( _ subgraph : 'Subgraph' _ , _ root_type : 'TypeRef.T' _ , _ type_ : 'TypeRef.T' _ , _ path : 'list[Tuple[Optional[dict[str, Any]], TypeMeta.FieldMeta]]' _ ) #\n\nBases: ` FieldOperatorMixin `\n\n_ class _ subgrounds.Subgraph ( _ url: 'str', schema: 'SchemaMeta', transforms: 'list[DocumentTransform]' = [<subgrounds.transform.TypeTransform object at 0x7fba98ae0580>, <subgrounds.transform.TypeTransform object at 0x7fba98ae0640>], is_subgraph: 'bool' = True _ ) #\n\nBases: [ ` object ` ](https://docs.python.org/3/library/functions.html#object \"\\(in Python v3.11\\)\")\n\n_ class _ subgrounds.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2e715348-b562-4564-bdda-bec2931f11aa": {"__data__": {"id_": "2e715348-b562-4564-bdda-bec2931f11aa", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "7293036a-853a-44ff-8f27-3930add251c7", "node_type": null, "metadata": {}, "hash": "bb4c21182f596af8f0e39a88c4402b31852dedbba3815d3177da64453f7fdda1"}, "3": {"node_id": "db86de7b-957b-47ed-b579-5bf321cdb005", "node_type": null, "metadata": {}, "hash": "b5824edf744c587e99136d9ecb9df53adc96fdcec5a1da325926d816da40a4ee"}}, "hash": "89be416eb8f58f2722dba575b9aa390bd7bd82e368967b0eda26ce649919e5b3", "text": "Subgrounds ( _ headers: dict[str _ , _ typing.Any] = <factory> _ , _ global_transforms: list[subgrounds.transform.RequestTransform] = <factory> _ , _ subgraphs: dict[str _ , _ subgrounds.subgraph.subgraph.Subgraph] = <factory> _ ) #\n\nBases: [ ` object ` ](https://docs.python.org/3/library/functions.html#object \"\\(in Python v3.11\\)\")\n\nheaders _ : [ dict ](https://docs.python.org/3/library/stdtypes.html#dict \"\\(in Python v3.11\\)\") [ [ str ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") , [ Any ](https://docs.python.org/3/library/typing.html#typing.Any \"\\(in Python v3.11\\)\") ] _ #\n\nglobal_transforms _ : [ list ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") [ [ subgrounds.transform.RequestTransform ](transform/#subgrounds.transform.RequestTransform \"subgrounds.transform.RequestTransform\") ] _ #\n\nsubgraphs _ : [ dict ](https://docs.python.org/3/library/stdtypes.html#dict \"\\(in Python v3.11\\)\") [ [ str ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") , [ subgrounds.subgraph.subgraph.Subgraph ](subgraph/subgraph/#subgrounds.subgraph.subgraph.Subgraph \"subgrounds.subgraph.subgraph.Subgraph\") ] _ #\n\n_ classmethod _ from_pg_key ( _ key _ ) #\n\nload ( _ url _ , _ save_schema = False _ , _ cache_dir = 'schemas/' _ , _ is_subgraph = True _ ) #\n\nload_subgraph ( _ url _ , _ save_schema = False _ , _ cache_dir = 'schemas/' _ ) #\n\nPerforms introspection on the provided GraphQL API ` url ` to get the schema, stores the schema if ` save_schema ` is ` True ` and returns a generated class representing the subgraph with all its entities.Parameters :\n\n\n\n**url\n\n** ( [ _str_ ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") )\n\n-- The url of the API\n\nReturns :\n\nA generated class representing the subgraph and its entities\n\nReturn type :\n\n[ Subgraph ](../top_level/#subgrounds.Subgraph \"subgrounds.Subgraph\")\n\nload_api ( _ url _ , _ save_schema = False _ , _ cache_dir = 'schemas/' _ ) #\n\nPerforms introspection on the provided GraphQL API ` url ` to get the schema, stores the schema if ` save_schema ` is ` True ` and returns a generated class representing the GraphQL endpoint with all its entities.\n\nParameters :", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "db86de7b-957b-47ed-b579-5bf321cdb005": {"__data__": {"id_": "db86de7b-957b-47ed-b579-5bf321cdb005", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "2e715348-b562-4564-bdda-bec2931f11aa", "node_type": null, "metadata": {}, "hash": "89be416eb8f58f2722dba575b9aa390bd7bd82e368967b0eda26ce649919e5b3"}, "3": {"node_id": "a282b293-4e32-441f-9c6c-a4fbbec494a9", "node_type": null, "metadata": {}, "hash": "6a1f745a444249724c155f343d4749a058bd060b2663ae02d9edb351ab33f698"}}, "hash": "b5824edf744c587e99136d9ecb9df53adc96fdcec5a1da325926d816da40a4ee", "text": "**url\n\n** ( [ _str_ ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") )\n\n-- The url of the API\n\nReturns :\n\nA generated class representing the subgraph and its entities\n\nReturn type :\n\n[ Subgraph ](../top_level/#subgrounds.Subgraph \"subgrounds.Subgraph\")\n\nmk_request ( _ fpaths _ ) #\n\nCreates a ` DataRequest ` object by combining one or more [ ` FieldPath ` ](../top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") objects.\n\nParameters :\n\n**fpaths** ( [ _FieldPath_ ](../top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") _|_ [ _list_ ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") _[_ [ _FieldPath_ ](../top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") _]_ ) -- One or more [ ` FieldPath ` ](../top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") objects that should be included in the request\n\nReturns :\n\nA new ` DataRequest ` object\n\nReturn type :\n\n[ DataRequest ](query/#subgrounds.query.DataRequest\n\n\"subgrounds.query.DataRequest\")\n\nexecute ( _ req _ , _ pagination_strategy = LegacyStrategy _ ) #\n\nExecutes a ` DataRequest ` object, sending the underlying query(ies) to the server and returning a data blob (list of Python dictionaries, one per actual query).\n\nParameters :\n\n\n\n**req\n\n** ( [ _DataRequest_ ](query/#subgrounds.query.DataRequest \"subgrounds.query.DataRequest\") )\n\n-- The ` DataRequest ` object to be executed\n\nReturns :\n\nThe reponse data\n\nReturn type :\n\n[ list ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") [ [ dict ](https://docs.python.org/3/library/stdtypes.html#dict \"\\(in Python v3.11\\)\") ]\n\nexecute_iter ( _ req _ , _ pagination_strategy = LegacyStrategy _ ) #\n\nSame as execute , except that an iterator is returned which will iterate the data pages.\n\nParameters :\n\n\n\n**req\n\n** ( [ _DataRequest_ ](query/#subgrounds.query.DataRequest \"subgrounds.query.DataRequest\") )\n\n-- The ` DataRequest ` object to be executed\n\nReturns :\n\nAn iterator over the reponse data pages\n\nReturn type :\n\nIterator[ [ dict ](https://docs.python.org/3/library/stdtypes.html#dict \"\\(in Python v3.11\\)\") ]\n\nquery_json ( _ fpaths _ , _ pagination_strategy = LegacyStrategy _ ) #\n\nEquivalent to ` Subgrounds.execute(Subgrounds.mk_request(fpaths),\n\npagination_strategy) ` .\n\nParameters :", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a282b293-4e32-441f-9c6c-a4fbbec494a9": {"__data__": {"id_": "a282b293-4e32-441f-9c6c-a4fbbec494a9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "db86de7b-957b-47ed-b579-5bf321cdb005", "node_type": null, "metadata": {}, "hash": "b5824edf744c587e99136d9ecb9df53adc96fdcec5a1da325926d816da40a4ee"}, "3": {"node_id": "4f641019-71e3-4fc8-8cc5-ed8e468fed03", "node_type": null, "metadata": {}, "hash": "03528e9f4bb0ff77ba9900040575ea9874a56008c28b15d75ca3f62431b30ed2"}}, "hash": "6a1f745a444249724c155f343d4749a058bd060b2663ae02d9edb351ab33f698", "text": "**fpaths\n\n** ( [ _FieldPath_ ](../top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") _|_ [ _list_ ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") _[_ [ _FieldPath_ ](../top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") _]_ )\n\n-- One or more [ ` FieldPath ` ](../top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") objects that should be included in the request.\n\nReturns :\n\nThe reponse data\n\nReturn type :\n\n[ list ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") [ [ dict ](https://docs.python.org/3/library/stdtypes.html#dict \"\\(in Python v3.11\\)\") [ [ str ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") , Any]]\n\nquery_json_iter ( _ fpaths _ , _ pagination_strategy = LegacyStrategy _ ) #\n\nSame as query_json except an iterator over the response data pages is returned.\n\nParameters :\n\n\n\n**fpaths\n\n** ( [ _FieldPath_ ](../top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") _|_ [ _list_ ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") _[_ [ _FieldPath_ ](../top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") _]_ )\n\n-- One or more [ ` FieldPath ` ](../top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") objects that should be included in the request.\n\nReturns :\n\nThe reponse data\n\nReturn type :\n\n[ list ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") [ [ dict ](https://docs.python.org/3/library/stdtypes.html#dict \"\\(in Python v3.11\\)\") [ [ str ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") , Any]]\n\nquery_df ( _ fpaths _ , _ columns = None _ , _ concat = False _ , _ pagination_strategy = LegacyStrategy _ ) #\n\nSame as [ ` Subgrounds.query() ` ](../top_level/#subgrounds.Subgrounds.query \"subgrounds.Subgrounds.query\") but formats the response data into a Pandas DataFrame. If the response data cannot be flattened to a single query (e.g. : when querying multiple list fields that return different entities), then multiple dataframes are returned\n\n` fpaths ` is a list of [ ` FieldPath ` ](../top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") objects that indicate which data must be queried.\n\n` columns ` is an optional argument used to rename the dataframes(s) columns. The length of ` columns ` must be the same as the number of columns of _all_ returned dataframes.\n\n` concat ` indicates whether or not the resulting dataframes should be concatenated together. The dataframes must have the same number of columns, as well as the same column names and types (the names can be set using the ` columns ` argument).\n\nParameters :", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4f641019-71e3-4fc8-8cc5-ed8e468fed03": {"__data__": {"id_": "4f641019-71e3-4fc8-8cc5-ed8e468fed03", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "a282b293-4e32-441f-9c6c-a4fbbec494a9", "node_type": null, "metadata": {}, "hash": "6a1f745a444249724c155f343d4749a058bd060b2663ae02d9edb351ab33f698"}, "3": {"node_id": "f64074a6-4da7-462a-80d5-28fb3a8596b0", "node_type": null, "metadata": {}, "hash": "0abc4bad0395248e13f9780c545df7b4466ceb00c53622cbaec5f01dc47eb3b2"}}, "hash": "03528e9f4bb0ff77ba9900040575ea9874a56008c28b15d75ca3f62431b30ed2", "text": "**fpaths\n\n** ( [ _FieldPath_ ](../top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") _|_ [ _list_ ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") _[_ [ _FieldPath_ ](../top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") _]_ )\n\n-- One or more FieldPath objects that should be included in the request.\n\nReturns :\n\nA DataFrame containing the reponse data\n\nReturn type :\n\npd.DataFrame | [ list ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") [pd.DataFrame]\n\nExample:\n\n>>> from subgrounds import Subgrounds >>> sg = Subgrounds() >>> univ3 = sg.load_subgraph('https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3')\n\n# Define price SyntheticField >>> univ3.Swap.price = abs(univ3.Swap.amount0) / abs(univ3.Swap.amount1)\n\n# Query last 10 swaps from the ETH/USDC pool >>> eth_usdc = univ3.Query.swaps( ... orderBy=univ3.Swap.timestamp, ... orderDirection='desc', ... first=10, ... where=[ ... univ3.Swap.pool == '0x8ad599c3a0ff1de082011efddc58f1908eb6e6d8' ... ] ... ) >>> sg.query_df([ ... eth_usdc.timestamp, ... eth_usdc.price ... ]) swaps_timestamp swaps_price 0 1643213811 2618.886394 1 1643213792 2618.814281 2 1643213792 2617.500494 3 1643213763 2615.458495 4 1643213763 2615.876574 5 1643213739 2615.352390 6 1643213678 2615.205713 7 1643213370 2614.115746 8 1643213210 2613.077301 9 1643213196 2610.686563\n\nquery_df_iter ( _ fpaths _ , _ pagination_strategy = LegacyStrategy _ ) #\n\nSame as query_df except an iterator over the response data pages is returned :param fpaths: One or more FieldPath objects that\n\n> should be included in the request\n\nParameters :\n\nReturns :\n\nAn iterator over the response data pages, each as a DataFrame\n\nReturn type :\n\nIterator[pd.DataFrame]\n\nquery ( _ fpaths _ , _ unwrap = True _ , _ pagination_strategy = LegacyStrategy _ ) #\n\nExecutes one or multiple ` FieldPath ` objects immediately and return the data (as a tuple if multiple ` FieldPath ` objects are provided).\n\nParameters :", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f64074a6-4da7-462a-80d5-28fb3a8596b0": {"__data__": {"id_": "f64074a6-4da7-462a-80d5-28fb3a8596b0", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "4f641019-71e3-4fc8-8cc5-ed8e468fed03", "node_type": null, "metadata": {}, "hash": "03528e9f4bb0ff77ba9900040575ea9874a56008c28b15d75ca3f62431b30ed2"}, "3": {"node_id": "2691bbf9-b3e6-4658-859b-69102f39a367", "node_type": null, "metadata": {}, "hash": "e067ecc1ba602eb94b3054ce07f180ae248f28fc1a6e25c6cae05cd95b4236ee"}}, "hash": "0abc4bad0395248e13f9780c545df7b4466ceb00c53622cbaec5f01dc47eb3b2", "text": "**fpaths\n\n** ( [ _FieldPath_ ](../top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") _|_ [ _list_ ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") _[_ [ _FieldPath_ ](../top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") _]_ )\n\n-- One or more ` FieldPath ` object(s) to query.\n\nReturns :\n\nThe ` FieldPath ` object(s) data\n\nReturn type :\n\n[ [ type ](https://docs.python.org/3/library/functions.html#type \"\\(in Python v3.11\\)\") ]\n\nExample:\n\n>>> from subgrounds import Subgrounds >>> sg = Subgrounds() >>> univ3 = sg.load_subgraph('https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3')\n\n# Define price SyntheticField >>> univ3.Swap.price = abs(univ3.Swap.amount0) / abs(univ3.Swap.amount1)\n\n# Construct FieldPath to get price of last swap on ETH/USDC pool >>> eth_usdc_last = univ3.Query.swaps( ... orderBy=univ3.Swap.timestamp, ... orderDirection='desc', ... first=1, ... where=[ ... univ3.Swap.pool == '0x8ad599c3a0ff1de082011efddc58f1908eb6e6d8' ... ] ... ).price\n\n# Query last price FieldPath >>> sg.query(eth_usdc_last) 2628.975030015892\n\nquery_iter ( _ fpaths _ , _ unwrap = True _ , _ pagination_strategy = LegacyStrategy _ ) #\n\nSame as query except an iterator over the resonse data pages is returned.\n\nParameters :\n\n\n\n**fpath\n\n** ( [ _FieldPath_ ](../top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") _|_ [ _list_ ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") _[_ [ _FieldPath_ ](../top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") _]_ )\n\n-- One or more ` FieldPath ` object(s) to query.Returns :\n\nAn iterator over the ` FieldPath ` object(s)' data pages\n\nReturn type :\n\nIterator[ [ type ](https://docs.python.org/3/library/functions.html#type \"\\(in Python v3.11\\)\") ]\n\n_ class _ subgrounds.SyntheticField ( _ f : 'Callable' _ , _ type_ : 'TypeRef.T' _ , _ deps : 'list[FieldPath | SyntheticField] | FieldPath | SyntheticField' _ , _ default : 'Any' = None _ ) #\n\nBases: ` FieldOperatorMixin `\n\nkind='SCALAR') _ #\n\nkind='SCALAR') _ #\n\nkind='SCALAR') _ #\n\nkind='SCALAR') _ #\n\n_ static _ default_of_type ( _ type_ _ ) #\n\n_ static _ constant ( _ value _ ) #\n\nReturns a constant ` SyntheticField ` with value ` value ` .Useful for injecting additional static data to a schema or merging entities.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2691bbf9-b3e6-4658-859b-69102f39a367": {"__data__": {"id_": "2691bbf9-b3e6-4658-859b-69102f39a367", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "f64074a6-4da7-462a-80d5-28fb3a8596b0", "node_type": null, "metadata": {}, "hash": "0abc4bad0395248e13f9780c545df7b4466ceb00c53622cbaec5f01dc47eb3b2"}, "3": {"node_id": "d1b4ae7c-35b3-4971-8c54-a7d544831910", "node_type": null, "metadata": {}, "hash": "dd2f404edc522a3438d1b5d50d90c263e553e19c6e2d11d6cbaa4f2a888945ab"}}, "hash": "e067ecc1ba602eb94b3054ce07f180ae248f28fc1a6e25c6cae05cd95b4236ee", "text": "Parameters :\n\n**value** ( [ _str_ ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") _|_ [ _int_ ](https://docs.python.org/3/library/functions.html#int \"\\(in Python v3.11\\)\") _|_ [ _float_ ](https://docs.python.org/3/library/functions.html#float \"\\(in Python v3.11\\)\") _|_ [ _bool_ ](https://docs.python.org/3/library/functions.html#bool \"\\(in Python v3.11\\)\") ) -- The constant field's value\n\nReturns :\n\nThe constant ` SyntheticField `\n\nReturn type :\n\n[ SyntheticField ](../top_level/#subgrounds.SyntheticField\n\n\"subgrounds.SyntheticField\")\n\nExample:\n\n>>> from subgrounds.subgrounds import Subgrounds >>> from subgrounds.subgraph import SyntheticField >>> sg = Subgrounds() >>> univ3 = sg.load_subgraph( ... 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3' ... )\n\n# Create constant SyntheticFields\n\n>>> univ3.Mint.tx_type = SyntheticField.constant('MINT')\n\n>>> univ3.Burn.tx_type = SyntheticField.constant('BURN')\n\n# Last 10 mints and burns >>> mints = univ3.Query.mints( ... first=10, ... orderBy=univ3.Mint.timestamp, ... orderDirection='desc' ... ) >>> burns = univ3.Query.burns( ... first=10, ... orderBy=univ3.Burn.timestamp, ... orderDirection='desc' ... )\n\n# Query mints and burns.Notice that we merge the two entity tables by # setting `concat=True` and overwriting the column names (columns must # match the `FieldPaths`) >>> df = sg.query_df([ . mints.transaction.id, . mints.timestamp, . mints.tx_type, . mints.origin, . mints.amountUSD, . burns.transaction.id, . burns.timestamp, . burns.tx_type, . burns.origin, . burns.amountUSD, . ], columns=['tx_hash', 'timestamp', 'tx_type', 'origin', 'amount_USD'], concat=True)\n\n# Sort the DataFrame >>> df.sort_values(by=['timestamp'], ascending=False) tx_hash timestamp tx_type origin amount_USD 0 0xcbe1bacacc1e64fe613ae5eef2063563bd0057d1e3df. 1656016553 MINT 0x3435e7946d40b1a83c0cf154326fc6b3ca908952 7.879784e+03 1 0xdddaaddf59e5a3abff4feadef83b3ceb023a74424ea7. 1656016284 MINT 0xc747962e7e416e2a582813b1d7ad59eb83077fa6 5.110840e+04 10 0xa7671452c34a3b083083ef81e364489c2c9ee801a3b8. 1656016284 BURN 0xd40db77990bbb30514276b5ac17c3ce5cc9c951f 2.804573e+05 2 0xc132e73975e77c2c2c91fcf332018dfb01aac0ca9471. 1656015853 MINT 0xc747962e7e416e2a582813b1d7ad59eb83077fa6 5.122569e+04 3 0x1444744f4021a2046787c1b7b88cd9ac21f071c65acc. 1656015773 MINT 0xd11aa2e3a000275ed12b87515c9ac0d67b32e7b9 8.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d1b4ae7c-35b3-4971-8c54-a7d544831910": {"__data__": {"id_": "d1b4ae7c-35b3-4971-8c54-a7d544831910", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "2691bbf9-b3e6-4658-859b-69102f39a367", "node_type": null, "metadata": {}, "hash": "e067ecc1ba602eb94b3054ce07f180ae248f28fc1a6e25c6cae05cd95b4236ee"}, "3": {"node_id": "0f956dc1-900b-4f5e-a9f1-62263fb5d0ba", "node_type": null, "metadata": {}, "hash": "0cde4527525385c50525ae0369a35e8d234a1ee420013d7695c6139b3d9e9af7"}}, "hash": "dd2f404edc522a3438d1b5d50d90c263e553e19c6e2d11d6cbaa4f2a888945ab", "text": "897983e+03 4 0x3315617d426fc2b0db5d8dbccd549efaa8f1ae2969ca. 1656015693 MINT 0xb7dd4d134b1794ee848e1af1a62b85d7b2ea9301 0.000000e+00 11 0xcc713daa2dc58cd1f2218c8f438e7fcf04d2e9c7c83d. 1656015278 BURN 0xa7c43e2057d89b6946b8865efc8bee3a4ea7d28d 1.254942e+06 5 0x7bbfae86f0c3c983651bd0671557cd851fc301317c06. 1656015111 MINT 0xac56cee8ccd00d0c1d72ce3415140874552e80f4 3.432075e+04 12 0xea21c3a68a8f0c6a2721a3072e0c8b2edc77f4d2f0d9. 1656014785 BURN 0x0709b103d46d71458a71e5d81230dd688809a53d 2.059106e+04 6 0x3bd369bf45c55cab40c62db81bb3e0684fd85fe2b662.\n\n1656014120 MINT 0x509984bfc0fb24e2d1377cfec224d3afec4c341e 2.517578e+03 13 0x1ea59da77c442479af8fb51501a931260d473e249de7. 1656014018 BURN 0x509984bfc0fb24e2d1377cfec224d3afec4c341e 0.000000e+00 7 0xb9d31ef78b8bf786b422d948dd1fba246710078abff8. 1656013998 MINT 0x22dfec183294d257f80c15d3c9cd47495bdc728c 8.365750e+04 14 0xc5e3ec84a2860e3c3a055ccdced435a67b4aff4dd3be. 1656013946 BURN 0xac56cee8ccd00d0c1d72ce3415140874552e80f4 3.363809e+04 8 0x7c736255d9a4ebf4781069a1b2a929ad89100f1af980. 1656013913 MINT 0x4ce6aea89f059915ae5efbf34a2a8adc544ae09e 4.837287e+04 15 0x95cf56b9eb69aa45048a9b7b3e472df5bc3bfad591cd. 1656013728 BURN 0x4ce6aea89f059915ae5efbf34a2a8adc544ae09e 5.110010e+04 9 0x76dd2bbf43485c224471dd823c2992178f031f27194b. 1656013599 MINT 0x234a644868c419ce0dcdd9fd539762eba47f3759 5.363896e+03 16 0x47e595b02fdcb51ff42a5008e53be7ee3bdf8063b580. 1656013580 BURN 0xaf0fdd39e5d92499b0ed9f68693da99c0ec1e92e 0.000000e+00 17 0xe20ec9702f455d74b3cc1f54fe2f3450604ca5037a72. 1656013455 BURN 0xaf0fdd39e5d92499b0ed9f68693da99c0ec1e92e 0.000000e+00 18 0xac3e95666be3a45fdfbbfa513a114136ea6ecffb9de2.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0f956dc1-900b-4f5e-a9f1-62263fb5d0ba": {"__data__": {"id_": "0f956dc1-900b-4f5e-a9f1-62263fb5d0ba", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "d1b4ae7c-35b3-4971-8c54-a7d544831910", "node_type": null, "metadata": {}, "hash": "dd2f404edc522a3438d1b5d50d90c263e553e19c6e2d11d6cbaa4f2a888945ab"}, "3": {"node_id": "e93e9137-2561-409b-82d4-c320d3fc1b21", "node_type": null, "metadata": {}, "hash": "0385bd0223aad198366a08fee8ba2e1cec78da2baeb06152643c03bfc3a609df"}}, "hash": "0cde4527525385c50525ae0369a35e8d234a1ee420013d7695c6139b3d9e9af7", "text": "1656013237 BURN 0x665d2d2444f2384fb3d96aaa0ea3536b92984dce 2.254100e+05 19 0x01c3424a48c36104ea388482723347f15c0bc1bb1a80. 1656013034 BURN 0x0084ee6c8893c01e252198b56ec127443dc27464 0.000000e+00\n\n_ static _ datetime_of_timestamp ( _ timestamp _ ) #\n\nReturns a ` SyntheticField ` that will transform the ` FieldPath ` ` timestamp ` into a human-readable ISO8601 string.Parameters :\n\n**timestamp** ( [ _FieldPath_ ](../top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") _|_ [ _SyntheticField_ ](../top_level/#subgrounds.SyntheticField \"subgrounds.SyntheticField\") ) -- A ` FieldPath ` representing a Unix timestamp field.Returns :\n\nAn ISO8601 datetime string ` SyntheticField ` .Return type :\n\n[ SyntheticField ](../top_level/#subgrounds.SyntheticField\n\n\"subgrounds.SyntheticField\")\n\nExample:\n\n>>> from subgrounds.subgrounds import Subgrounds >>> from subgrounds.subgraph import SyntheticField >>> sg = Subgrounds() >>> univ3 = sg.load_subgraph( ... 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3' ... )\n\n# Create datetime SyntheticField\n\n>>> univ3.Swap.datetime = SyntheticField.datetime_of_timestamp(univ3.Swap.timestamp)\n\n# Query 100 swaps >>> sg.query_df([ ... univ3.Query.swaps.timestamp, ... univ3.Query.swaps.datetime, ... ]) swaps_timestamp swaps_datetime 0 1625105710 2021-06-30 22:15:10 1 1629253724 2021-08-17 22:28:44 2 1647333277 2022-03-15 04:34:37 3 1630801974 2021-09-04 20:32:54 4 1653240241 2022-05-22 13:24:01 .. ... ... 95 1646128326 2022-03-01 04:52:06 96 1646128326 2022-03-01 04:52:06 97 1626416555 2021-07-16 02:22:35 98 1626416555 2021-07-16 02:22:35 99 1625837291 2021-07-09 09:28:11\n\n_ static _ map ( _ dict _ , _ type_ _ , _ fpath _ , _ default = None _ ) #\n\nReturns a SyntheticField that will map the values of ` fpath ` using the key value pairs in ` dict ` .If a value is not in the dictionary, then ` default ` will be used instead.Parameters :\n\n\n\n**type\n\n** ( _TypeRef.T_ )\n\n-- The type of the resulting field\n\n\n\n**fpath\n\n** ( [ _FieldPath_ ](./top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") _|_ [ _SyntheticField_ ](./top_level/#subgrounds.SyntheticField \"subgrounds.SyntheticField\") )\n\n-- The FieldPath whose values will be mapped using the dictionary\n\nReturns :\n\nA map SyntheticField\n\nReturn type :\n\n[ SyntheticField ](./top_level/#subgrounds.SyntheticField\n\n\"subgrounds.SyntheticField\")\n\nExample:\n\n>>> from subgrounds.subgrounds import Subgrounds >>> from subgrounds.subgraph import SyntheticField >>> sg = Subgrounds() >>> univ3 = sg.load_subgraph( . 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3' . )\n\n# Hand-crafted mapping of pool addresses to symbol >>> pooladdr_symbol_map = { .", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e93e9137-2561-409b-82d4-c320d3fc1b21": {"__data__": {"id_": "e93e9137-2561-409b-82d4-c320d3fc1b21", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "0f956dc1-900b-4f5e-a9f1-62263fb5d0ba", "node_type": null, "metadata": {}, "hash": "0cde4527525385c50525ae0369a35e8d234a1ee420013d7695c6139b3d9e9af7"}, "3": {"node_id": "8b39b92b-eb73-47ca-aae2-3864a235fdfb", "node_type": null, "metadata": {}, "hash": "a257632d18364a809c3414a533abf4364a25b4c65560fc61efe798ce9ddac86d"}}, "hash": "0385bd0223aad198366a08fee8ba2e1cec78da2baeb06152643c03bfc3a609df", "text": "'0x5777d92f208679db4b9778590fa3cab3ac9e2168': 'DAI/USDC-001', . '0x6c6bc977e13df9b0de53b251522280bb72383700': 'DAI/USDC-005', . '0x8ad599c3a0ff1de082011efddc58f1908eb6e6d8': 'USDC/ETH-030', . '0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640': 'USDC/ETH-005', . }\n\n# Create map SyntheticField using our dictionary with 'UNKNOWN' as the # default value >>> univ3.Pool.symbol = SyntheticField.map( . pooladdr_symbol_map, . SyntheticField.STRING, . univ3.Pool.id, . 'UNKNOWN' . )\n\n# Query top 10 pools by TVL >>> pools = univ3.Query.pools( . first=10, . orderBy=univ3.Pool.totalValueLockedUSD, . orderDirection='desc' . ) >>> sg.query_df([ . pools.id, . pools.symbol . ]) pools_id pools_symbol 0 0xa850478adaace4c08fc61de44d8cf3b64f359bec UNKNOWN 1 0x5777d92f208679db4b9778590fa3cab3ac9e2168 DAI/USDC-001 2 0x6c6bc977e13df9b0de53b251522280bb72383700 DAI/USDC-005 3 0x8ad599c3a0ff1de082011efddc58f1908eb6e6d8 USDC/ETH-030 4 0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640 USDC/ETH-005 5 0x3416cf6c708da44db2624d63ea0aaef7113527c6 UNKNOWN 6 0xcbcdf9626bc03e24f779434178a73a0b4bad62ed UNKNOWN 7 0xc63b0708e2f7e69cb8a1df0e1389a98c35a76d52 UNKNOWN 8 0x4585fe77225b41b697c938b018e2ac67ac5a20c0 UNKNOWN 9 0x4e68ccd3e89f51c3074ca5072bbac773960dfa36 UNKNOWN\n\nOn this page\n\nInternal\n\nModule contents\n\n` FieldPath `\n\n` Subgraph `\n\n` Subgrounds `\n\n` Subgrounds.headers `\n\n` Subgrounds.global_transforms `\n\n` Subgrounds.subgraphs `\n\n` Subgrounds.from_pg_key() `\n\n` Subgrounds.load() `\n\n` Subgrounds.load_subgraph() `\n\n` Subgrounds.load_api() `\n\n` Subgrounds.mk_request() `\n\n` Subgrounds.execute() `\n\n` Subgrounds.execute_iter() `\n\n` Subgrounds.query_json() `\n\n` Subgrounds.query_json_iter() `\n\n` Subgrounds.query_df() `\n\n` Subgrounds.query_df_iter() `\n\n` Subgrounds.query() `\n\n` Subgrounds.query_iter() `\n\n` SyntheticField `\n\n` SyntheticField.STRING `\n\n` SyntheticField.INT `\n\n` SyntheticField.FLOAT `\n\n` SyntheticField.BOOL `\n\n` SyntheticField.default_of_type() `\n\n` SyntheticField.constant() `\n\n` SyntheticField.datetime_of_timestamp() `\n\n` SyntheticField.map() `\n\n[ Playgrounds ](././././)\n\nLogo](././././_static/assets/pg\n\n\n\nlogotype", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "8b39b92b-eb73-47ca-aae2-3864a235fdfb": {"__data__": {"id_": "8b39b92b-eb73-47ca-aae2-3864a235fdfb", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "e93e9137-2561-409b-82d4-c320d3fc1b21", "node_type": null, "metadata": {}, "hash": "0385bd0223aad198366a08fee8ba2e1cec78da2baeb06152643c03bfc3a609df"}, "3": {"node_id": "523ccbe2-4bee-4ec3-b060-094cd0db8d2f", "node_type": null, "metadata": {}, "hash": "38f717c41d9ccb502c50e0d536c255e5412655201ab8e5bf60fc6eaf218404e5"}}, "hash": "a257632d18364a809c3414a533abf4364a25b4c65560fc61efe798ce9ddac86d", "text": "primary.svg)\n\n# Client #\n\n[ Base ](base/)\n\n[ Sync ](sync/)\n\n[ Async_ ](async_/)\n\nSmall module containing low level functions related to sending GraphQL http requests.\n\nsubgrounds.client. get_schema ( _ url _ , _ headers _ ) #\n\nRuns the introspection query on the GraphQL API served localed at ` url ` and returns the result. In case of errors, an exception containing the error message is thrown.\n\nParameters :\n\n**url** ( [ _str_ ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") ) -- The url of the GraphQL API\n\nRaises :\n\n\n\n**HttpError\n\n** \\\n\n-- If the request response resulted in an error\n\n[\n\n**ServerError\n\n** ](../errors/#subgrounds.errors.ServerError \"subgrounds.errors.ServerError\") \\\n\n-- If server responds back non\n\njson content\n\n[\n\n**GraphQLError\n\n** ](../errors/#subgrounds.errors.GraphQLError \"subgrounds.errors.GraphQLError\") \\\n\n-- If the GraphQL query failed or other grapql server errors\n\nReturns :\n\nThe GraphQL API's schema in JSON\n\nReturn type :\n\n[ dict ](https://docs.python.org/3/library/stdtypes.html#dict \"\\(in Python v3.11\\)\") [ [ str ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") , Any]\n\nsubgrounds.client. query ( _ url _ , _ query_str _ , _ variables = {} _ , _ headers = {} _ ) #\n\nExecutes the GraphQL query ` query_str ` with variables ` variables ` against the API served at ` url ` and returns the response data. In case of errors, an exception containing the error message is thrown.\n\nParameters :\n\n\n\n**url\n\n** ( [ _str_ ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") )\n\n-- The URL of the GraphQL API\n\n\n\n**query_str\n\n** ( [ _str_ ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") )\n\n-- The GraphQL query string\n\nRaises :\n\n\n\n**HttpError\n\n** \\\n\n-- If the request response resulted in an error\n\n[\n\n**ServerError\n\n** ](../errors/#subgrounds.errors.ServerError \"subgrounds.errors.ServerError\") \\\n\n-- If server responds back non\n\njson content\n\n[\n\n**GraphQLError\n\n** ](../errors/#subgrounds.errors.GraphQLError \"subgrounds.errors.GraphQLError\") \\\n\n-- If the GraphQL query failed or other grapql server errors\n\nReturns :\n\nResponse data\n\nReturn type :\n\n[ dict ](https://docs.python.org/3/library/stdtypes.html#dict \"\\(in Python v3.11\\)\") [ [ str ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") , Any]\n\nOn this page\n\nClient\n\n` get_schema() `\n\n` query() `\n\n[ Playgrounds ](../../../../../)\n\nLogo](../../../../../_static/assets/pg\n\n\n\nlogotype\n\n\n\nprimary.svg)\n\n# Plotly #\n\nSubgrounds Plotly Components\n\nExtending plotly components to be able to understand subgrounds logic.\n\n_ class _ subgrounds.contrib.plotly. TraceWrapper ( _ ** kwargs _ ) #\n\n_ class _ subgrounds.contrib.plotly. Scatter ( _ ** kwargs _ ) #\n\nSee [ https://plotly.com/python/line\n\n\n\nand\n\n\n\nscatter/\n\n](https://plotly.com/python/line\n\n\n\nand", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "523ccbe2-4bee-4ec3-b060-094cd0db8d2f": {"__data__": {"id_": "523ccbe2-4bee-4ec3-b060-094cd0db8d2f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "8b39b92b-eb73-47ca-aae2-3864a235fdfb", "node_type": null, "metadata": {}, "hash": "a257632d18364a809c3414a533abf4364a25b4c65560fc61efe798ce9ddac86d"}, "3": {"node_id": "cc6f9d3e-d61a-4347-818c-e42ebc1fbebf", "node_type": null, "metadata": {}, "hash": "c066db2ee16cd25373dc41cd732f13e26331c964076897f4b276f2979f61281b"}}, "hash": "38f717c41d9ccb502c50e0d536c255e5412655201ab8e5bf60fc6eaf218404e5", "text": "scatter/)\n\ngraph_object #\n\nalias of ` Scatter `\n\n_ class _ subgrounds.contrib.plotly. Pie ( _ ** kwargs _ ) #\n\nSee [ https://plotly.com/python/pie\n\n\n\ncharts/ ](https://plotly.com/python/pie\n\n\n\ncharts/)\n\ngraph_object #\n\nalias of ` Pie `\n\n_ class _ subgrounds.contrib.plotly. Bar ( _ ** kwargs _ ) #\n\nSee [ https://plotly.com/python/bar\n\n\n\ncharts/ ](https://plotly.com/python/bar\n\n\n\ncharts/)\n\ngraph_object #\n\nalias of ` Bar `\n\n_ class _ subgrounds.contrib.plotly. Heatmap ( _ ** kwargs _ ) #\n\nSee [ https://plotly.com/python/heatmaps/\n\n](https://plotly.com/python/heatmaps/)\n\ngraph_object #\n\nalias of ` Heatmap `\n\n_ class _ subgrounds.contrib.plotly. Contour ( _ ** kwargs _ ) #\n\nSee [ https://plotly.com/python/contour\n\n\n\nplots/\n\n](https://plotly.com/python/contour\n\n\n\nplots/)\n\ngraph_object #\n\nalias of ` Contour `\n\n_ class _ subgrounds.contrib.plotly. Table ( _ ** kwargs _ ) #\n\nSee [ https://plotly.com/python/contour\n\n\n\nplots/\n\n](https://plotly.com/python/contour\n\n\n\nplots/)\n\ngraph_object #\n\nalias of ` Table `\n\n_ class _ subgrounds.contrib.plotly. Box ( _ ** kwargs _ ) #\n\nSee [ https://plotly.com/python/box\n\n\n\nplots/ ](https://plotly.com/python/box\n\n\n\nplots/)\n\ngraph_object #\n\nalias of ` Box `\n\n_ class _ subgrounds.contrib.plotly. Violin ( _ ** kwargs _ ) #\n\nSee [ https://plotly.com/python/violin/ ](https://plotly.com/python/violin/)\n\ngraph_object #\n\nalias of ` Violin `\n\n_ class _ subgrounds.contrib.plotly. Histogram ( _ ** kwargs _ ) #\n\nSee [ https://plotly.com/python/histograms/\n\n](https://plotly.com/python/histograms/)\n\ngraph_object #\n\nalias of ` Histogram `\n\n_ class _ subgrounds.contrib.plotly. Histogram2d ( _ ** kwargs _ ) #\n\nSee [ https://plotly.com/python/2D\n\n\n\nHistogram/\n\n](https://plotly.com/python/2D\n\n\n\nHistogram/)\n\ngraph_object #\n\nalias of ` Histogram2d `\n\n_ class _ subgrounds.contrib.plotly. Histogram2dContour ( _ ** kwargs _ ) #\n\nSee [ https://plotly.com/python/2d\n\n\n\nhistogram\n\n\n\ncontour/\n\n](https://plotly.com/python/2d\n\n\n\nhistogram\n\n\n\ncontour/)\n\ngraph_object #\n\nalias of ` Histogram2dContour `\n\n_ class _ subgrounds.contrib.plotly. Ohlc ( _ ** kwargs _ ) #\n\nSee [ https://plotly.com/python/ohlc\n\n\n\ncharts/ ](https://plotly.com/python/ohlc\n\n\n\ncharts/)\n\ngraph_object #\n\nalias of ` Ohlc `\n\n_ class _ subgrounds.contrib.plotly. Candlestick ( _ ** kwargs _ ) #\n\nSee [ https://plotly.com/python/candlestick\n\n\n\ncharts/\n\n](https://plotly.com/python/candlestick\n\n\n\ncharts/)\n\ngraph_object #\n\nalias of ` Candlestick `\n\n_ class _ subgrounds.contrib.plotly. Waterfall ( _ ** kwargs _ ) #\n\nSee [ https://plotly.com/python/waterfall\n\n\n\ncharts/\n\n](https://plotly.com/python/waterfall", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "cc6f9d3e-d61a-4347-818c-e42ebc1fbebf": {"__data__": {"id_": "cc6f9d3e-d61a-4347-818c-e42ebc1fbebf", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "523ccbe2-4bee-4ec3-b060-094cd0db8d2f", "node_type": null, "metadata": {}, "hash": "38f717c41d9ccb502c50e0d536c255e5412655201ab8e5bf60fc6eaf218404e5"}, "3": {"node_id": "63bac93d-76c4-4966-bbf5-b884c3d63608", "node_type": null, "metadata": {}, "hash": "109eea63c13b40e6ec3831da14b35b0240c710a03ae26e22f015140bc1d60cd4"}}, "hash": "c066db2ee16cd25373dc41cd732f13e26331c964076897f4b276f2979f61281b", "text": "charts/)\n\ngraph_object #\n\nalias of ` Waterfall `\n\n_ class _ subgrounds.contrib.plotly. Funnel ( _ ** kwargs _ ) #\n\nSee [ https://plotly.com/python/funnel\n\n\n\ncharts/\n\n](https://plotly.com/python/funnel\n\n\n\ncharts/)\n\ngraph_object #\n\nalias of ` Funnel `\n\n_ class _ subgrounds.contrib.plotly. Indicator ( _ ** kwargs _ ) #\n\nSee [ https://plotly.com/python/indicator/\n\n](https://plotly.com/python/indicator/)\n\ngraph_object #\n\nalias of ` Indicator `\n\n_ class _ subgrounds.contrib.plotly. Scatter3d ( _ ** kwargs _ ) #\n\nSee [ https://plotly.com/python/3d\n\n\n\nscatter\n\n\n\nplots/\n\n](https://plotly.com/python/3d\n\n\n\nscatter\n\n\n\nplots/)\n\ngraph_object #\n\nalias of ` Scatter3d `\n\n_ class _ subgrounds.contrib.plotly. Surface ( _ ** kwargs _ ) #\n\nSee [ https://plotly.com/python/3d\n\n\n\nsurface\n\n\n\nplots/\n\n](https://plotly.com/python/3d\n\n\n\nsurface\n\n\n\nplots/)\n\ngraph_object #\n\nalias of ` Surface `\n\n_ class _ subgrounds.contrib.plotly. Scattergeo ( _ ** kwargs _ ) #\n\nSee [ https://plotly.com/python/scatter\n\n\n\nplots\n\n\n\non\n\n\n\nmaps/\n\n](https://plotly.com/python/scatter\n\n\n\nplots\n\n\n\non\n\n\n\nmaps/)\n\ngraph_object #\n\nalias of ` Scattergeo `\n\n_ class _ subgrounds.contrib.plotly. Choropleth ( _ ** kwargs _ ) #\n\nSee [ https://plotly.com/python/choropleth\n\n\n\nmaps/\n\n](https://plotly.com/python/choropleth\n\n\n\nmaps/)\n\ngraph_object #\n\nalias of ` Choropleth `\n\n_ class _ subgrounds.contrib.plotly. Scattermapbox ( _ ** kwargs _ ) #\n\nSee [ https://plotly.com/python/scattermapbox/\n\n](https://plotly.com/python/scattermapbox/)\n\ngraph_object #\n\nalias of ` Scattermapbox `\n\n_ class _ subgrounds.contrib.plotly. Choroplethmapbox ( _ ** kwargs _ ) #\n\nSee [ https://plotly.com/python/mapbox\n\n\n\ncounty\n\n\n\nchoropleth/\n\n](https://plotly.com/python/mapbox\n\n\n\ncounty\n\n\n\nchoropleth/)\n\ngraph_object #\n\nalias of ` Choroplethmapbox `\n\n_ class _ subgrounds.contrib.plotly. Densitymapbox ( _ ** kwargs _ ) #\n\nSee [ https://plotly.com/python/mapbox\n\n\n\ndensity\n\n\n\nheatmaps/\n\n](https://plotly.com/python/mapbox\n\n\n\ndensity\n\n\n\nheatmaps/)\n\ngraph_object #\n\nalias of ` Densitymapbox `\n\n_ class _ subgrounds.contrib.plotly. Scatterpolar ( _ ** kwargs _ ) #\n\nSee [ https://plotly.com/python/polar\n\n\n\nchart/\n\n](https://plotly.com/python/polar\n\n\n\nchart/)\n\ngraph_object #\n\nalias of ` Scatterpolar `\n\n_ class _ subgrounds.contrib.plotly. Barpolar ( _ ** kwargs _ ) #\n\nSee [ https://plotly.com/python/wind\n\n\n\nrose\n\n\n\ncharts/\n\n](https://plotly.com/python/wind\n\n\n\nrose\n\n\n\ncharts/)\n\ngraph_object #\n\nalias of ` Barpolar `\n\n_ class _ subgrounds.contrib.plotly. Sunburst ( _ ** kwargs _ ) #\n\nSee [ https://plotly.com/python/sunburst", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "63bac93d-76c4-4966-bbf5-b884c3d63608": {"__data__": {"id_": "63bac93d-76c4-4966-bbf5-b884c3d63608", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "cc6f9d3e-d61a-4347-818c-e42ebc1fbebf", "node_type": null, "metadata": {}, "hash": "c066db2ee16cd25373dc41cd732f13e26331c964076897f4b276f2979f61281b"}, "3": {"node_id": "9bb308f6-5e3c-4f18-baff-a9c2171ceafa", "node_type": null, "metadata": {}, "hash": "de0f1c1b6de7c2c91b5dff3836436e65a1cfce18288c0e240ab52796b2b011d0"}}, "hash": "109eea63c13b40e6ec3831da14b35b0240c710a03ae26e22f015140bc1d60cd4", "text": "charts/\n\n](https://plotly.com/python/sunburst\n\n\n\ncharts/)\n\ngraph_object #\n\nalias of ` Sunburst `\n\n_ class _ subgrounds.contrib.plotly. Treemap ( _ ** kwargs _ ) #\n\nSee [ https://plotly.com/python/treemaps/\n\n](https://plotly.com/python/treemaps/)\n\ngraph_object #\n\nalias of ` Treemap `\n\n_ class _ subgrounds.contrib.plotly. Icicle ( _ ** kwargs _ ) #\n\nSee [ https://plotly.com/python/icicle\n\n\n\ncharts/\n\n](https://plotly.com/python/icicle\n\n\n\ncharts/)\n\ngraph_object #\n\nalias of ` Icicle `\n\n_ class _ subgrounds.contrib.plotly. Sankey ( _ ** kwargs _ ) #\n\nSee [ https://plotly.com/python/sankey\n\n\n\ndiagram/\n\n](https://plotly.com/python/sankey\n\n\n\ndiagram/)\n\ngraph_object #\n\nalias of ` Sankey `\n\n_ class _ subgrounds.contrib.plotly. Parcoords ( _ ** kwargs _ ) #\n\nSee [ https://plotly.com/python/parallel\n\n\n\ncoordinates\n\n\n\nplot/\n\n](https://plotly.com/python/parallel\n\n\n\ncoordinates\n\n\n\nplot/)\n\ngraph_object #\n\nalias of ` Parcoords `\n\n_ class _ subgrounds.contrib.plotly. Parcats ( _ ** kwargs _ ) #\n\nSee [ https://plotly.com/python/parallel\n\n\n\ncategories\n\n\n\ndiagram/\n\n](https://plotly.com/python/parallel\n\n\n\ncategories\n\n\n\ndiagram/)\n\ngraph_object #\n\nalias of ` Parcats `\n\n_ class _ subgrounds.contrib.plotly. Carpet ( _ ** kwargs _ ) #\n\nSee [ https://plotly.com/python/carpet\n\n\n\nplot/\n\n](https://plotly.com/python/carpet\n\n\n\nplot/)\n\ngraph_object #\n\nalias of ` Carpet `\n\n_ class _ subgrounds.contrib.plotly. Scattercarpet ( _ ** kwargs _ ) #\n\nSee [ https://plotly.com/python/carpet\n\n\n\nscatter/\n\n](https://plotly.com/python/carpet\n\n\n\nscatter/)\n\ngraph_object #\n\nalias of ` Scattercarpet `\n\n_ class _ subgrounds.contrib.plotly. Contourcarpet ( _ ** kwargs _ ) #\n\nSee [ https://plotly.com/python/carpet\n\n\n\ncontour/\n\n](https://plotly.com/python/carpet", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9bb308f6-5e3c-4f18-baff-a9c2171ceafa": {"__data__": {"id_": "9bb308f6-5e3c-4f18-baff-a9c2171ceafa", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "63bac93d-76c4-4966-bbf5-b884c3d63608", "node_type": null, "metadata": {}, "hash": "109eea63c13b40e6ec3831da14b35b0240c710a03ae26e22f015140bc1d60cd4"}, "3": {"node_id": "b8077d67-e2e6-45e7-a813-4b1f94d29ca4", "node_type": null, "metadata": {}, "hash": "e5fc3c9986960f549ed88381fe71afb6fe3a1c34c13ec2a3ce803e4ceae2cdf3"}}, "hash": "de0f1c1b6de7c2c91b5dff3836436e65a1cfce18288c0e240ab52796b2b011d0", "text": "contour/)\n\ngraph_object #\n\nalias of ` Contourcarpet `\n\nOn this page\n\nPlotly\n\n` TraceWrapper `\n\n` Scatter `\n\n` Scatter.graph_object `\n\n` Pie `\n\n` Pie.graph_object `\n\n` Bar `\n\n` Bar.graph_object `\n\n` Heatmap `\n\n` Heatmap.graph_object `\n\n` Contour `\n\n` Contour.graph_object `\n\n` Table `\n\n` Table.graph_object `\n\n` Box `\n\n` Box.graph_object `\n\n` Violin `\n\n` Violin.graph_object `\n\n` Histogram `\n\n` Histogram.graph_object `\n\n` Histogram2d `\n\n` Histogram2d.graph_object `\n\n` Histogram2dContour `\n\n` Histogram2dContour.graph_object `\n\n` Ohlc `\n\n` Ohlc.graph_object `\n\n` Candlestick `\n\n` Candlestick.graph_object `\n\n` Waterfall `\n\n` Waterfall.graph_object `\n\n` Funnel `\n\n` Funnel.graph_object `\n\n` Indicator `\n\n` Indicator.graph_object `\n\n` Scatter3d `\n\n` Scatter3d.graph_object `\n\n` Surface `\n\n` Surface.graph_object `\n\n` Scattergeo `\n\n` Scattergeo.graph_object `\n\n` Choropleth `\n\n` Choropleth.graph_object `\n\n` Scattermapbox `\n\n` Scattermapbox.graph_object `\n\n` Choroplethmapbox `\n\n` Choroplethmapbox.graph_object `\n\n` Densitymapbox `\n\n` Densitymapbox.graph_object `\n\n` Scatterpolar `\n\n` Scatterpolar.graph_object `\n\n` Barpolar `\n\n` Barpolar.graph_object `\n\n` Sunburst `\n\n` Sunburst.graph_object `\n\n` Treemap `\n\n` Treemap.graph_object `\n\n` Icicle `\n\n` Icicle.graph_object `\n\n` Sankey `\n\n` Sankey.graph_object `\n\n` Parcoords `\n\n` Parcoords.graph_object `\n\n` Parcats `\n\n` Parcats.graph_object `\n\n` Carpet `\n\n` Carpet.graph_object `\n\n` Scattercarpet `\n\n` Scattercarpet.graph_object `\n\n` Contourcarpet `\n\n` Contourcarpet.graph_object `\n\n[ Playgrounds ](../../../../../)\n\nLogo](../../../../../_static/assets/pg\n\n\n\nlogotype\n\n\n\nprimary.svg)\n\n# Dash #\n\nSubgrounds Dash Components\n\nExtending dash components to be able to understand subgrounds logic. This includes other\n\nextended components of other libraries such as plotly .\n\n_ class _ subgrounds.contrib.dash. Refreshable #\n\n_ class _ subgrounds.contrib.dash. Graph ( _ fig _ , _ ** kwargs _ ) #\n\n_ class _ subgrounds.contrib.dash. DataTable ( _ subgrounds _ , _ data _ , _ columns = None _ , _ concat = False _ , _ append = False _ , _ ** kwargs _ ) #\n\n_ class _ subgrounds.contrib.dash. AutoUpdate ( _ app _ , _ sec_interval = 1 _ , _ children = [] _ , _ ** kwargs _ ) #\n\nOn this page\n\nDash\n\n` Refreshable `\n\n` Graph `\n\n` DataTable `\n\n` AutoUpdate `\n\n[ Playgrounds ](../../../../)\n\nLogo](../../../../_static/assets/pg\n\n\n\nlogotype\n\n\n\nprimary.svg)\n\n# Pagination #\n\n[ Strategies ](strategies/)\n\n[ ` StopPagination ` ](strategies/#subgrounds.pagination.strategies.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b8077d67-e2e6-45e7-a813-4b1f94d29ca4": {"__data__": {"id_": "b8077d67-e2e6-45e7-a813-4b1f94d29ca4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "9bb308f6-5e3c-4f18-baff-a9c2171ceafa", "node_type": null, "metadata": {}, "hash": "de0f1c1b6de7c2c91b5dff3836436e65a1cfce18288c0e240ab52796b2b011d0"}, "3": {"node_id": "c54dfa4e-8f49-4a25-b334-fc77086cd190", "node_type": null, "metadata": {}, "hash": "0f8f024a488b93ba8463cb41f89b056978f21d1019f9e412c9bb2edfa12d55e6"}}, "hash": "e5fc3c9986960f549ed88381fe71afb6fe3a1c34c13ec2a3ce803e4ceae2cdf3", "text": "StopPagination)\n\n[ ` SkipPagination ` ](strategies/#subgrounds.pagination.strategies.SkipPagination)\n\n[ ` LegacyStrategyArgGenerator ` ](strategies/#subgrounds.pagination.strategies.LegacyStrategyArgGenerator)\n\n[ ` LegacyStrategyArgGenerator.Cursor ` ](strategies/#subgrounds.pagination.strategies.LegacyStrategyArgGenerator.Cursor)\n\n[ ` LegacyStrategyArgGenerator.Cursor.update() ` ](strategies/#subgrounds.pagination.strategies.LegacyStrategyArgGenerator.Cursor.update)\n\n[ ` LegacyStrategyArgGenerator.Cursor.step() ` ](strategies/#subgrounds.pagination.strategies.LegacyStrategyArgGenerator.Cursor.step)\n\n[ ` LegacyStrategyArgGenerator.Cursor.args() ` ](strategies/#subgrounds.pagination.strategies.LegacyStrategyArgGenerator.Cursor.args)\n\n[ ` LegacyStrategyArgGenerator.Cursor.reset() ` ](strategies/#subgrounds.pagination.strategies.LegacyStrategyArgGenerator.Cursor.reset)\n\n[ ` ShallowStrategyArgGenerator ` ](strategies/#subgrounds.pagination.strategies.ShallowStrategyArgGenerator)\n\n[ ` ShallowStrategyArgGenerator.Cursor ` ](strategies/#subgrounds.pagination.strategies.ShallowStrategyArgGenerator.Cursor)\n\n[ ` ShallowStrategyArgGenerator.Cursor.page_node ` ](strategies/#subgrounds.pagination.strategies.ShallowStrategyArgGenerator.Cursor.page_node)\n\n[ ` ShallowStrategyArgGenerator.Cursor.inner ` ](strategies/#subgrounds.pagination.strategies.ShallowStrategyArgGenerator.Cursor.inner)\n\n[ ` ShallowStrategyArgGenerator.Cursor.inner_idx ` ](strategies/#subgrounds.pagination.strategies.ShallowStrategyArgGenerator.Cursor.inner_idx)\n\n[ ` ShallowStrategyArgGenerator.Cursor.filter_value ` ](strategies/#subgrounds.pagination.strategies.ShallowStrategyArgGenerator.Cursor.filter_value)\n\n[ ` ShallowStrategyArgGenerator.Cursor.queried_entities ` ](strategies/#subgrounds.pagination.strategies.ShallowStrategyArgGenerator.Cursor.queried_entities)\n\n[ ` ShallowStrategyArgGenerator.Cursor.stop ` ](strategies/#subgrounds.pagination.strategies.ShallowStrategyArgGenerator.Cursor.stop)\n\n[ ` ShallowStrategyArgGenerator.Cursor.page_count ` ](strategies/#subgrounds.pagination.strategies.ShallowStrategyArgGenerator.Cursor.page_count)\n\n[ ` ShallowStrategyArgGenerator.Cursor.keys ` ](strategies/#subgrounds.pagination.strategies.ShallowStrategyArgGenerator.Cursor.keys)\n\n[ Preprocess ](preprocess/)\n\n[ ` PaginationNode ` ](preprocess/#subgrounds.pagination.preprocess.PaginationNode)\n\n[ ` PaginationNode.node_idx ` ](preprocess/#subgrounds.pagination.preprocess.PaginationNode.node_idx)\n\n[ ` PaginationNode.filter_field ` ](preprocess/#subgrounds.pagination.preprocess.PaginationNode.filter_field)\n\n[ ` PaginationNode.first_value ` ](preprocess/#subgrounds.pagination.preprocess.PaginationNode.first_value)\n\n[ ` PaginationNode.skip_value ` ](preprocess/#subgrounds.pagination.preprocess.PaginationNode.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c54dfa4e-8f49-4a25-b334-fc77086cd190": {"__data__": {"id_": "c54dfa4e-8f49-4a25-b334-fc77086cd190", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "b8077d67-e2e6-45e7-a813-4b1f94d29ca4", "node_type": null, "metadata": {}, "hash": "e5fc3c9986960f549ed88381fe71afb6fe3a1c34c13ec2a3ce803e4ceae2cdf3"}, "3": {"node_id": "9ba2513e-35c5-4389-b2ca-2920b87797ae", "node_type": null, "metadata": {}, "hash": "69397465ec962e43d7f6e08967fb73305d0f4979a508c58259d84ae1a50d97a1"}}, "hash": "0f8f024a488b93ba8463cb41f89b056978f21d1019f9e412c9bb2edfa12d55e6", "text": "skip_value)\n\n[ ` PaginationNode.filter_value ` ](preprocess/#subgrounds.pagination.preprocess.PaginationNode.filter_value)\n\n[ ` PaginationNode.filter_value_type ` ](preprocess/#subgrounds.pagination.preprocess.PaginationNode.filter_value_type)\n\n[ ` PaginationNode.key_path ` ](preprocess/#subgrounds.pagination.preprocess.PaginationNode.key_path)\n\n[ ` PaginationNode.inner ` ](preprocess/#subgrounds.pagination.preprocess.PaginationNode.inner)\n\n[ ` PaginationNode.get_vardefs() ` ](preprocess/#subgrounds.pagination.preprocess.PaginationNode.get_vardefs)\n\n[ ` normalize() ` ](preprocess/#subgrounds.pagination.preprocess.normalize)\n\n[ Pagination ](pagination/)\n\n[ ` PaginationError ` ](pagination/#subgrounds.pagination.pagination.PaginationError)\n\n[ ` PaginationStrategy ` ](pagination/#subgrounds.pagination.pagination.PaginationStrategy)\n\n[ ` PaginationStrategy.step() ` ](pagination/#subgrounds.pagination.pagination.PaginationStrategy.step)\n\n[ ` paginate() ` ](pagination/#subgrounds.pagination.pagination.paginate)\n\n[ ` paginate_iter() ` ](pagination/#subgrounds.pagination.pagination.paginate_iter)\n\n[ Utils ](utils/)\n\n[ ` merge() ` ](utils/#subgrounds.pagination.utils.merge)\n\n[ ` merge_input_value_object_metas() ` ](utils/#subgrounds.pagination.utils.merge_input_value_object_metas)\n\nThis module contains all code related to automatic pagination.The ` pagination ` module contains the pagination algorithms (both regular and iterative) that make use of ` PaginationStrategies ` .The ` preprocess ` and ` strategties ` modules implement the currently supported ` PaginationStrategies ` : ` LegacyStrategy ` and ` ShallowStrategy ` .The ` utils ` module contains some generic functions that are useful in the context of pagination.subgrounds.pagination.normalize ( _ schema _ , _ document _ , _ pagination_nodes _ ) #\n\nInject various graphql components to \"normalize\" the query for pagination.When we paginate a query, we inject custom filtering based on the order by values.We also add GraphQL variables so that PaginationStrategy only need to change those\n\n> to perform pagination.The main process for normalization begins by recursively adjusting Selection nodes\n\nwithin the Query tree.We only apply the following steps if the node needs to be paginated.> Note, these steps always check the current selection and will merge new > values\n\nand selections onto whats currently there.1.Ensure id is on the Selection\n\n2.Replace first argument value by $firstX\n\n3.Replace skip argument value by $skipX\n\n4.With the orderBy (default being id ), generate where filtering arguments\n\n> 1.These are used to filter out values when paginating > >\n\n5.Set where filtering values (deep union / merge)\n\nsubgrounds.pagination.paginate_iter ( _ schema _ , _ doc _ , _ pagination_strategy _ , _ headers _ ) #\n\nExecutes the request document doc based on the GraphQL schema schema and returns the response as a JSON dictionary.Parameters :\n\n\n\n**schema\n\n** ( [ _SchemaMeta_ ](../schema/#subgrounds.schema.SchemaMeta \"subgrounds.schema.SchemaMeta\") )\n\n-- The GraphQL schema on which the request document is based", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9ba2513e-35c5-4389-b2ca-2920b87797ae": {"__data__": {"id_": "9ba2513e-35c5-4389-b2ca-2920b87797ae", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "c54dfa4e-8f49-4a25-b334-fc77086cd190", "node_type": null, "metadata": {}, "hash": "0f8f024a488b93ba8463cb41f89b056978f21d1019f9e412c9bb2edfa12d55e6"}, "3": {"node_id": "45dc3ffa-01ec-4885-a593-628e6abc58ab", "node_type": null, "metadata": {}, "hash": "4e945279b51f01ef489d770eb32eff74f5a06eeb9dfb9f007d09688665a2c899"}}, "hash": "69397465ec962e43d7f6e08967fb73305d0f4979a508c58259d84ae1a50d97a1", "text": "**doc\n\n** ( [ _Document_ ](../query/#subgrounds.query.Document \"subgrounds.query.Document\") )\n\n-- The request document\n\nReturns :\n\nThe response data as a JSON dictionary\n\nReturn type :\n\n[ dict ](https://docs.python.org/3/library/stdtypes.html#dict \"\\(in Python v3.11\\)\") [ [ str ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") , Any]\n\nsubgrounds.pagination. paginate ( _ schema _ , _ doc _ , _ pagination_strategy _ , _ headers _ ) #\n\nExecutes the request document doc based on the GraphQL schema schema and returns the response as a JSON dictionary.\n\nParameters :\n\n\n\n**schema\n\n** ( [ _SchemaMeta_ ](../schema/#subgrounds.schema.SchemaMeta \"subgrounds.schema.SchemaMeta\") )\n\n-- The GraphQL schema on which the request document is based", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "45dc3ffa-01ec-4885-a593-628e6abc58ab": {"__data__": {"id_": "45dc3ffa-01ec-4885-a593-628e6abc58ab", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "9ba2513e-35c5-4389-b2ca-2920b87797ae", "node_type": null, "metadata": {}, "hash": "69397465ec962e43d7f6e08967fb73305d0f4979a508c58259d84ae1a50d97a1"}, "3": {"node_id": "df85356b-0623-4e7a-89e9-cb40867e66b3", "node_type": null, "metadata": {}, "hash": "4a1b0daf1691e8bd17a2f39a8fc9a1f0e346dac3d3c5d07a679a2159429ab579"}}, "hash": "4e945279b51f01ef489d770eb32eff74f5a06eeb9dfb9f007d09688665a2c899", "text": "**doc\n\n** ( [ _Document_ ](../query/#subgrounds.query.Document \"subgrounds.query.Document\") )\n\n-- The request document\n\nReturns :\n\nThe response data as a JSON dictionary\n\nReturn type :\n\n[ dict ](https://docs.python.org/3/library/stdtypes.html#dict \"\\(in Python v3.11\\)\") [ [ str ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") , Any]\n\n_ exception _ subgrounds.pagination. PaginationError ( _ message _ , _ strategy _ ) #\n\n_ class _ subgrounds.pagination. PaginationNode ( _ node_idx _ , _ filter_field _ , _ first_value _ , _ skip_value _ , _ filter_value _ , _ filter_value_type _ , _ key_path _ , _ inner=<factory> _ ) #\n\nClass representing the pagination config for a single GraphQL list field.\n\nnode_idx #\n\nIndex of PaginationNode, used to label pagination arguments for this node.\n\nType :\n\n[ int ](https://docs.python.org/3/library/functions.html#int \"\\(in Python v3.11\\)\")\n\nfilter_field #\n\nName of the node's filter field, e.g. : if ` filter_name ` is ` timestamp_gt ` , then ` filter_field ` is ` timestamp `\n\nType :\n\n[ str ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\")\n\nfirst_value #\n\nInitial value of the ` first ` argument\n\nType :\n\n[ int ](https://docs.python.org/3/library/functions.html#int \"\\(in Python v3.11\\)\")\n\nskip_value #\n\nInitial value of the ` skip ` argument\n\nType :\n\n[ int ](https://docs.python.org/3/library/functions.html#int \"\\(in Python v3.11\\)\")\n\nfilter_value #\n\nInitial value of the filter argument (i.e. : ` where: {filter: FILTER_VALUE} ` )\n\nType :\n\nAny\n\nfilter_value_type #\n\nType of the filter value\n\nType :\n\nTypeRef.T\n\nkey_path #\n\nLocation in the list field to which this pagination node refers to in the initial query\n\nType :\n\n[ list ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") [ [ str ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") ]\n\ninner #\n\nNested pagination nodes (if any).\n\nType :\n\n[ list ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") [ PaginationNode ]\n\nget_vardefs ( ) #\n\nReturns a list of variable definitions corresponding to this pagination node's pagination arguments as well as the variable definitions related to any nested pagination nodes.\n\nParameters :\n\n**self** ( _PaginationNode_ ) -- The current PaginationNode\n\nReturns :\n\n_description_\n\nReturn type :\n\n[ list ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") [ [ VariableDefinition ](../query/#subgrounds.query.VariableDefinition \"subgrounds.query.VariableDefinition\") ]\n\n_ class _ subgrounds.pagination. PaginationStrategy ( _ * args _ , _ ** kwargs _ ) #\n\nstep ( _ page_data = None _ ) #\n\nReturns the new query document and its variables which will be executed to get the next page of data. If this is the first query made as part of the pagination strategy, then ` page_data ` will be ` None ` .\n\nIf pagination should be interupted (e.g. : if enough entities have been queried), then this method should raise a ` StopPagination ` exception.\n\nParameters :", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "df85356b-0623-4e7a-89e9-cb40867e66b3": {"__data__": {"id_": "df85356b-0623-4e7a-89e9-cb40867e66b3", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "45dc3ffa-01ec-4885-a593-628e6abc58ab", "node_type": null, "metadata": {}, "hash": "4e945279b51f01ef489d770eb32eff74f5a06eeb9dfb9f007d09688665a2c899"}, "3": {"node_id": "7f9ac8e5-0c9f-4d58-85a9-e933b9a38ecf", "node_type": null, "metadata": {}, "hash": "a622ffcb2eef1d63df2c56092fbd0734812a8870a299e51fa4e5f3f9ef7d488a"}}, "hash": "4a1b0daf1691e8bd17a2f39a8fc9a1f0e346dac3d3c5d07a679a2159429ab579", "text": "**(\n\n**\n\n**i.e.\n\n** ( _If this is the first query_ )\n\n-- the first page of data), then it will be None.\n\n\n\n**None.\n\n** ( _Defaults to_ )\n\n--\n\nReturns :\n\nA tuple (doc, vars) where doc is the query document that will be executed to fetch the next page of data and vars are the variables for that document.\n\nReturn type :\n\nTuple[ [ Document ](../query/#subgrounds.query.Document \"subgrounds.query.Document\") , [ dict ](https://docs.python.org/3/library/stdtypes.html#dict \"\\(in Python v3.11\\)\") [ [ str ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") , Any]]\n\nOn this page\n\nPagination\n\n` normalize() `\n\n` paginate_iter() `\n\n` paginate() `\n\n` PaginationError `\n\n` PaginationNode `\n\n` PaginationNode.node_idx `\n\n` PaginationNode.filter_field `\n\n` PaginationNode.first_value `\n\n` PaginationNode.skip_value `\n\n` PaginationNode.filter_value `\n\n` PaginationNode.filter_value_type `\n\n` PaginationNode.key_path `\n\n` PaginationNode.inner `\n\n` PaginationNode.get_vardefs() `\n\n` PaginationStrategy `\n\n` PaginationStrategy.step() `\n\n[ Playgrounds ](../../../../../)\n\nLogo](../../../../../_static/assets/pg\n\n\n\nlogotype", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7f9ac8e5-0c9f-4d58-85a9-e933b9a38ecf": {"__data__": {"id_": "7f9ac8e5-0c9f-4d58-85a9-e933b9a38ecf", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "df85356b-0623-4e7a-89e9-cb40867e66b3", "node_type": null, "metadata": {}, "hash": "4a1b0daf1691e8bd17a2f39a8fc9a1f0e346dac3d3c5d07a679a2159429ab579"}, "3": {"node_id": "61c889ef-aaf3-4f55-a366-d00170881834", "node_type": null, "metadata": {}, "hash": "7b08d1ff666ddd7d73ae30b6401f13538caf2356771ea1ca48d0aa366d2ec2eb"}}, "hash": "a622ffcb2eef1d63df2c56092fbd0734812a8870a299e51fa4e5f3f9ef7d488a", "text": "primary.svg)\n\n# Strategies #\n\nSubgrounds pagination strategies\n\nThis module implements functions and data structures used to implement the two ` PaginationStrategies ` that Subgrounds offers.\n\nFor both strategies, pagination is done in four steps:\n\n1. Generate one or many ` PaginationNode ` objects per query document. These are tree-like data structures that extract all information about pagination fields (i.e. : fields that return lists of entities) while maintaining the nestedness relationship between each pagination field (i.e. : which is nested in which).\n\n2. The query document is normalized such that every pagination field in the query has:\n\n> 1. An ordering (i.e. : ` orderBy ` and ` orderDirection ` are > specified) > > 2. A ` first ` argument set to the ` firstN ` variable > > 3. A ` skip ` argument set to the ` skipN ` variable > > 4. A ` where ` filter with the filter name derived from the ordering > and the value being a variable named ` lastOrderingValueN `\n\nIn other words, the query will be transformed in a form which allows Subgrounds to paginate automatically by simply setting the set of pagination variables (i.e. : ` firstN ` , ` skipN ` and ` lastOrderingValueN ` ) to different values. Each field that requires pagination (i.e. : each field that yields a list) will have its own set of variables, hence the ` N ` post-fix.\n\nExample: The initial query\n\nquery {\n\nitems(\n\norderBy: timestamp,\n\norderDirection: desc,\n\nfirst: 10000\n\n) {\n\nfoo\n\n}\n\n}\n\nwill be transformed to\n\nquery($first0: Int, $skip0: Int, $lastOrderingValue0: BigInt) { items( orderBy: timestamp, orderDirection: desc, first: $first0, skip: $skip0, where: { timestamp_lt: $lastOrderingValue0 } ) { foo } }\n\n3. For each data page, generate the values for the pagination variables (i.e. : ` firstN ` , ` skipN ` and ` `lastOrderingValueN` ` )\n\n4. If some variables are undefined (i.e. : they are present in the query document, but not given a value as part of step 3), then the document is pruned and all selections (and sub-selections) containing undefined variables are removed.\n\nDepending on the strategy, the variable values computed at step 3 will change.\n\n_ exception _ subgrounds.pagination.strategies. StopPagination ( _ * args _ ) #\n\n_ exception _ subgrounds.pagination.strategies. SkipPagination ( _ * args _ ) #\n\n_ class _ subgrounds.pagination.strategies. LegacyStrategyArgGenerator ( _ pagination_nodes : 'list[PaginationNode]' _ ) #\n\n_ class _ Cursor ( _ page_node : 'PaginationNode' _ ) #\n\nupdate ( _ data _ ) #\n\nMoves ` self ` cursor forward according to previous response data ` data ` :param data: Previous response data :type data: dict\n\nRaises :\n\n[ *\n\n\n\nStopIteration*\n\n\n\n](https://docs.python.org/3/library/exceptions.html#StopIteration \"\\(in Python\n\nv3.11\\)\") \\-", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "61c889ef-aaf3-4f55-a366-d00170881834": {"__data__": {"id_": "61c889ef-aaf3-4f55-a366-d00170881834", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "7f9ac8e5-0c9f-4d58-85a9-e933b9a38ecf", "node_type": null, "metadata": {}, "hash": "a622ffcb2eef1d63df2c56092fbd0734812a8870a299e51fa4e5f3f9ef7d488a"}, "3": {"node_id": "536866bf-bc69-4883-a08b-eae52c0a2889", "node_type": null, "metadata": {}, "hash": "99aa27ef8ce93743725bd8413000d38ddbbaa71cc0f280e18de1c97bd465092c"}}, "hash": "7b08d1ff666ddd7d73ae30b6401f13538caf2356771ea1ca48d0aa366d2ec2eb", "text": "_description_\n\nstep ( _ data _ ) #\n\nUpdates either ` self ` cursor or inner state machine depending on whether the inner state machine has reached its limit :param data: _description_ :type data: dict\n\nargs ( ) #\n\nReturns the pagination arguments for the current state of the state machine :returns: _description_ :rtype: dict\n\nreset ( ) #\n\nReset state machine\n\n_ class _ subgrounds.pagination.strategies. ShallowStrategyArgGenerator ( _ pagination_nodes : 'list[PaginationNode]' _ ) #\n\n_ class _ Cursor ( _ page_node _ , _ inner _ , _ inner_idx = 0 _ , _ filter_value = None _ , _ queried_entities = 0 _ , _ page_count = 0 _ ) #\n\nClass used to generate the pagination variables for a given tree of ` PaginationNode ` objects.\n\npage_node #\n\nThe ` PaginationNode ` object which this cursor is iterating through.\n\nType :\n\n[ subgrounds.pagination.preprocess.PaginationNode\n\n](../preprocess/#subgrounds.pagination.preprocess.PaginationNode\n\n\"subgrounds.pagination.preprocess.PaginationNode\")\n\ninner #\n\nThe cursors for nested ` PaginationNodes ` , if any.\n\nType :\n\n[ list ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") [ subgrounds.pagination.strategies.ShallowStrategyArgGenerator.Cursor ]\n\ninner_idx #\n\nThe index of the inner ` PaginationNode ` through which this cursor iterating.\n\nType :\n\n[ int ](https://docs.python.org/3/library/functions.html#int \"\\(in Python v3.11\\)\")\n\nfilter_value #\n\nThe previous page's index value used to query the next data page. Depends on ` page_node.filter_field ` , e.g. : if ` page_node.filter_field ` is ` timestamp_gt ` , then ` filter_value ` will be the highest timestamp the entities returned in the previous data page.\n\nType :\n\nAny\n\nqueried_entities #\n\nCounter keeping track of the total number of queried entities.\n\nType :\n\n[ int ](https://docs.python.org/3/library/functions.html#int \"\\(in Python v3.11\\)\")\n\nstop #\n\nFlag indicating whether or not to stop the cursor.\n\npage_count #\n\nCounter keeping track of the total number data pages queried.\n\nType :\n\n[ int ](https://docs.python.org/3/library/functions.html#int \"\\(in Python v3.11\\)\")\n\nkeys #\n\nSet keeping track of the keys of all queried entities to avoid duplicates.\n\nOn this page\n\nStrategies\n\n` StopPagination `\n\n` SkipPagination `\n\n` LegacyStrategyArgGenerator `\n\n` LegacyStrategyArgGenerator.Cursor `\n\n` LegacyStrategyArgGenerator.Cursor.update() `\n\n` LegacyStrategyArgGenerator.Cursor.step() `\n\n` LegacyStrategyArgGenerator.Cursor.args() `\n\n` LegacyStrategyArgGenerator.Cursor.reset() `\n\n` ShallowStrategyArgGenerator `\n\n` ShallowStrategyArgGenerator.Cursor `\n\n` ShallowStrategyArgGenerator.Cursor.page_node `\n\n` ShallowStrategyArgGenerator.Cursor.inner `\n\n` ShallowStrategyArgGenerator.Cursor.inner_idx `\n\n` ShallowStrategyArgGenerator.Cursor.filter_value `\n\n` ShallowStrategyArgGenerator.Cursor.queried_entities `\n\n` ShallowStrategyArgGenerator.Cursor.stop `\n\n` ShallowStrategyArgGenerator.Cursor.page_count `\n\n` ShallowStrategyArgGenerator.Cursor.keys `\n\n[ Playgrounds ](../../../../../)\n\nLogo](../../../../../_static/assets/pg\n\n\n\nlogotype", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "536866bf-bc69-4883-a08b-eae52c0a2889": {"__data__": {"id_": "536866bf-bc69-4883-a08b-eae52c0a2889", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "61c889ef-aaf3-4f55-a366-d00170881834", "node_type": null, "metadata": {}, "hash": "7b08d1ff666ddd7d73ae30b6401f13538caf2356771ea1ca48d0aa366d2ec2eb"}, "3": {"node_id": "0e10d85d-6931-4044-803c-917dd6579d11", "node_type": null, "metadata": {}, "hash": "549eb45a870771462cd810969ce3568e3884855fb118709803bc532d0aaeaa0c"}}, "hash": "99aa27ef8ce93743725bd8413000d38ddbbaa71cc0f280e18de1c97bd465092c", "text": "primary.svg)\n\n# Preprocess #\n\nHelper functions and classes used by Subgrounds' own pagination strategies._ class _ subgrounds.pagination.preprocess.PaginationNode ( _ node_idx _ , _ filter_field _ , _ first_value _ , _ skip_value _ , _ filter_value _ , _ filter_value_type _ , _ key_path _ , _ inner=<factory> _ ) #\n\nClass representing the pagination config for a single GraphQL list field.node_idx #\n\nIndex of PaginationNode, used to label pagination arguments for this node.Type :\n\n[ int ](https://docs.python.org/3/library/functions.html#int \"\\(in Python v3.11\\)\")\n\nfilter_field #\n\nName of the node's filter field, e.g.: if ` filter_name ` is ` timestamp_gt ` , then ` filter_field ` is ` timestamp `\n\nType :\n\n[ str ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\")\n\nfirst_value #\n\nInitial value of the ` first ` argument\n\nType :\n\n[ int ](https://docs.python.org/3/library/functions.html#int \"\\(in Python v3.11\\)\")\n\nskip_value #\n\nInitial value of the ` skip ` argument\n\nType :\n\n[ int ](https://docs.python.org/3/library/functions.html#int \"\\(in Python v3.11\\)\")\n\nfilter_value #\n\nInitial value of the filter argument (i.e.: ` where: {filter: FILTER_VALUE} ` )\n\nType :\n\nAny\n\nfilter_value_type #\n\nType of the filter value\n\nType :\n\nTypeRef.T\n\nkey_path #\n\nLocation in the list field to which this pagination node refers to in the initial query\n\nType :\n\n[ list ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") [ [ str ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") ]\n\ninner #\n\nNested pagination nodes (if any).Type :\n\n[ list ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") [ PaginationNode ]\n\nget_vardefs ( ) #\n\nReturns a list of variable definitions corresponding to this pagination node's pagination arguments as well as the variable definitions related to any nested pagination nodes.Parameters :\n\n**self** ( _PaginationNode_ ) -- The current PaginationNode\n\nReturns :\n\n_description_\n\nReturn type :\n\n[ list ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") [ [ VariableDefinition ](../../query/#subgrounds.query.VariableDefinition \"subgrounds.query.VariableDefinition\") ]\n\nsubgrounds.pagination.preprocess.normalize ( _ schema _ , _ document _ , _ pagination_nodes _ ) #\n\nInject various graphql components to \"normalize\" the query for pagination.When we paginate a query, we inject custom filtering based on the order by values.We also add GraphQL variables so that PaginationStrategy only need to change those\n\n> to perform pagination.The main process for normalization begins by recursively adjusting Selection nodes\n\nwithin the Query tree.We only apply the following steps if the node needs to be paginated.> Note, these steps always check the current selection and will merge new > values\n\nand selections onto whats currently there.1.Ensure id is on the Selection\n\n2.Replace first argument value by $firstX\n\n3.Replace skip argument value by $skipX\n\n4.With the orderBy (default being id ), generate where filtering arguments\n\n> 1.These are used to filter out values when paginating > >\n\n5.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0e10d85d-6931-4044-803c-917dd6579d11": {"__data__": {"id_": "0e10d85d-6931-4044-803c-917dd6579d11", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "536866bf-bc69-4883-a08b-eae52c0a2889", "node_type": null, "metadata": {}, "hash": "99aa27ef8ce93743725bd8413000d38ddbbaa71cc0f280e18de1c97bd465092c"}, "3": {"node_id": "323dba3c-f5c1-46b5-934a-ae6707a289f5", "node_type": null, "metadata": {}, "hash": "99d179e61bb3844135ea4f0372d7b695155cefba04758f97275a8409c84b7870"}}, "hash": "549eb45a870771462cd810969ce3568e3884855fb118709803bc532d0aaeaa0c", "text": "Set where filtering values (deep union / merge)\n\n](../strategies/)\n\nOn this page\n\nPreprocess\n\n` PaginationNode `\n\n` PaginationNode.node_idx `\n\n` PaginationNode.filter_field `\n\n` PaginationNode.first_value `\n\n` PaginationNode.skip_value `\n\n` PaginationNode.filter_value `\n\n` PaginationNode.filter_value_type `\n\n` PaginationNode.key_path `\n\n` PaginationNode.inner `\n\n` PaginationNode.get_vardefs() `\n\n` normalize() `\n\n[ Playgrounds ](../../../../../)\n\nLogo](../../../../../_static/assets/pg\n\n\n\nlogotype\n\n\n\nprimary.svg)\n\n# Pagination #\n\nThis module contains the pagination algorithms (both regular and iterative) that make use of pagination strategies.\n\n_ exception _ subgrounds.pagination.pagination. PaginationError ( _ message _ , _ strategy _ ) #\n\n_ class _ subgrounds.pagination.pagination. PaginationStrategy ( _ * args _ , _ ** kwargs _ ) #\n\nstep ( _ page_data = None _ ) #\n\nReturns the new query document and its variables which will be executed to get the next page of data. If this is the first query made as part of the pagination strategy, then ` page_data ` will be ` None ` .\n\nIf pagination should be interupted (e.g. : if enough entities have been queried), then this method should raise a ` StopPagination ` exception.\n\nParameters :\n\n\n\n**(\n\n**\n\n**i.e.\n\n** ( _If this is the first query_ )\n\n-- the first page of data), then it will be None.\n\n\n\n**None.\n\n** ( _Defaults to_ )\n\n--\n\nReturns :\n\nA tuple (doc, vars) where doc is the query document that will be executed to fetch the next page of data and vars are the variables for that document.\n\nReturn type :\n\nTuple[ [ Document ](../../query/#subgrounds.query.Document \"subgrounds.query.Document\") , [ dict ](https://docs.python.org/3/library/stdtypes.html#dict \"\\(in Python v3.11\\)\") [ [ str ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") , Any]]\n\nsubgrounds.pagination.pagination. paginate ( _ schema _ , _ doc _ , _ pagination_strategy _ , _ headers _ ) #\n\nExecutes the request document doc based on the GraphQL schema schema and returns the response as a JSON dictionary.\n\nParameters :\n\n\n\n**schema\n\n** ( [ _SchemaMeta_ ](../../schema/#subgrounds.schema.SchemaMeta \"subgrounds.schema.SchemaMeta\") )\n\n-- The GraphQL schema on which the request document is based\n\n\n\n**doc\n\n** ( [ _Document_ ](../../query/#subgrounds.query.Document \"subgrounds.query.Document\") )\n\n-- The request document\n\nReturns :\n\nThe response data as a JSON dictionary\n\nReturn type :\n\n[ dict ](https://docs.python.org/3/library/stdtypes.html#dict \"\\(in Python v3.11\\)\") [ [ str ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") , Any]\n\nsubgrounds.pagination.pagination. paginate_iter ( _ schema _ , _ doc _ , _ pagination_strategy _ , _ headers _ ) #\n\nExecutes the request document doc based on the GraphQL schema schema and returns the response as a JSON dictionary.\n\nParameters :\n\n\n\n**schema\n\n** ( [ _SchemaMeta_ ](../../schema/#subgrounds.schema.SchemaMeta \"subgrounds.schema.SchemaMeta\") )\n\n-- The GraphQL schema on which the request document is based", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "323dba3c-f5c1-46b5-934a-ae6707a289f5": {"__data__": {"id_": "323dba3c-f5c1-46b5-934a-ae6707a289f5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "0e10d85d-6931-4044-803c-917dd6579d11", "node_type": null, "metadata": {}, "hash": "549eb45a870771462cd810969ce3568e3884855fb118709803bc532d0aaeaa0c"}, "3": {"node_id": "7e5ddc51-8443-48fc-b883-22e174fa8500", "node_type": null, "metadata": {}, "hash": "2c4264fa211968c5cf0f98f4023e7a423e3e0a9ab62f800f32aa81d7201d9d2a"}}, "hash": "99d179e61bb3844135ea4f0372d7b695155cefba04758f97275a8409c84b7870", "text": "**doc\n\n** ( [ _Document_ ](../../query/#subgrounds.query.Document \"subgrounds.query.Document\") )\n\n-- The request document\n\nReturns :\n\nThe response data as a JSON dictionary\n\nReturn type :\n\n[ dict ](https://docs.python.org/3/library/stdtypes.html#dict \"\\(in Python v3.11\\)\") [ [ str ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") , Any]\n\nOn this page\n\nPagination\n\n` PaginationError `\n\n` PaginationStrategy `\n\n` PaginationStrategy.step() `\n\n` paginate() `\n\n` paginate_iter() `\n\n[ Playgrounds ](../../../../../)\n\nLogo](../../../../../_static/assets/pg\n\n\n\nlogotype\n\n\n\nprimary.svg)\n\n# Utils #\n\nsubgrounds.pagination.utils. merge ( _ data1 _ , _ data2 _ ) #\n\nMerges ` data1 ` and ` data2 ` and returns the combined result.\n\n` data1 ` and ` data2 ` must be of the same type. Either both are ` dict ` , ` list ` or anything else.\n\nParameters :\n\nReturns :\n\nCombined data blob\n\nReturn type :\n\n[ list ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") [Any] | [ dict ](https://docs.python.org/3/library/stdtypes.html#dict \"\\(in Python v3.11\\)\") [ [ str ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") , Any] | Any\n\nsubgrounds.pagination.utils. merge_input_value_object_metas ( _ data1 : Object _ , _ data2 : Object _ ) \u2192 Object #\n\nsubgrounds.pagination.utils. merge_input_value_object_metas ( _ data1 : [ dict ](https://docs.python.org/3/library/stdtypes.html#dict \"\\(in Python v3.11\\)\") [ [ str ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") , subgrounds.query.InputValue.Object ] _ , _ data2 : [ dict ](https://docs.python.org/3/library/stdtypes.html#dict \"\\(in Python v3.11\\)\") [ [ str ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") , subgrounds.query.InputValue.Object ] _ ) \u2192 [ dict ](https://docs.python.org/3/library/stdtypes.html#dict \"\\(in Python v3.11\\)\") [ [ str ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") , subgrounds.query.InputValue.Object ]\n\nMerges ` data1 ` and ` data2 ` and returns the combined result.\n\n` data1 ` and ` data2 ` must be of the same type. Either both are ` dict ` , ` InputValue.Object `\n\n](../pagination/)\n\nOn this page\n\nUtils\n\n` merge() `\n\n` merge_input_value_object_metas() `\n\n[ Playgrounds ](../../../../)\n\nLogo](../../../../_static/assets/pg\n\n\n\nlogotype", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7e5ddc51-8443-48fc-b883-22e174fa8500": {"__data__": {"id_": "7e5ddc51-8443-48fc-b883-22e174fa8500", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "323dba3c-f5c1-46b5-934a-ae6707a289f5", "node_type": null, "metadata": {}, "hash": "99d179e61bb3844135ea4f0372d7b695155cefba04758f97275a8409c84b7870"}, "3": {"node_id": "f4edfacd-0a2b-4bef-8485-3346b9da7b7f", "node_type": null, "metadata": {}, "hash": "f5502e3892280eb5b051d9272ad6f1f0ca559ad0b9b1d902800d54dcadfc25ea"}}, "hash": "2c4264fa211968c5cf0f98f4023e7a423e3e0a9ab62f800f32aa81d7201d9d2a", "text": "primary.svg)\n\n# Transform #\n\n[ ABCs ](abcs/)\n\n[ Apply ](apply/)\n\n[ Defaults ](defaults/)\n\n[ Transforms ](transforms/)\n\n[ Utils ](utils/)\n\nSubgrounds request/response transformation layers module\n\nThis module defines interfaces (abstract classes) for transformation layers. Transformation layers, or transforms, can be applied to entire requests (see ` RequestTransform ` ) or on a per-document basis (see ` DocumentTransform ` ). Classes that implement either type of transforms can be used to perform modifications to queries and their response data.\n\nFor example, the ` TypeTransform ` class is used to tranform the response data of ` BigInt ` and ` BigDecimal ` fields (which are represented as strings in the response JSON data) to python ` int ` and ` float ` respectively (see the actual transforms in ` DEFAULT_SUBGRAPH_TRANSFORMS ` ).\n\nTransforms are also used to apply ` SyntheticField ` to queries and the response data (see ` LocalSyntheticField ` transform class). Each ` SyntheticField ` defined on a subgraph creates a new transformation layer by instantiating a new ` LocalSyntheticField ` object.\n\n_ class _ subgrounds.transform. RequestTransform #\n\nAbstract class representing a transformation layer to be applied to entire ` DataRequest ` objects.\n\n_ abstract _ transform_request ( _ req _ ) #\n\nMethod that will be applied to all ` DataRequest ` objects that pass through the transformation layer.\n\nParameters :\n\n\n\n\n\nreq*\n\n\n\n( [ _DataRequest_ ](../query/#subgrounds.query.DataRequest\n\n\"subgrounds.query.DataRequest\") ) -\n\n\n\nThe initial request object\n\nReturns :\n\nThe transformed request object\n\nReturn type :\n\n[ DataRequest ](../query/#subgrounds.query.DataRequest\n\n\"subgrounds.query.DataRequest\")\n\n_ abstract _ transform_response ( _ req _ , _ data _ ) #\n\nMethod to be applied to all response data ` data ` of requests that pass through the transformation layer.\n\n` req ` is the initial ` DataRequest ` object that yielded the resulting JSON data ` data ` .\n\nParameters :\n\n\n\n**req\n\n** ( [ _DataRequest_ ](../query/#subgrounds.query.DataRequest \"subgrounds.query.DataRequest\") )\n\n-- Initial data request object\n\nReturns :\n\nThe transformed response data\n\nReturn type :\n\n[ list ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") [ [ dict ](https://docs.python.org/3/library/stdtypes.html#dict \"\\(in Python v3.11\\)\") [ [ str ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") , Any]]\n\n_ class _ subgrounds.transform. DocumentTransform #\n\nAbstract class representing a transformation layer to be applied to ` Document ` objects.\n\n_ abstract _ transform_document ( _ doc _ ) #\n\nMethod that will be applied to all ` Document ` objects that pass through the transformation layer.\n\nParameters :\n\n\n\n\n\ndoc*\n\n\n\n( [ _Document_ ](../query/#subgrounds.query.Document\n\n\"subgrounds.query.Document\") ) -\n\n\n\nThe initial document\n\nReturns :\n\nThe transformed document\n\nReturn type :\n\n[ Document ](../query/#subgrounds.query.Document \"subgrounds.query.Document\")\n\n_ abstract _ transform_response ( _ req _ , _ data _ ) #\n\nMethod to be applied to all response data ` data ` of requests that pass through the transformation layer.\n\n` doc ` is the initial ` Document ` object that yielded the resulting JSON data ` data ` .\n\nParameters :", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f4edfacd-0a2b-4bef-8485-3346b9da7b7f": {"__data__": {"id_": "f4edfacd-0a2b-4bef-8485-3346b9da7b7f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "7e5ddc51-8443-48fc-b883-22e174fa8500", "node_type": null, "metadata": {}, "hash": "2c4264fa211968c5cf0f98f4023e7a423e3e0a9ab62f800f32aa81d7201d9d2a"}, "3": {"node_id": "0791498d-4d53-468e-847e-2af7fe6908f4", "node_type": null, "metadata": {}, "hash": "34b0762c945a9c6462bc9100af3018139bd75c7a06f8a5a613c6463f1b460339"}}, "hash": "f5502e3892280eb5b051d9272ad6f1f0ca559ad0b9b1d902800d54dcadfc25ea", "text": "**doc\n\n** ( [ _Document_ ](../query/#subgrounds.query.Document \"subgrounds.query.Document\") )\n\n-- Initial document\n\nReturns :\n\nThe transformed response data\n\nReturn type :\n\n[ dict ](https://docs.python.org/3/library/stdtypes.html#dict \"\\(in Python v3.11\\)\") [ [ str ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") , Any]\n\n_ class _ subgrounds.transform. TypeTransform ( _ type_ _ , _ f _ ) #\n\nTransform to be applied to scalar fields on a per-type basis.\n\ntype_ #\n\nType indicating which scalar values (i.e. : values of that type) should be transformed using the function ` f `\n\nType :\n\nTypeRef.T\n\nf #\n\nFunction to be applied to scalar values of type ` type_ ` in the response data.\n\nType :\n\nCallable[[Any], Any]\n\ntransform_document ( _ doc _ ) #\n\nMethod that will be applied to all ` Document ` objects that pass through the transformation layer.\n\nParameters :\n\n\n\n\n\ndoc*\n\n\n\n( [ _Document_ ](../query/#subgrounds.query.Document\n\n\"subgrounds.query.Document\") ) -\n\n\n\nThe initial document\n\nReturns :\n\nThe transformed document\n\nReturn type :\n\n[ Document ](../query/#subgrounds.query.Document \"subgrounds.query.Document\")\n\ntransform_response ( _ doc _ , _ data _ ) #\n\nMethod to be applied to all response data ` data ` of requests that pass through the transformation layer.\n\n` doc ` is the initial ` Document ` object that yielded the resulting JSON data ` data ` .\n\nParameters :\n\n\n\n**doc\n\n** ( [ _Document_ ](../query/#subgrounds.query.Document \"subgrounds.query.Document\") )\n\n-- Initial document\n\nReturns :\n\nThe transformed response data\n\nReturn type :\n\n[ dict ](https://docs.python.org/3/library/stdtypes.html#dict \"\\(in Python v3.11\\)\") [ [ str ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") , Any]\n\n_ class _ subgrounds.transform. LocalSyntheticField ( _ subgraph _ , _ fmeta _ , _ type_ _ , _ f _ , _ default _ , _ args _ ) #\n\nTransform used to implement synthetic fields on GraphQL objects that only depend on values accessible from that object.\n\n` transform_document() ` replaces the field ` fmeta ` by the argument fields selections ` args ` if the synthetic field ` fmeta ` is present in the document.\n\n` transform_response() ` applied ` f ` to the fields corresponding to the argument selections ` args ` and places the result in the response.\n\nsubgraph #\n\nThe subgraph to which the synthetic field's object belongs.\n\nType :\n\n[ Subgraph ](../../top_level/#subgrounds.Subgraph \"subgrounds.Subgraph\")\n\nfmeta #\n\nThe synthetic field\n\nType :\n\nTypeMeta.FieldMeta\n\ntype_ #\n\nThe object for which the synthetic field is defined\n\nType :\n\nTypeMeta.ObjectMeta | TypeMeta.InterfaceMeta\n\nf #\n\nThe function to be applied to the argument fields\n\nType :\n\nCallable\n\ndefault #\n\nThe default value of the synthetic field used in case of exceptions (e.g. : division by zero)\n\nType :\n\nAny\n\nargs #\n\nThe selections of the fields used as arguments to compute the synthetic field\n\nType :\n\n[ list ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") [ [ Selection ](../query/#subgrounds.query.Selection \"subgrounds.query.Selection\") ]\n\ntransform_document ( _ doc _ ) #\n\nMethod that will be applied to all ` Document ` objects that pass through the transformation layer.\n\nParameters :\n\n\n\n\n\ndoc*\n\n\n\n( [ _Document_ ](../query/#subgrounds.query.Document\n\n\"subgrounds.query.Document\") ) -", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0791498d-4d53-468e-847e-2af7fe6908f4": {"__data__": {"id_": "0791498d-4d53-468e-847e-2af7fe6908f4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "f4edfacd-0a2b-4bef-8485-3346b9da7b7f", "node_type": null, "metadata": {}, "hash": "f5502e3892280eb5b051d9272ad6f1f0ca559ad0b9b1d902800d54dcadfc25ea"}, "3": {"node_id": "27322c01-00c0-47e3-b951-1b35cd4940f6", "node_type": null, "metadata": {}, "hash": "79b3405f3837ba1db1d976ad4c2352913726f8e5394068cfe55ee08c66c1f58b"}}, "hash": "34b0762c945a9c6462bc9100af3018139bd75c7a06f8a5a613c6463f1b460339", "text": "The initial document\n\nReturns :\n\nThe transformed document\n\nReturn type :\n\n[ Document ](../query/#subgrounds.query.Document \"subgrounds.query.Document\")\n\ntransform_response ( _ doc _ , _ data _ ) #\n\nMethod to be applied to all response data ` data ` of requests that pass through the transformation layer.\n\n` doc ` is the initial ` Document ` object that yielded the resulting JSON data ` data ` .\n\nParameters :\n\n\n\n**doc\n\n** ( [ _Document_ ](../query/#subgrounds.query.Document \"subgrounds.query.Document\") )\n\n-- Initial document\n\nReturns :\n\nThe transformed response data\n\nReturn type :\n\n[ dict ](https://docs.python.org/3/library/stdtypes.html#dict \"\\(in Python v3.11\\)\") [ [ str ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") , Any]\n\n_ class _ subgrounds.transform. SplitTransform ( _ query _ ) #\n\ntransform_request ( _ req _ ) #\n\nMethod that will be applied to all ` DataRequest ` objects that pass through the transformation layer.\n\nParameters :\n\n\n\n\n\nreq*\n\n\n\n( [ _DataRequest_ ](../query/#subgrounds.query.DataRequest\n\n\"subgrounds.query.DataRequest\") ) -\n\n\n\nThe initial request object\n\nReturns :\n\nThe transformed request object\n\nReturn type :\n\n[ DataRequest ](../query/#subgrounds.query.DataRequest\n\n\"subgrounds.query.DataRequest\")\n\ntransform_response ( _ req _ , _ data _ ) #\n\nMethod to be applied to all response data ` data ` of requests that pass through the transformation layer.\n\n` req ` is the initial ` DataRequest ` object that yielded the resulting JSON data ` data ` .\n\nParameters :\n\n\n\n**req\n\n** ( [ _DataRequest_ ](../query/#subgrounds.query.DataRequest \"subgrounds.query.DataRequest\") )\n\n-- Initial data request object\n\nReturns :\n\nThe transformed response data\n\nReturn type :\n\n[ list ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") [ [ dict ](https://docs.python.org/3/library/stdtypes.html#dict \"\\(in Python v3.11\\)\") [ [ str ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") , Any]]\n\nOn this page\n\nTransform\n\n` RequestTransform `\n\n` RequestTransform.transform_request() `\n\n` RequestTransform.transform_response() `\n\n` DocumentTransform `\n\n` DocumentTransform.transform_document() `\n\n` DocumentTransform.transform_response() `\n\n` TypeTransform `\n\n` TypeTransform.type_ `\n\n` TypeTransform.f `\n\n` TypeTransform.transform_document() `\n\n` TypeTransform.transform_response() `\n\n` LocalSyntheticField `\n\n` LocalSyntheticField.subgraph `\n\n` LocalSyntheticField.fmeta `\n\n` LocalSyntheticField.type_ `\n\n` LocalSyntheticField.f `\n\n` LocalSyntheticField.default `\n\n` LocalSyntheticField.args `\n\n` LocalSyntheticField.transform_document() `\n\n` LocalSyntheticField.transform_response() `\n\n` SplitTransform `\n\n` SplitTransform.transform_request() `\n\n` SplitTransform.transform_response() `\n\n[ Playgrounds ](../../../../)\n\nLogo](../../../../_static/assets/pg\n\n\n\nlogotype", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "27322c01-00c0-47e3-b951-1b35cd4940f6": {"__data__": {"id_": "27322c01-00c0-47e3-b951-1b35cd4940f6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "0791498d-4d53-468e-847e-2af7fe6908f4", "node_type": null, "metadata": {}, "hash": "34b0762c945a9c6462bc9100af3018139bd75c7a06f8a5a613c6463f1b460339"}, "3": {"node_id": "c3ef5a56-3abb-4b31-8cf6-9ca6d992796e", "node_type": null, "metadata": {}, "hash": "d15523415fb74d4a2458be94933e5fad4c0cf5243825f76dbf52730313ea033c"}}, "hash": "79b3405f3837ba1db1d976ad4c2352913726f8e5394068cfe55ee08c66c1f58b", "text": "primary.svg)\n\n# Subgraph #\n\n[ Fieldpath ](fieldpath/)\n\n[ ` fieldpaths_of_object() ` ](fieldpath/#subgrounds.subgraph.fieldpath.fieldpaths_of_object)\n\n[ ` FieldPath ` ](fieldpath/#subgrounds.subgraph.fieldpath.FieldPath)\n\n[ ` FieldPath._root ` ](fieldpath/#subgrounds.subgraph.fieldpath.FieldPath._root)\n\n[ ` FieldPath._leaf ` ](fieldpath/#subgrounds.subgraph.fieldpath.FieldPath._leaf)\n\n[ ` FieldPath._merge() ` ](fieldpath/#subgrounds.subgraph.fieldpath.FieldPath._merge)\n\n[ ` FieldPath._name_path() ` ](fieldpath/#subgrounds.subgraph.fieldpath.FieldPath._name_path)\n\n[ ` FieldPath._name() ` ](fieldpath/#subgrounds.subgraph.fieldpath.FieldPath._name)\n\n[ ` FieldPath._extract_data() ` ](fieldpath/#subgrounds.subgraph.fieldpath.FieldPath._extract_data)\n\n[ ` FieldPath._selection() ` ](fieldpath/#subgrounds.subgraph.fieldpath.FieldPath._selection)\n\n[ ` FieldPath._set_arguments() ` ](fieldpath/#subgrounds.subgraph.fieldpath.FieldPath._set_arguments)\n\n[ ` FieldPath._select() ` ](fieldpath/#subgrounds.subgraph.fieldpath.FieldPath._select)\n\n[ ` FieldPath._extend() ` ](fieldpath/#subgrounds.subgraph.fieldpath.FieldPath._extend)\n\n[ ` SyntheticField ` ](fieldpath/#subgrounds.subgraph.fieldpath.SyntheticField)\n\n[ ` SyntheticField.constant() ` ](fieldpath/#subgrounds.subgraph.fieldpath.SyntheticField.constant)\n\n[ ` SyntheticField.datetime_of_timestamp() ` ](fieldpath/#subgrounds.subgraph.fieldpath.SyntheticField.datetime_of_timestamp)\n\n[ ` SyntheticField.map() ` ](fieldpath/#subgrounds.subgraph.fieldpath.SyntheticField.map)\n\n[ Filter ](filter/)\n\n[ ` Filter ` ](filter/#subgrounds.subgraph.filter.Filter)\n\n[ ` Filter.Operator ` ](filter/#subgrounds.subgraph.filter.Filter.Operator)\n\n[ Object ](object/)\n\n[ ` Object ` ](object/#subgrounds.subgraph.object.Object)\n\n[ ` Object._select() ` ](object/#subgrounds.subgraph.object.Object._select)\n\n[ Subgraph ](subgraph/)\n\n[ ` Subgraph ` ](subgraph/#subgrounds.subgraph.subgraph.Subgraph)\n\n_ class _ subgrounds.subgraph.FieldPath ( _ subgraph : 'Subgraph' _ , _ root_type : 'TypeRef.T' _ , _ type_ : 'TypeRef.T' _ , _ path : 'list[Tuple[Optional[dict[str, Any]], TypeMeta.FieldMeta]]' _ ) #\n\n_ class _ subgrounds.subgraph.Filter ( _ field : 'TypeMeta.FieldMeta' _ , _ op : 'Filter.Operator' _ , _ value : 'Any' _ ) #\n\n_ class _ Operator ( _ value _ ) #\n\nAn enumeration._ class _ subgrounds.subgraph.Object ( _ subgraph : 'Subgraph' _ , _ object : 'TypeMeta.ObjectMeta | TypeMeta.InterfaceMeta' _ ) #\n\n_ class _ subgrounds.subgraph.Subgraph ( _ url: 'str', schema: 'SchemaMeta', transforms: 'list[DocumentTransform]' = [<subgrounds.transform.TypeTransform object at 0x7fba98ae0580>, <subgrounds.transform.TypeTransform object at 0x7fba98ae0640>], is_subgraph: 'bool' = True _ ) #\n\n_ class _ subgrounds.subgraph.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c3ef5a56-3abb-4b31-8cf6-9ca6d992796e": {"__data__": {"id_": "c3ef5a56-3abb-4b31-8cf6-9ca6d992796e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "27322c01-00c0-47e3-b951-1b35cd4940f6", "node_type": null, "metadata": {}, "hash": "79b3405f3837ba1db1d976ad4c2352913726f8e5394068cfe55ee08c66c1f58b"}, "3": {"node_id": "27503548-e47a-4dc1-93cf-fa8ba904a8b6", "node_type": null, "metadata": {}, "hash": "c15075b52ab15993bbbb1d25191dad0231b95dc21fc0940cfcd6a7bf74de2721"}}, "hash": "d15523415fb74d4a2458be94933e5fad4c0cf5243825f76dbf52730313ea033c", "text": "SyntheticField ( _ f : 'Callable' _ , _ type_ : 'TypeRef.T' _ , _ deps : 'list[FieldPath | SyntheticField] | FieldPath | SyntheticField' _ , _ default : 'Any' = None _ ) #\n\n_ static _ constant ( _ value _ ) #\n\nReturns a constant ` SyntheticField ` with value ` value ` .Useful for injecting additional static data to a schema or merging entities.Parameters :\n\n**value** ( [ _str_ ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") _|_ [ _int_ ](https://docs.python.org/3/library/functions.html#int \"\\(in Python v3.11\\)\") _|_ [ _float_ ](https://docs.python.org/3/library/functions.html#float \"\\(in Python v3.11\\)\") _|_ [ _bool_ ](https://docs.python.org/3/library/functions.html#bool \"\\(in Python v3.11\\)\") ) -- The constant field's value\n\nReturns :\n\nThe constant ` SyntheticField `\n\nReturn type :\n\nSyntheticField\n\nExample:\n\n>>> from subgrounds.subgrounds import Subgrounds >>> from subgrounds.subgraph import SyntheticField >>> sg = Subgrounds() >>> univ3 = sg.load_subgraph( ... 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3' ... )\n\n# Create constant SyntheticFields\n\n>>> univ3.Mint.tx_type = SyntheticField.constant('MINT')\n\n>>> univ3.Burn.tx_type = SyntheticField.constant('BURN')\n\n# Last 10 mints and burns >>> mints = univ3.Query.mints( ... first=10, ... orderBy=univ3.Mint.timestamp, ... orderDirection='desc' ... ) >>> burns = univ3.Query.burns( ... first=10, ... orderBy=univ3.Burn.timestamp, ... orderDirection='desc' ... )\n\n# Query mints and burns.Notice that we merge the two entity tables by # setting `concat=True` and overwriting the column names (columns must # match the `FieldPaths`) >>> df = sg.query_df([ . mints.transaction.id, . mints.timestamp, . mints.tx_type, . mints.origin, . mints.amountUSD, . burns.transaction.id, . burns.timestamp, . burns.tx_type, . burns.origin, . burns.amountUSD, . ], columns=['tx_hash', 'timestamp', 'tx_type', 'origin', 'amount_USD'], concat=True)\n\n# Sort the DataFrame >>> df.sort_values(by=['timestamp'], ascending=False) tx_hash timestamp tx_type origin amount_USD 0 0xcbe1bacacc1e64fe613ae5eef2063563bd0057d1e3df. 1656016553 MINT 0x3435e7946d40b1a83c0cf154326fc6b3ca908952 7.879784e+03 1 0xdddaaddf59e5a3abff4feadef83b3ceb023a74424ea7. 1656016284 MINT 0xc747962e7e416e2a582813b1d7ad59eb83077fa6 5.110840e+04 10 0xa7671452c34a3b083083ef81e364489c2c9ee801a3b8. 1656016284 BURN 0xd40db77990bbb30514276b5ac17c3ce5cc9c951f 2.804573e+05 2 0xc132e73975e77c2c2c91fcf332018dfb01aac0ca9471.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "27503548-e47a-4dc1-93cf-fa8ba904a8b6": {"__data__": {"id_": "27503548-e47a-4dc1-93cf-fa8ba904a8b6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "c3ef5a56-3abb-4b31-8cf6-9ca6d992796e", "node_type": null, "metadata": {}, "hash": "d15523415fb74d4a2458be94933e5fad4c0cf5243825f76dbf52730313ea033c"}, "3": {"node_id": "3ceffdd7-bb55-432d-96ae-de9c0ed22675", "node_type": null, "metadata": {}, "hash": "4f03ee9c562eb8b752e2f909519d6e00dc68b908619a007652e6522e3e15d67b"}}, "hash": "c15075b52ab15993bbbb1d25191dad0231b95dc21fc0940cfcd6a7bf74de2721", "text": "1656015853 MINT 0xc747962e7e416e2a582813b1d7ad59eb83077fa6 5.122569e+04 3 0x1444744f4021a2046787c1b7b88cd9ac21f071c65acc. 1656015773 MINT 0xd11aa2e3a000275ed12b87515c9ac0d67b32e7b9 8.897983e+03 4 0x3315617d426fc2b0db5d8dbccd549efaa8f1ae2969ca. 1656015693 MINT 0xb7dd4d134b1794ee848e1af1a62b85d7b2ea9301 0.000000e+00 11 0xcc713daa2dc58cd1f2218c8f438e7fcf04d2e9c7c83d. 1656015278 BURN 0xa7c43e2057d89b6946b8865efc8bee3a4ea7d28d 1.254942e+06 5 0x7bbfae86f0c3c983651bd0671557cd851fc301317c06. 1656015111 MINT 0xac56cee8ccd00d0c1d72ce3415140874552e80f4 3.432075e+04 12 0xea21c3a68a8f0c6a2721a3072e0c8b2edc77f4d2f0d9. 1656014785 BURN 0x0709b103d46d71458a71e5d81230dd688809a53d 2.059106e+04 6 0x3bd369bf45c55cab40c62db81bb3e0684fd85fe2b662.\n\n1656014120 MINT 0x509984bfc0fb24e2d1377cfec224d3afec4c341e 2.517578e+03 13 0x1ea59da77c442479af8fb51501a931260d473e249de7. 1656014018 BURN 0x509984bfc0fb24e2d1377cfec224d3afec4c341e 0.000000e+00 7 0xb9d31ef78b8bf786b422d948dd1fba246710078abff8. 1656013998 MINT 0x22dfec183294d257f80c15d3c9cd47495bdc728c 8.365750e+04 14 0xc5e3ec84a2860e3c3a055ccdced435a67b4aff4dd3be. 1656013946 BURN 0xac56cee8ccd00d0c1d72ce3415140874552e80f4 3.363809e+04 8 0x7c736255d9a4ebf4781069a1b2a929ad89100f1af980. 1656013913 MINT 0x4ce6aea89f059915ae5efbf34a2a8adc544ae09e 4.837287e+04 15 0x95cf56b9eb69aa45048a9b7b3e472df5bc3bfad591cd. 1656013728 BURN 0x4ce6aea89f059915ae5efbf34a2a8adc544ae09e 5.110010e+04 9 0x76dd2bbf43485c224471dd823c2992178f031f27194b. 1656013599 MINT 0x234a644868c419ce0dcdd9fd539762eba47f3759 5.363896e+03 16 0x47e595b02fdcb51ff42a5008e53be7ee3bdf8063b580. 1656013580 BURN 0xaf0fdd39e5d92499b0ed9f68693da99c0ec1e92e 0.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "3ceffdd7-bb55-432d-96ae-de9c0ed22675": {"__data__": {"id_": "3ceffdd7-bb55-432d-96ae-de9c0ed22675", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "27503548-e47a-4dc1-93cf-fa8ba904a8b6", "node_type": null, "metadata": {}, "hash": "c15075b52ab15993bbbb1d25191dad0231b95dc21fc0940cfcd6a7bf74de2721"}, "3": {"node_id": "6dcc5551-b7ec-4101-a79b-6cf88bcd0e2e", "node_type": null, "metadata": {}, "hash": "9903bc54ef7753e67a8f270e885e6992ebdc644af3f9e6f51d5e16faaca66752"}}, "hash": "4f03ee9c562eb8b752e2f909519d6e00dc68b908619a007652e6522e3e15d67b", "text": "000000e+00 17 0xe20ec9702f455d74b3cc1f54fe2f3450604ca5037a72. 1656013455 BURN 0xaf0fdd39e5d92499b0ed9f68693da99c0ec1e92e 0.000000e+00 18 0xac3e95666be3a45fdfbbfa513a114136ea6ecffb9de2. 1656013237 BURN 0x665d2d2444f2384fb3d96aaa0ea3536b92984dce 2.254100e+05 19 0x01c3424a48c36104ea388482723347f15c0bc1bb1a80. 1656013034 BURN 0x0084ee6c8893c01e252198b56ec127443dc27464 0.000000e+00\n\n_ static _ datetime_of_timestamp ( _ timestamp _ ) #\n\nReturns a ` SyntheticField ` that will transform the ` FieldPath ` ` timestamp ` into a human-readable ISO8601 string.Parameters :\n\nrepresenting a Unix timestamp field.Returns :\n\nAn ISO8601 datetime string ` SyntheticField ` .Return type :\n\nSyntheticField\n\nExample:\n\n>>> from subgrounds.subgrounds import Subgrounds >>> from subgrounds.subgraph import SyntheticField >>> sg = Subgrounds() >>> univ3 = sg.load_subgraph( ... 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3' ... )\n\n# Create datetime SyntheticField\n\n>>> univ3.Swap.datetime = SyntheticField.datetime_of_timestamp(univ3.Swap.timestamp)\n\n# Query 100 swaps >>> sg.query_df([ ... univ3.Query.swaps.timestamp, ... univ3.Query.swaps.datetime, ... ]) swaps_timestamp swaps_datetime 0 1625105710 2021-06-30 22:15:10 1 1629253724 2021-08-17 22:28:44 2 1647333277 2022-03-15 04:34:37 3 1630801974 2021-09-04 20:32:54 4 1653240241 2022-05-22 13:24:01 .. ... ... 95 1646128326 2022-03-01 04:52:06 96 1646128326 2022-03-01 04:52:06 97 1626416555 2021-07-16 02:22:35 98 1626416555 2021-07-16 02:22:35 99 1625837291 2021-07-09 09:28:11\n\n_ static _ map ( _ dict _ , _ type_ _ , _ fpath _ , _ default = None _ ) #\n\nReturns a SyntheticField that will map the values of ` fpath ` using the key value pairs in ` dict ` .If a value is not in the dictionary, then ` default ` will be used instead.Parameters :", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "6dcc5551-b7ec-4101-a79b-6cf88bcd0e2e": {"__data__": {"id_": "6dcc5551-b7ec-4101-a79b-6cf88bcd0e2e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "3ceffdd7-bb55-432d-96ae-de9c0ed22675", "node_type": null, "metadata": {}, "hash": "4f03ee9c562eb8b752e2f909519d6e00dc68b908619a007652e6522e3e15d67b"}, "3": {"node_id": "949f6e0e-546b-4fac-af73-10bfb5083816", "node_type": null, "metadata": {}, "hash": "4fcb53991c6e568416bea2a3cc3b24a59a1830cdba2807e945213aa2cbb3e138"}}, "hash": "9903bc54ef7753e67a8f270e885e6992ebdc644af3f9e6f51d5e16faaca66752", "text": "**type\n\n** ( _TypeRef.T_ )\n\n-- The type of the resulting field\n\nReturns :\n\nA map SyntheticField\n\nReturn type :\n\nSyntheticField\n\nExample:\n\n>>> from subgrounds.subgrounds import Subgrounds >>> from subgrounds.subgraph import SyntheticField >>> sg = Subgrounds() >>> univ3 = sg.load_subgraph( ... 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3' ... )\n\n# Hand-crafted mapping of pool addresses to symbol >>> pooladdr_symbol_map = { ... '0x5777d92f208679db4b9778590fa3cab3ac9e2168': 'DAI/USDC-001', ... '0x6c6bc977e13df9b0de53b251522280bb72383700': 'DAI/USDC-005', ... '0x8ad599c3a0ff1de082011efddc58f1908eb6e6d8': 'USDC/ETH-030', ... '0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640': 'USDC/ETH-005', ... }\n\n# Create map SyntheticField using our dictionary with 'UNKNOWN' as the # default value >>> univ3.Pool.symbol = SyntheticField.map( ... pooladdr_symbol_map, ... SyntheticField.STRING, ... univ3.Pool.id, ... 'UNKNOWN' ... )\n\n# Query top 10 pools by TVL >>> pools = univ3.Query.pools( ... first=10, ... orderBy=univ3.Pool.totalValueLockedUSD, ... orderDirection='desc' ... ) >>> sg.query_df([ ... pools.id, ... pools.symbol ... ]) pools_id pools_symbol 0 0xa850478adaace4c08fc61de44d8cf3b64f359bec UNKNOWN 1 0x5777d92f208679db4b9778590fa3cab3ac9e2168 DAI/USDC-001 2 0x6c6bc977e13df9b0de53b251522280bb72383700 DAI/USDC-005 3 0x8ad599c3a0ff1de082011efddc58f1908eb6e6d8 USDC/ETH-030 4 0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640 USDC/ETH-005 5 0x3416cf6c708da44db2624d63ea0aaef7113527c6 UNKNOWN 6 0xcbcdf9626bc03e24f779434178a73a0b4bad62ed UNKNOWN 7 0xc63b0708e2f7e69cb8a1df0e1389a98c35a76d52 UNKNOWN 8 0x4585fe77225b41b697c938b018e2ac67ac5a20c0 UNKNOWN 9 0x4e68ccd3e89f51c3074ca5072bbac773960dfa36 UNKNOWN\n\nOn this page\n\nSubgraph\n\n` FieldPath `\n\n` Filter `\n\n` Filter.Operator `\n\n` Object `\n\n` Subgraph `\n\n` SyntheticField `\n\n` SyntheticField.constant() `\n\n` SyntheticField.datetime_of_timestamp() `\n\n` SyntheticField.map() `\n\n[ Playgrounds ](../../../../../)\n\nLogo](../../../../../_static/assets/pg\n\n\n\nlogotype\n\n\n\nprimary.svg)\n\n# Fieldpath #\n\nsubgrounds.subgraph.fieldpath. fieldpaths_of_object ( _ subgraph _ , _ object_ _ ) #\n\nReturns generator of FieldPath objects that selects all non-list fields of GraphQL Object of Interface ` object_ ` .\n\nParameters :\n\n\n\n**schema\n\n** ( [ _SchemaMeta_ ](../../schema/#subgrounds.schema.SchemaMeta \"subgrounds.schema.SchemaMeta\") )\n\n-- _description_\n\nYields :\n\n__type__ \\-", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "949f6e0e-546b-4fac-af73-10bfb5083816": {"__data__": {"id_": "949f6e0e-546b-4fac-af73-10bfb5083816", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "6dcc5551-b7ec-4101-a79b-6cf88bcd0e2e", "node_type": null, "metadata": {}, "hash": "9903bc54ef7753e67a8f270e885e6992ebdc644af3f9e6f51d5e16faaca66752"}, "3": {"node_id": "3f12f444-d3b1-4d72-81fa-9b7e2fc4dfea", "node_type": null, "metadata": {}, "hash": "2ba1d7058b15479ee89fe3f25e7811b3385e09e2e22213dc35d5bee528d0d846"}}, "hash": "4fcb53991c6e568416bea2a3cc3b24a59a1830cdba2807e945213aa2cbb3e138", "text": "_description_\n\n_ class _ subgrounds.subgraph.fieldpath. FieldPath ( _ subgraph : 'Subgraph' _ , _ root_type : 'TypeRef.T' _ , _ type_ : 'TypeRef.T' _ , _ path : 'list[Tuple[Optional[dict[str, Any]], TypeMeta.FieldMeta]]' _ ) #\n\nReturns the type information of the root field of the current ` FieldPath `\n\nReturns :\n\nType information of the root field of the current ` FieldPath `\n\nReturn type :\n\nTypeMeta.FieldMeta\n\nReturns the type information of the leaf field of the current ` FieldPath `\n\nReturns :\n\nType information of the leaf field of the current ` FieldPath `\n\nReturn type :\n\nTypeMeta.FieldMeta\n\nReturns a Selection tree containing all selection paths in fpaths . This function assumes that all fieldpaths in fpaths belong to the same subgraph\n\nParameters :\n\n\n\n\n\nfpaths*\n\n\n\n( [ _list_ ](https://docs.python.org/3/library/stdtypes.html#list\n\nReturns :\n\n_description_\n\nReturn type :\n\n[ list ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") [ [ Selection ](../../query/#subgrounds.query.Selection \"subgrounds.query.Selection\") ]\n\n_name_path ( _ use_aliases = False _ ) #\n\nReturns a list of strings correspoding to the names of all fields selected in the current ` FieldPath ` . If ` use_aliases ` is True, then if a field has an automatically generated alias, the alias will be returned.\n\nParameters :\n\n\n\n**alias\n\n** ( _fields' automatically generated_ )\n\n--\n\nReturns :\n\nList of field names selected in the current ` FieldPath `\n\nReturn type :\n\n[ list ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") [ [ str ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") ]\n\n_name ( _ use_aliases = False _ ) #\n\nGenerates the name of the current ` FieldPath ` using the names of the fields it selects. If ` use_aliases ` is True, then if a field has an automatically generated alias, the alias will be used.\n\nParameters :\n\n\n\n**alias\n\n** ( _fields' automatically generated_ )\n\n--\n\nReturns :\n\nThe generated name of the current ` FieldPath ` .Return type :\n\n[ str ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\")\n\n_extract_data ( _ data _ ) #\n\nExtract the data corresponding to the current ` FieldPath ` from the dictionary ` data ` .Parameters :\n\n**data** ( [ _dict_ ](https://docs.python.org/3/library/stdtypes.html#dict \"\\(in Python v3.11\\)\") _|_ [ _list_ ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") _[_ [ _dict_ ](https://docs.python.org/3/library/stdtypes.html#dict \"\\(in Python v3.11\\)\") _]_ ) -- Data dictionary that contains the data\n\n:param corresponding to the current ` FieldPath ` .:\n\nReturns :\n\nData corresponding to the current ` FieldPath ` .Return type :\n\n[ list ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") [Any] | Any\n\n_selection ( ) #\n\nReturns a selection or list of selections corresponding to the current ` FieldPath ` .", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "3f12f444-d3b1-4d72-81fa-9b7e2fc4dfea": {"__data__": {"id_": "3f12f444-d3b1-4d72-81fa-9b7e2fc4dfea", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "949f6e0e-546b-4fac-af73-10bfb5083816", "node_type": null, "metadata": {}, "hash": "4fcb53991c6e568416bea2a3cc3b24a59a1830cdba2807e945213aa2cbb3e138"}, "3": {"node_id": "5d7f4772-81ff-4dd6-a39b-4959652e9917", "node_type": null, "metadata": {}, "hash": "033b38a2e7af9da909a532b32840c3517540d584b80e62e1d52c2b21fad53f7d"}}, "hash": "2ba1d7058b15479ee89fe3f25e7811b3385e09e2e22213dc35d5bee528d0d846", "text": "Returns :\n\n_description_\n\nReturn type :\n\n[ Selection ](../../query/#subgrounds.query.Selection\n\n\"subgrounds.query.Selection\") | [ list\n\n](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\")\n\n[ [ Selection ](../../query/#subgrounds.query.Selection\n\n\"subgrounds.query.Selection\") ]\n\n_set_arguments ( _ args _ , _ selection = [] _ ) #\n\nSet the arguments to the leaf of the current ` FieldPath ` .The method returns the ` self ` .Parameters :\n\nReturns :\n\n_description_\n\nReturn type :\n\nFieldPath\n\n_select ( _ name _ ) #\n\nReturns a new FieldPath corresponding to the FieldPath self extended with an additional selection on the field named name .:param name: The name of the field to expand on the leaf of fpath :type name: str\n\nRaises :\n\n[\n\n**TypeError\n\n** ](https://docs.python.org/3/library/exceptions.html#TypeError \"\\(in Python v3.11\\)\") \\\n\n-- [description]\n\n[\n\n**TypeError\n\n** ](https://docs.python.org/3/library/exceptions.html#TypeError \"\\(in Python v3.11\\)\") \\\n\n-- [description]\n\n[\n\n**TypeError\n\n** ](https://docs.python.org/3/library/exceptions.html#TypeError \"\\(in Python v3.11\\)\") \\\n\n-- [description]\n\nReturns :\n\nA new FieldPath containing fpath extended with the field named name\n\nReturn type :\n\nFieldPath\n\n_extend ( _ ext _ ) #\n\nExtends the current ` FieldPath ` with the ` FieldPath ` ` ext ` .` ext ` must start where the current ` FieldPath ` ends.Parameters :\n\n**ext** ( _FieldPath_ ) -- The ` FieldPath ` representing the extension\n\nRaises :\n\n[\n\n**TypeError\n\n** ](https://docs.python.org/3/library/exceptions.html#TypeError \"\\(in Python v3.11\\)\") \\\n\n-- [description]\n\n[\n\n**TypeError\n\n** ](https://docs.python.org/3/library/exceptions.html#TypeError \"\\(in Python v3.11\\)\") \\\n\n-- [description]\n\n[\n\n**TypeError\n\n** ](https://docs.python.org/3/library/exceptions.html#TypeError \"\\(in Python v3.11\\)\") \\\n\n-- [description]\n\nReturns :\n\nA new ` FieldPath ` containing the initial current ` FieldPath ` extended with ` ext `\n\nReturn type :\n\nFieldPath\n\n_ class _ subgrounds.subgraph.fieldpath.SyntheticField ( _ f : 'Callable' _ , _ type_ : 'TypeRef.T' _ , _ deps : 'list[FieldPath | SyntheticField] | FieldPath | SyntheticField' _ , _ default : 'Any' = None _ ) #\n\n_ static _ constant ( _ value _ ) #\n\nReturns a constant ` SyntheticField ` with value ` value ` .Useful for injecting additional static data to a schema or merging entities.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5d7f4772-81ff-4dd6-a39b-4959652e9917": {"__data__": {"id_": "5d7f4772-81ff-4dd6-a39b-4959652e9917", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "3f12f444-d3b1-4d72-81fa-9b7e2fc4dfea", "node_type": null, "metadata": {}, "hash": "2ba1d7058b15479ee89fe3f25e7811b3385e09e2e22213dc35d5bee528d0d846"}, "3": {"node_id": "6059e66f-8e9c-442e-b929-bd183fda6911", "node_type": null, "metadata": {}, "hash": "dd2f404edc522a3438d1b5d50d90c263e553e19c6e2d11d6cbaa4f2a888945ab"}}, "hash": "033b38a2e7af9da909a532b32840c3517540d584b80e62e1d52c2b21fad53f7d", "text": "Parameters :\n\n**value** ( [ _str_ ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") _|_ [ _int_ ](https://docs.python.org/3/library/functions.html#int \"\\(in Python v3.11\\)\") _|_ [ _float_ ](https://docs.python.org/3/library/functions.html#float \"\\(in Python v3.11\\)\") _|_ [ _bool_ ](https://docs.python.org/3/library/functions.html#bool \"\\(in Python v3.11\\)\") ) -- The constant field's value\n\nReturns :\n\nThe constant ` SyntheticField `\n\nReturn type :\n\nSyntheticField\n\nExample:\n\n>>> from subgrounds.subgrounds import Subgrounds >>> from subgrounds.subgraph import SyntheticField >>> sg = Subgrounds() >>> univ3 = sg.load_subgraph( ... 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3' ... )\n\n# Create constant SyntheticFields\n\n>>> univ3.Mint.tx_type = SyntheticField.constant('MINT')\n\n>>> univ3.Burn.tx_type = SyntheticField.constant('BURN')\n\n# Last 10 mints and burns >>> mints = univ3.Query.mints( ... first=10, ... orderBy=univ3.Mint.timestamp, ... orderDirection='desc' ... ) >>> burns = univ3.Query.burns( ... first=10, ... orderBy=univ3.Burn.timestamp, ... orderDirection='desc' ... )\n\n# Query mints and burns.Notice that we merge the two entity tables by # setting `concat=True` and overwriting the column names (columns must # match the `FieldPaths`) >>> df = sg.query_df([ . mints.transaction.id, . mints.timestamp, . mints.tx_type, . mints.origin, . mints.amountUSD, . burns.transaction.id, . burns.timestamp, . burns.tx_type, . burns.origin, . burns.amountUSD, . ], columns=['tx_hash', 'timestamp', 'tx_type', 'origin', 'amount_USD'], concat=True)\n\n# Sort the DataFrame >>> df.sort_values(by=['timestamp'], ascending=False) tx_hash timestamp tx_type origin amount_USD 0 0xcbe1bacacc1e64fe613ae5eef2063563bd0057d1e3df. 1656016553 MINT 0x3435e7946d40b1a83c0cf154326fc6b3ca908952 7.879784e+03 1 0xdddaaddf59e5a3abff4feadef83b3ceb023a74424ea7. 1656016284 MINT 0xc747962e7e416e2a582813b1d7ad59eb83077fa6 5.110840e+04 10 0xa7671452c34a3b083083ef81e364489c2c9ee801a3b8. 1656016284 BURN 0xd40db77990bbb30514276b5ac17c3ce5cc9c951f 2.804573e+05 2 0xc132e73975e77c2c2c91fcf332018dfb01aac0ca9471. 1656015853 MINT 0xc747962e7e416e2a582813b1d7ad59eb83077fa6 5.122569e+04 3 0x1444744f4021a2046787c1b7b88cd9ac21f071c65acc. 1656015773 MINT 0xd11aa2e3a000275ed12b87515c9ac0d67b32e7b9 8.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "6059e66f-8e9c-442e-b929-bd183fda6911": {"__data__": {"id_": "6059e66f-8e9c-442e-b929-bd183fda6911", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "5d7f4772-81ff-4dd6-a39b-4959652e9917", "node_type": null, "metadata": {}, "hash": "033b38a2e7af9da909a532b32840c3517540d584b80e62e1d52c2b21fad53f7d"}, "3": {"node_id": "d4e5c146-261f-4786-870c-e798469a42df", "node_type": null, "metadata": {}, "hash": "8cb73516130b01ffc4b17db5f924dd2bcc7586a3d111645d17dcef349ec4ec60"}}, "hash": "dd2f404edc522a3438d1b5d50d90c263e553e19c6e2d11d6cbaa4f2a888945ab", "text": "897983e+03 4 0x3315617d426fc2b0db5d8dbccd549efaa8f1ae2969ca. 1656015693 MINT 0xb7dd4d134b1794ee848e1af1a62b85d7b2ea9301 0.000000e+00 11 0xcc713daa2dc58cd1f2218c8f438e7fcf04d2e9c7c83d. 1656015278 BURN 0xa7c43e2057d89b6946b8865efc8bee3a4ea7d28d 1.254942e+06 5 0x7bbfae86f0c3c983651bd0671557cd851fc301317c06. 1656015111 MINT 0xac56cee8ccd00d0c1d72ce3415140874552e80f4 3.432075e+04 12 0xea21c3a68a8f0c6a2721a3072e0c8b2edc77f4d2f0d9. 1656014785 BURN 0x0709b103d46d71458a71e5d81230dd688809a53d 2.059106e+04 6 0x3bd369bf45c55cab40c62db81bb3e0684fd85fe2b662.\n\n1656014120 MINT 0x509984bfc0fb24e2d1377cfec224d3afec4c341e 2.517578e+03 13 0x1ea59da77c442479af8fb51501a931260d473e249de7. 1656014018 BURN 0x509984bfc0fb24e2d1377cfec224d3afec4c341e 0.000000e+00 7 0xb9d31ef78b8bf786b422d948dd1fba246710078abff8. 1656013998 MINT 0x22dfec183294d257f80c15d3c9cd47495bdc728c 8.365750e+04 14 0xc5e3ec84a2860e3c3a055ccdced435a67b4aff4dd3be. 1656013946 BURN 0xac56cee8ccd00d0c1d72ce3415140874552e80f4 3.363809e+04 8 0x7c736255d9a4ebf4781069a1b2a929ad89100f1af980. 1656013913 MINT 0x4ce6aea89f059915ae5efbf34a2a8adc544ae09e 4.837287e+04 15 0x95cf56b9eb69aa45048a9b7b3e472df5bc3bfad591cd. 1656013728 BURN 0x4ce6aea89f059915ae5efbf34a2a8adc544ae09e 5.110010e+04 9 0x76dd2bbf43485c224471dd823c2992178f031f27194b. 1656013599 MINT 0x234a644868c419ce0dcdd9fd539762eba47f3759 5.363896e+03 16 0x47e595b02fdcb51ff42a5008e53be7ee3bdf8063b580. 1656013580 BURN 0xaf0fdd39e5d92499b0ed9f68693da99c0ec1e92e 0.000000e+00 17 0xe20ec9702f455d74b3cc1f54fe2f3450604ca5037a72. 1656013455 BURN 0xaf0fdd39e5d92499b0ed9f68693da99c0ec1e92e 0.000000e+00 18 0xac3e95666be3a45fdfbbfa513a114136ea6ecffb9de2.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d4e5c146-261f-4786-870c-e798469a42df": {"__data__": {"id_": "d4e5c146-261f-4786-870c-e798469a42df", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "6059e66f-8e9c-442e-b929-bd183fda6911", "node_type": null, "metadata": {}, "hash": "dd2f404edc522a3438d1b5d50d90c263e553e19c6e2d11d6cbaa4f2a888945ab"}, "3": {"node_id": "4c447626-e273-4907-ad81-7652748fefef", "node_type": null, "metadata": {}, "hash": "13beeb88711abcad2bd89112f50ac50efb5f55f1745b51b7f1a311f1698415c1"}}, "hash": "8cb73516130b01ffc4b17db5f924dd2bcc7586a3d111645d17dcef349ec4ec60", "text": "1656013237 BURN 0x665d2d2444f2384fb3d96aaa0ea3536b92984dce 2.254100e+05 19 0x01c3424a48c36104ea388482723347f15c0bc1bb1a80. 1656013034 BURN 0x0084ee6c8893c01e252198b56ec127443dc27464 0.000000e+00\n\n_ static _ datetime_of_timestamp ( _ timestamp _ ) #\n\nReturns a ` SyntheticField ` that will transform the ` FieldPath ` ` timestamp ` into a human-readable ISO8601 string.Parameters :\n\nrepresenting a Unix timestamp field.Returns :\n\nAn ISO8601 datetime string ` SyntheticField ` .Return type :\n\nSyntheticField\n\nExample:\n\n>>> from subgrounds.subgrounds import Subgrounds >>> from subgrounds.subgraph import SyntheticField >>> sg = Subgrounds() >>> univ3 = sg.load_subgraph( ... 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3' ... )\n\n# Create datetime SyntheticField\n\n>>> univ3.Swap.datetime = SyntheticField.datetime_of_timestamp(univ3.Swap.timestamp)\n\n# Query 100 swaps >>> sg.query_df([ ... univ3.Query.swaps.timestamp, ... univ3.Query.swaps.datetime, ... ]) swaps_timestamp swaps_datetime 0 1625105710 2021-06-30 22:15:10 1 1629253724 2021-08-17 22:28:44 2 1647333277 2022-03-15 04:34:37 3 1630801974 2021-09-04 20:32:54 4 1653240241 2022-05-22 13:24:01 .. ... ... 95 1646128326 2022-03-01 04:52:06 96 1646128326 2022-03-01 04:52:06 97 1626416555 2021-07-16 02:22:35 98 1626416555 2021-07-16 02:22:35 99 1625837291 2021-07-09 09:28:11\n\n_ static _ map ( _ dict _ , _ type_ _ , _ fpath _ , _ default = None _ ) #\n\nReturns a SyntheticField that will map the values of ` fpath ` using the key value pairs in ` dict ` .If a value is not in the dictionary, then ` default ` will be used instead.Parameters :", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4c447626-e273-4907-ad81-7652748fefef": {"__data__": {"id_": "4c447626-e273-4907-ad81-7652748fefef", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "d4e5c146-261f-4786-870c-e798469a42df", "node_type": null, "metadata": {}, "hash": "8cb73516130b01ffc4b17db5f924dd2bcc7586a3d111645d17dcef349ec4ec60"}, "3": {"node_id": "aa0079f1-5296-470a-be4d-82d7dcaf243d", "node_type": null, "metadata": {}, "hash": "3b48d9282e1904bc3f283c28f5cacea71184affab0b1e89ba6d71a8e97a1cfe6"}}, "hash": "13beeb88711abcad2bd89112f50ac50efb5f55f1745b51b7f1a311f1698415c1", "text": "**type\n\n** ( _TypeRef.T_ )\n\n-- The type of the resulting field\n\nReturns :\n\nA map SyntheticField\n\nReturn type :\n\nSyntheticField\n\nExample:\n\n>>> from subgrounds.subgrounds import Subgrounds >>> from subgrounds.subgraph import SyntheticField >>> sg = Subgrounds() >>> univ3 = sg.load_subgraph( ... 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3' ... )\n\n# Hand-crafted mapping of pool addresses to symbol >>> pooladdr_symbol_map = { ... '0x5777d92f208679db4b9778590fa3cab3ac9e2168': 'DAI/USDC-001', ... '0x6c6bc977e13df9b0de53b251522280bb72383700': 'DAI/USDC-005', ... '0x8ad599c3a0ff1de082011efddc58f1908eb6e6d8': 'USDC/ETH-030', ... '0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640': 'USDC/ETH-005', ... }\n\n# Create map SyntheticField using our dictionary with 'UNKNOWN' as the # default value >>> univ3.Pool.symbol = SyntheticField.map( ... pooladdr_symbol_map, ... SyntheticField.STRING, ... univ3.Pool.id, ... 'UNKNOWN' ... )\n\n# Query top 10 pools by TVL >>> pools = univ3.Query.pools( ... first=10, ... orderBy=univ3.Pool.totalValueLockedUSD, ... orderDirection='desc' ... ) >>> sg.query_df([ ... pools.id, ... pools.symbol ... ]) pools_id pools_symbol 0 0xa850478adaace4c08fc61de44d8cf3b64f359bec UNKNOWN 1 0x5777d92f208679db4b9778590fa3cab3ac9e2168 DAI/USDC-001 2 0x6c6bc977e13df9b0de53b251522280bb72383700 DAI/USDC-005 3 0x8ad599c3a0ff1de082011efddc58f1908eb6e6d8 USDC/ETH-030 4 0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640 USDC/ETH-005 5 0x3416cf6c708da44db2624d63ea0aaef7113527c6 UNKNOWN 6 0xcbcdf9626bc03e24f779434178a73a0b4bad62ed UNKNOWN 7 0xc63b0708e2f7e69cb8a1df0e1389a98c35a76d52 UNKNOWN 8 0x4585fe77225b41b697c938b018e2ac67ac5a20c0 UNKNOWN 9 0x4e68ccd3e89f51c3074ca5072bbac773960dfa36 UNKNOWN\n\nOn this page\n\nFieldpath\n\n` fieldpaths_of_object() `\n\n` FieldPath `\n\n` FieldPath._root `\n\n` FieldPath._leaf `\n\n` FieldPath._merge() `\n\n` FieldPath._name_path() `\n\n` FieldPath._name() `\n\n` FieldPath._extract_data() `\n\n` FieldPath._selection() `\n\n` FieldPath._set_arguments() `\n\n` FieldPath._select() `\n\n` FieldPath._extend() `\n\n` SyntheticField `\n\n` SyntheticField.constant() `\n\n` SyntheticField.datetime_of_timestamp() `\n\n` SyntheticField.map() `\n\n[ Playgrounds ](../../../../)\n\nLogo](../../../../_static/assets/pg\n\n\n\nlogotype", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "aa0079f1-5296-470a-be4d-82d7dcaf243d": {"__data__": {"id_": "aa0079f1-5296-470a-be4d-82d7dcaf243d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "4c447626-e273-4907-ad81-7652748fefef", "node_type": null, "metadata": {}, "hash": "13beeb88711abcad2bd89112f50ac50efb5f55f1745b51b7f1a311f1698415c1"}, "3": {"node_id": "040fe259-3f70-46fe-8675-ac6a79689ede", "node_type": null, "metadata": {}, "hash": "cb7d5b54e8bf6f9b997dc731303bae1d4a2aa1e97a29468f90ce0df718148ca2"}}, "hash": "3b48d9282e1904bc3f283c28f5cacea71184affab0b1e89ba6d71a8e97a1cfe6", "text": "primary.svg)\n\n# Query #\n\nCaution\n\nThis module will be broken into a subpackage in the future. As always, internal APIs are **not** subject to the semver policy this repo holds.\n\nQuery data structure module\n\nThis module contains various data structures in the form of dataclasses that are used to represent GraphQL queries in Subgrounds using an AST-like approach. To the extent possible, these dataclasses are immutable (i.e. : ` frozen=True ` ) to enforce a functional programming style and reduce side- effects.\n\nA typical Subgrounds request will have the following dataclass hierarchy:\n\nDataRequest \u2514\u2500\u2500 Document \u2514\u2500\u2500 Query \u251c\u2500\u2500 VariableDefinition \u2502 \u2514\u2500\u2500 InputValue \u2514\u2500\u2500 Selection \u251c\u2500\u2500 Argument \u2502 \u2514\u2500\u2500 InputValue \u2514\u2500\u2500 Selection\n\n_ class _ subgrounds.query. VariableDefinition ( _ name _ , _ type_ _ , _ default = None _ ) #\n\nRepresentation of a GraphQL variable definition\n\nname #\n\nName of the argument\n\nType :\n\n[ str ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\")\n\ntype_ #\n\nGraphQL type of the argument\n\nType :\n\nTypeRef.T\n\ndefault #\n\nDefault value of the variable. Defaults to None.\n\nType :\n\nInputValue.T, optional\n\n_ property _ graphql _ : [ str ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") _ #\n\nReturns the GraphQL string representation of the variable definition\n\nExample:\n\n>>> vardef = VariableDefinition( ... name='foo', ... type_=TypeRef.NonNull(TypeRef.Named(name=\"Int\", kind=\"SCALAR\")), ... default=InputValue.Int(100) ... ) >>> print(vardef.graphql) $foo: Int! = 100\n\nReturns :\n\nThe GraphQL string representation of the variable definition\n\nReturn type :\n\n[ str ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\")\n\n_ class _ subgrounds.query. Argument ( _ name : 'str' _ , _ value : 'InputValue.T' _ ) #\n\n_ class _ subgrounds.query. Selection ( _ fmeta _ , _ alias=None _ , _ arguments=<factory> _ , _ selection=<factory> _ ) #\n\nRepresents a GraphQL field selection.\n\nfmeta #\n\nThe type definition of the field being selected.\n\nType :\n\nTypeMeta.FieldMeta\n\nalias #\n\nThe alias of the field selection. Defaults to None.\n\nType :\n\n[ str ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") , optional\n\narguments #\n\nThe arguments, if any, of the field selection. Defaults to [].\n\nType :\n\n[ list ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") [ Argument ]\n\nselection #\n\nThe inner field selections, if any. Defaults to [].\n\nType :\n\n[ list ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") [ Selection ]\n\niter ( ) #\n\nReturns an iterator over all ` Selections ` of the current selection tree.\n\niter_args ( _ recurse = True _ ) #\n\nReturns an iterator over all ` Arguments ` of the current ` Selection ` .\n\nIf ` recurse == True ` , then the iterator also includes ` Arguments ` of inner ` Selections ` .\n\nfilter ( _ predicate _ ) #\n\nReturns a new ` Selection ` object containing all attributes of the current ` Selection ` if ` predicate(self) == True ` and ` None ` otherwise. The function if also applied recursively to inner ` Selections ` .\n\nParameters :\n\n](https://docs.python.org/3/library/functions.html#bool \"\\(in Python v3.11\\)\")\n\n_]_ ) -", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "040fe259-3f70-46fe-8675-ac6a79689ede": {"__data__": {"id_": "040fe259-3f70-46fe-8675-ac6a79689ede", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "aa0079f1-5296-470a-be4d-82d7dcaf243d", "node_type": null, "metadata": {}, "hash": "3b48d9282e1904bc3f283c28f5cacea71184affab0b1e89ba6d71a8e97a1cfe6"}, "3": {"node_id": "d2bffe09-495c-49c0-97c3-f2b1d488ce96", "node_type": null, "metadata": {}, "hash": "5a5ccad0da7780dce9a98f62dd8921f3f9cb180dba5f33c6bab66cf2e700efa8"}}, "hash": "cb7d5b54e8bf6f9b997dc731303bae1d4a2aa1e97a29468f90ce0df718148ca2", "text": "_description_\n\nReturns :\n\n_description_\n\nReturn type :\n\nOptional[ Selection ]\n\nfilter_args ( _ predicate _ , _ recurse = True _ ) #\n\nReturns a new ` Selection ` object which contains all attributes of the current ` Selection ` except for ` Arguments ` for which ` predicate(arg) == True ` .\n\nIf ` recurse == True ` , then the function is applied recursively to inner ` Selections `\n\nParameters :\n\nReturns :\n\n_description_\n\nReturn type :\n\nSelection\n\nmap ( _ map_f _ , _ priority = 'self' _ ) #\n\nReturns a new ` Selection ` object containing the same selection tree as the current ` Selection ` where each ` Selection ` object ` s ` is ` map_f(s) `\n\nParameters :\n\nMapping function to apply to each ` Selection `\n\nReturns :\n\n_description_\n\nReturn type :\n\nSelection\n\nmap_args ( _ map_f _ , _ recurse = True _ ) #\n\nReplaces each ` Argument ` ` arg ` in the current ` Selection ` with ` map_f(arg) ` and returns a new ` Selection ` object containinf the modified arguments.\n\nIf ` recurse == True ` , then the function is applied recursively to inner ` Selections ` .\n\nParameters :\n\nReturns :\n\n_description_\n\nReturn type :\n\nSelection\n\ncontains_list ( ) #\n\nReturns True i.f.f. the selection ` self ` selects a field of type list.\n\nParameters :\n\n**self** ( _Selection_ ) -- The selection to traverse\n\nReturns :\n\nTrue if selection or nested selections selects a list field. False otherwise.\n\nReturn type :\n\n[ bool ](https://docs.python.org/3/library/functions.html#bool \"\\(in Python v3.11\\)\")\n\nsplit ( ) #\n\nReturns a list of selections where each of the selections corresponds to a single selection path from the root to a leaf for each leaf selected in ` self ` .\n\nExample (simplified, does not show all attributes):\n\n>>> select = Selection('foo', inner=[ ... Selection('bar', inner=[ ... Selection('field0', inner=[]), ... Selection('field1', inner=[]), ... ]), ... Selection('x', inner=[]) ... ]) >>> split(select) [ Selection('foo', inner=[Selection('bar', inner=[Selection('field0', inner=[])])]), Selection('foo', inner=[Selection('bar', inner=[Selection('field1', inner=[])])]), Selection('foo', inner=[Selection('x', inner=[])]), ]\n\nParameters :\n\n**self** ( _Selection_ ) -- The selection to split\n\nReturns :\n\nThe split selections\n\nReturn type :\n\n[ list ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") [ Selection ]\n\nadd ( _ new_selections _ ) #\n\nReturns a new selection consisting of a copy of ` self ` expanded with the selection(s) ` new_selections ` . It is assumed that ` new_selections ` are inner selections of the root selection ` self ` .\n\nParameters :\n\n\n\n**self\n\n** ( _Selection_ )\n\n-- The Selection object to be expanded\n\nReturns :\n\nThe resulting new selection, i.e. : ` self `\n\nexpanded with ` new_selections `\n\nReturn type :\n\nSelection\n\nremove ( _ to_remove _ ) #\n\nReturns a new Selection object consisting of a copy of ` self ` without the selections in ` selections_to_remove ` .\n\nParameters :\n\n](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\")\n\nReturns :\n\nThe new trimmed down selection, i.e. : ` self ` without\n\n` selections_to_remove `\n\nReturn type :\n\nSelection\n\nvariable_args ( _ recurse = True _ ) #\n\nReturns all arguments in the current selection which have been given a variable as value.\n\nIf ` recurse == True ` , then the function is applied recursively to inner selections.\n\nParameters :\n\n\n\n\n\nrecurse*", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d2bffe09-495c-49c0-97c3-f2b1d488ce96": {"__data__": {"id_": "d2bffe09-495c-49c0-97c3-f2b1d488ce96", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "040fe259-3f70-46fe-8675-ac6a79689ede", "node_type": null, "metadata": {}, "hash": "cb7d5b54e8bf6f9b997dc731303bae1d4a2aa1e97a29468f90ce0df718148ca2"}, "3": {"node_id": "f672153f-2f80-4253-8a2f-ea40405445e1", "node_type": null, "metadata": {}, "hash": "d1acf60ccebeb5e5ffddc00a36306dd0d61bee0902f76df26614fbeff37ee07d"}}, "hash": "5a5ccad0da7780dce9a98f62dd8921f3f9cb180dba5f33c6bab66cf2e700efa8", "text": "( [ _bool_ ](https://docs.python.org/3/library/functions.html#bool\n\nReturns :\n\n_description_\n\nReturn type :\n\n[ list ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") [ Argument ]\n\n_ static _ merge ( _ selections _ ) #\n\nReturns a list of Selection objects resulting from merging ` selections ` to the extent possible.\n\nParameters :\n\n\n\n\n\nselections*\n\n\n\n( [ _list_\n\n](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\")\n\nReturns :\n\n_description_\n\nReturn type :\n\n[ list ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") [ Selection ]\n\ncontains ( _ other _ ) #\n\nReturns True i.f.f. the Selection ` other ` is a subtree of the Selection ` self ` and False otherwise\n\nParameters :\n\n\n\n**self\n\n** ( _Selection_ )\n\n-- The selection\n\n\n\n**other\n\n** ( _Selection_ )\n\n-- The subselection\n\nReturns :\n\nTrue i.f.f. ` other ` is in ` self `\n\nReturn type :\n\n[ bool ](https://docs.python.org/3/library/functions.html#bool \"\\(in Python v3.11\\)\")\n\ncontains_argument ( _ argname _ , _ recurse = True _ ) #\n\nReturns True i.f.f. there is an Argument object in ` self ` named ` argname ` . If ` recurse ` is True, then the method also checks the nested selections for an argument named ` argname ` .\n\nParameters :\n\n\n\n**self\n\n** ( _Selection_ )\n\n-- The selection\n\n\n\n**argname\n\n** ( [ _str_ ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") )\n\n-- The name of the argument\n\nReturns :\n\nTrue i.f.f. there is an argument named ` argname ` in ` self `\n\nReturn type :\n\n[ bool ](https://docs.python.org/3/library/functions.html#bool \"\\(in Python v3.11\\)\")\n\nget_argument ( _ argname _ , _ recurse = True _ ) #\n\nReturns an Argument object corresponding to the argument in the Selection object ` select ` with name ` argname ` . If ` select ` does not contain such an argument and ` recurse ` is True, then the function is called recursively on ` select ` 's inner selections. If no such argument is found in ` select ` or its inner selections, then the function raises an exception.\n\nParameters :\n\n\n\n**select\n\n** ( _Selection_ )\n\n-- The selection to scan\n\n\n\n**argname\n\n** ( [ _str_ ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") )\n\n-- The name of the argument to find\n\nRaises :\n\n[ **KeyError** ](https://docs.python.org/3/library/exceptions.html#KeyError \"\\(in Python v3.11\\)\") \\-- If no argument named ` argname ` exists in the selection ` self ` .\n\nReturns :\n\nThe argument in ` select ` with name ` argname ` (if any).\n\nReturn type :\n\nArgument\n\nget_argument_by_variable ( _ varname _ , _ recurse = True _ ) #\n\nReturns an Argument object corresponding to the argument in the Selection object ` select ` whose value is a variable named ` varname ` . If ` select ` does not contain such an argument and ` recurse ` is True, then the function is called recursively on ` select ` 's inner selections. If no such argument is found in ` select ` or its inner selections, then the function raises an exception\n\nParameters :\n\n\n\n**select\n\n** ( _Selection_ )\n\n-- The selection to scan", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f672153f-2f80-4253-8a2f-ea40405445e1": {"__data__": {"id_": "f672153f-2f80-4253-8a2f-ea40405445e1", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "d2bffe09-495c-49c0-97c3-f2b1d488ce96", "node_type": null, "metadata": {}, "hash": "5a5ccad0da7780dce9a98f62dd8921f3f9cb180dba5f33c6bab66cf2e700efa8"}, "3": {"node_id": "98d8f26e-da10-42b4-b51b-7a9ee17f14d0", "node_type": null, "metadata": {}, "hash": "8f00e1c40f97c86e85a3b8ee5a37d3bb3c9a45d009b0a463f83c8d93c0c3edf8"}}, "hash": "d1acf60ccebeb5e5ffddc00a36306dd0d61bee0902f76df26614fbeff37ee07d", "text": "**varname\n\n** ( [ _str_ ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") )\n\n-- The name of the variable to find\n\nRaises :\n\n[ **KeyError** ](https://docs.python.org/3/library/exceptions.html#KeyError \"\\(in Python v3.11\\)\") \\-- If no argument with variable value named ` varname ` exists in the selection ` self ` .\n\nReturns :\n\nThe argument in ` select ` with variable value named\n\n` varname ` if it exists\n\nReturn type :\n\nArgument\n\nsubstitute_arg ( _ argname _ , _ replacement _ , _ recurse = True _ ) #\n\nReturns a new Selection object containing the same data as ` self ` with the argument named ` argname ` replaced with ` replacement ` . If ` recurse ` is True, then the method is called recursively on ` self ` 's inner selections and the substitution is also applied to the latter.\n\nParameters :\n\n\n\n**self\n\n** ( _Selection_ )\n\n-- _description_\n\n\n\n**argname\n\n** ( [ _str_ ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") )\n\n-- The name of the argument to substitute.\n\nReturns :\n\n_description_\n\nReturn type :\n\nSelection\n\nprune_undefined ( _ variables _ ) #\n\nReturn a new ` Selection ` containing the subtree of the current ` Selection ` where all argument ` InputValues ` are defined, i.e. : each argument's ` InputValue ` is either\n\n> 1) not of type ` InputValue.Variable ` or 2) of type ` InputValue.Variable > ` and the variable name is contained in ` variables ` .\n\nParameters :\n\n](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") _]_ ) -- An iterator over defined variables\n\nReturns :\n\nA new pruned ` Selection ` object\n\nReturn type :\n\nSelection\n\n_ class _ subgrounds.query. Query ( _ name: 'Optional[str]' = None _ , _ selection: 'list[Selection]' = <factory> _ , _ variables: 'list[VariableDefinition]' = <factory> _ ) #\n\n_ property _ graphql _ : [ str ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") _ #\n\nReturns a string containing a GraphQL query matching the current query\n\nReturns :\n\nThe string containing the GraphQL query\n\nReturn type :\n\n[ str ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\")\n\niter ( ) #\n\nReturns an iterator over all ` Selections ` of the selection tree of the current ` Query ` .\n\niter_args ( ) #\n\nReturns an iterator over all ` Arguments ` of the selection tree of the current ` Query ` .\n\niter_vardefs ( ) #\n\nReturns an iterator over all ` VariableDefinitions ` of the selection tree of the current ` Query ` .\n\nfilter ( _ predicate _ ) #\n\nReturns a new ` Query ` object containing all selections ` s ` that satisfy ` predicate(s) == True ` .\n\nParameters :\n\n](https://docs.python.org/3/library/functions.html#bool \"\\(in Python v3.11\\)\")\n\n_]_ ) -\n\n\n\n_description_\n\nReturns :\n\n_description_\n\nReturn type :\n\nQuery\n\nfilter_args ( _ predicate _ ) #\n\nReturns a new ` Query ` object containing all selections arguments ` arg ` that satisfy ` predicate(arg) == True ` .\n\nParameters :\n\n](https://docs.python.org/3/library/functions.html#bool \"\\(in Python v3.11\\)\")\n\n_]_ ) -", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "98d8f26e-da10-42b4-b51b-7a9ee17f14d0": {"__data__": {"id_": "98d8f26e-da10-42b4-b51b-7a9ee17f14d0", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "f672153f-2f80-4253-8a2f-ea40405445e1", "node_type": null, "metadata": {}, "hash": "d1acf60ccebeb5e5ffddc00a36306dd0d61bee0902f76df26614fbeff37ee07d"}, "3": {"node_id": "37c94eb0-f121-4cb4-93cd-1a493c1b48ce", "node_type": null, "metadata": {}, "hash": "07afdc84886829aeb1ee7a0b63d16f7429070cbbcb19d088f8d5a6f87ff7f898"}}, "hash": "8f00e1c40f97c86e85a3b8ee5a37d3bb3c9a45d009b0a463f83c8d93c0c3edf8", "text": "_description_\n\nReturns :\n\n_description_\n\nReturn type :\n\nQuery\n\nmap ( _ map_f _ , _ priority = 'self' _ ) #\n\nApplies the function ` map_f ` to each ` Selection ` in the current ` Query ` and returns a new ` Query ` object containing the resulting ` Selections ` .\n\nParameters :\n\nMapping function to apply to each ` Selection `\n\nReturns :\n\n_description_\n\nReturn type :\n\nQuery\n\nmap_args ( _ map_f _ ) #\n\nApplies the function ` map_f ` to each ` Argument ` in the current ` Query ` and returns a new ` Query ` object containing the resulting ` Arguments ` .\n\nParameters :\n\n_description_\n\nReturns :\n\n_description_\n\nReturn type :\n\nSelection\n\nadd ( _ other _ ) #\n\nReturns a new Query containing all selections in :attr:'self' along with the new selections in ` other `\n\nParameters :\n\n\n\n**self\n\n** ( _Query_ )\n\n-- The query to which new selection(s) or query are to be added\n\n\n\n**query\n\n** ( _or query to be added to the_ )\n\n--\n\nReturns :\n\nA new Query objects containing all selections\n\nReturn type :\n\nQuery\n\nremove ( _ other _ ) #\n\nReturns a new ` Query ` object containing all selections in ` self ` minus the subquery or selection(s) specified in ` other ` .\n\nNote: ` other ` does not need to be a \"full\" selection (i.e. : a selection all the way to leaves of the GraphQL schema).\n\nExample:\n\n>>> og_selection = Selection(TypeMeta.FieldMeta('pair', description=\"\", args=[], type=TypeRef.non_null_list(\"Pair\", kind=\"OBJECT\")), None, [], [ ... Selection(TypeMeta.FieldMeta('token0', description=\"\", args=[], type=TypeRef.Named(name=\"Token\", kind=\"OBJECT\")), None, [], [ ... Selection(TypeMeta.FieldMeta('id', description=\"\", args=[], type=TypeRef.Named(name=\"String\", kind=\"SCALAR\")), None, [], []), ... Selection(TypeMeta.FieldMeta('name', description=\"\", args=[], type=TypeRef.Named(name=\"String\", kind=\"SCALAR\")), None, [], []), ... Selection(TypeMeta.FieldMeta('symbol', description=\"\", args=[], type=TypeRef.Named(name=\"String\", kind=\"SCALAR\")), None, [], []), ... ]) ... ]) >>> selection_to_remove = Selection(TypeMeta.FieldMeta('token0', description=\"\", args=[], type=TypeRef.Named(name=\"Token\", kind=\"OBJECT\")), None, [], []) >>> og_selection.remove(selection_to_remove) Selection(TypeMeta.FieldMeta('pair', description=\"\", args=[], type=TypeRef.non_null_list(\"Pair\", kind=\"OBJECT\")), None, [], [])\n\nParameters :\n\n\n\n**query\n\n** ( _Query_ )\n\n-- The query to which a selection has to be removed\n\nReturns :\n\nA new Query object containing the original query selections\n\nminus ` other `\n\nReturn type :\n\nQuery\n\ncontains_selection ( _ selection _ ) #\n\nReturns True i.f.f. the selection tree ` selection ` is present in ` query ` .\n\nParameters :\n\n\n\n**query\n\n** ( _Query_ )\n\n-- A query object\n\n\n\n**selection\n\n** ( _Selection_ )\n\n-- The selection to be found (or not) in ` query `\n\nReturns :\n\nTrue if the ` selection ` is present in ` query ` , False\n\notherwise.\n\nReturn type :\n\n[ bool ](https://docs.python.org/3/library/functions.html#bool \"\\(in Python v3.11\\)\")\n\n_ static _ contains ( _ query _ , _ other _ ) #\n\nReturns True i.f.f. all selections in other are contained in query . In other words, returns true i.f.f. other is a subset of query .\n\nNote: other does not need to include \"full\" selections (i.e. : selections all the way to leaves of the GraphQL schema).\n\nParameters :", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "37c94eb0-f121-4cb4-93cd-1a493c1b48ce": {"__data__": {"id_": "37c94eb0-f121-4cb4-93cd-1a493c1b48ce", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "98d8f26e-da10-42b4-b51b-7a9ee17f14d0", "node_type": null, "metadata": {}, "hash": "8f00e1c40f97c86e85a3b8ee5a37d3bb3c9a45d009b0a463f83c8d93c0c3edf8"}, "3": {"node_id": "d87ef362-5644-4bad-8113-6b3f9f42b68f", "node_type": null, "metadata": {}, "hash": "765192cc1d04461468afedfa8180ed445b5cc9f9da1146e97da89c2935c319b8"}}, "hash": "07afdc84886829aeb1ee7a0b63d16f7429070cbbcb19d088f8d5a6f87ff7f898", "text": "**query\n\n** ( _Query_ )\n\n-- The query that is to be checked\n\n\n\n**other\n\n** ( _Query_ )\n\n-- The query that has to be in query\n\nReturns :\n\nTrue i.f.f. all selections in other are contained in query , otherwise False\n\nReturn type :\n\n[ bool ](https://docs.python.org/3/library/functions.html#bool \"\\(in Python v3.11\\)\")\n\n_ static _ select ( _ query _ , _ other _ ) #\n\nReturns a new Query\n\nParameters :\n\n\n\n**query\n\n** ( _Query_ )\n\n-- [description]\n\n\n\n**other\n\n** ( _Query_ )\n\n-- [description]\n\nReturns :\n\n[description]\n\nReturn type :\n\nQuery\n\n_ class _ subgrounds.query. Fragment ( _ name: 'str' _ , _ type_: 'TypeRef.T' _ , _ selection: 'list[Selection]' = <factory> _ , _ variables: 'list[VariableDefinition]' = <factory> _ ) #\n\n_ class _ subgrounds.query. Document ( _ url: 'str' _ , _ query: 'Query' _ , _ fragments: 'list[Fragment]' = <factory> _ , _ variables: 'dict[str _ , _ Any]' = <factory> _ ) #\n\nmap ( _ map_f _ ) #\n\nApplies the function ` map_f ` to each ` Selection ` in the current ` Document ` and returns a new ` Document ` object containing the resulting ` Selections ` .\n\nParameters :\n\nMapping function to apply to each ` Selection `\n\nReturns :\n\n_description_\n\nReturn type :\n\nQuery\n\nmap_args ( _ map_f _ ) #\n\nApplies the function ` map_f ` to each ` Argument ` in the current ` Document ` and returns a new ` Document ` object containing the resulting ` Arguments ` .\n\nParameters :\n\n_description_\n\nReturns :\n\n_description_\n\nReturn type :\n\nSelection\n\nprune_undefined ( _ variables _ ) #\n\nReturns a new ` Document ` object that contains the subset of the current ` Document ` 's query containing only the ` Selections ` for which all its arguments are defined (i.e. : either constants or variables in ` variables ` ).\n\nParameters :\n\n**variables** ( [ _dict_ ](https://docs.python.org/3/library/stdtypes.html#dict \"\\(in Python v3.11\\)\") _[_ [ _str_ ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python\n\nReturns :\n\n_description_\n\nReturn type :\n\nDocument\n\n_ class _ subgrounds.query. DataRequest ( _ documents: 'list[Document]' = <factory> _ ) #\n\nsubgrounds.query. selections_of_object ( _ schema _ , _ object_ _ ) #\n\nReturns generator of Selection objects that selects all non-list fields of GraphQL Object of Interface ` object_ ` .\n\nParameters :\n\n\n\n**schema\n\n** ( [ _SchemaMeta_ ](../schema/#subgrounds.schema.SchemaMeta \"subgrounds.schema.SchemaMeta\") )\n\n-- _description_\n\nYields :\n\n__type__ \\-", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d87ef362-5644-4bad-8113-6b3f9f42b68f": {"__data__": {"id_": "d87ef362-5644-4bad-8113-6b3f9f42b68f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "37c94eb0-f121-4cb4-93cd-1a493c1b48ce", "node_type": null, "metadata": {}, "hash": "07afdc84886829aeb1ee7a0b63d16f7429070cbbcb19d088f8d5a6f87ff7f898"}, "3": {"node_id": "67a2aa5c-e978-46ee-a74d-748e0148ab50", "node_type": null, "metadata": {}, "hash": "151dff16facc805b14bcc573034b87de193059eecfebeb538964bb68a0d7eb74"}}, "hash": "765192cc1d04461468afedfa8180ed445b5cc9f9da1146e97da89c2935c319b8", "text": "_description_\n\nOn this page\n\nQuery\n\n` VariableDefinition `\n\n` VariableDefinition.name `\n\n` VariableDefinition.type_ `\n\n` VariableDefinition.default `\n\n` VariableDefinition.graphql `\n\n` Argument `\n\n` Selection `\n\n` Selection.fmeta `\n\n` Selection.alias `\n\n` Selection.arguments `\n\n` Selection.selection `\n\n` Selection.iter() `\n\n` Selection.iter_args() `\n\n` Selection.filter() `\n\n` Selection.filter_args() `\n\n` Selection.map() `\n\n` Selection.map_args() `\n\n` Selection.contains_list() `\n\n` Selection.split() `\n\n` Selection.add() `\n\n` Selection.remove() `\n\n` Selection.variable_args() `\n\n` Selection.merge() `\n\n` Selection.contains() `\n\n` Selection.contains_argument() `\n\n` Selection.get_argument() `\n\n` Selection.get_argument_by_variable() `\n\n` Selection.substitute_arg() `\n\n` Selection.prune_undefined() `\n\n` Query `\n\n` Query.graphql `\n\n` Query.iter() `\n\n` Query.iter_args() `\n\n` Query.iter_vardefs() `\n\n` Query.filter() `\n\n` Query.filter_args() `\n\n` Query.map() `\n\n` Query.map_args() `\n\n` Query.add() `\n\n` Query.remove() `\n\n` Query.contains_selection() `\n\n` Query.contains() `\n\n` Query.select() `\n\n` Fragment `\n\n` Document `\n\n` Document.map() `\n\n` Document.map_args() `\n\n` Document.prune_undefined() `\n\n` DataRequest `\n\n` selections_of_object() `\n\n[ Playgrounds ](../../../../)\n\nLogo](../../../../_static/assets/pg\n\n\n\nlogotype\n\n\n\nprimary.svg)\n\n# Utils #\n\nUtility module for Subgrounds\n\nsubgrounds.utils. flatten_dict ( _ data _ , _ keys = [] _ ) #\n\nTakes a dictionary containing key-value pairs where all values are of type other than list and flattens it such that all key-value pairs in nested dictionaries are now at depth 1.\n\nParameters :", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "67a2aa5c-e978-46ee-a74d-748e0148ab50": {"__data__": {"id_": "67a2aa5c-e978-46ee-a74d-748e0148ab50", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "d87ef362-5644-4bad-8113-6b3f9f42b68f", "node_type": null, "metadata": {}, "hash": "765192cc1d04461468afedfa8180ed445b5cc9f9da1146e97da89c2935c319b8"}, "3": {"node_id": "af962e47-df7c-41ea-8bf8-5cd48a1330a1", "node_type": null, "metadata": {}, "hash": "71db8362665262ebe34fdf7e130a9775cc4e210fd5c3b1d6795de6fe786a3cae"}}, "hash": "151dff16facc805b14bcc573034b87de193059eecfebeb538964bb68a0d7eb74", "text": "**data\n\n** ( [ _dict_ ](https://docs.python.org/3/library/stdtypes.html#dict \"\\(in Python v3.11\\)\") )\n\n-- Dictionary containing non\n\nlist values\n\nReturns :\n\nFlat dictionary containing all key-value pairs in data and its nested dictionaries\n\nReturn type :\n\n[ dict ](https://docs.python.org/3/library/stdtypes.html#dict \"\\(in Python v3.11\\)\")\n\nsubgrounds.utils. contains_list ( _ data _ ) #\n\nReturns True if data contains a value of type list in its nested data and False otherwise\n\nParameters :\n\n**data** ( [ _dict_ ](https://docs.python.org/3/library/stdtypes.html#dict \"\\(in Python v3.11\\)\") _|_ [ _list_ ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") _|_ [ _str_ ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") _|_ [ _int_ ](https://docs.python.org/3/library/functions.html#int \"\\(in Python v3.11\\)\") _|_ [ _float_ ](https://docs.python.org/3/library/functions.html#float \"\\(in Python v3.11\\)\") _|_ [ _bool_ ](https://docs.python.org/3/library/functions.html#bool \"\\(in Python v3.11\\)\") ) -- Data\n\nReturns :\n\nTrue if data contains a list, False otherwise\n\nReturn type :\n\n[ bool ](https://docs.python.org/3/library/functions.html#bool \"\\(in Python v3.11\\)\")\n\nsubgrounds.utils. default_header ( _ url _ ) #\n\nContains the default header information for requests made by subgrounds\n\nInserts the Playgrounds API Key iff:\n\na) targetting the Playgrounds API AND b) if the PLAYGROUNDS_API_KEY environment variable is set\n\nsubgrounds.utils. user_agent ( ) #\n\nA basic user agent describing the following details:\n\n\"Subgrounds\" (and version)\n\nPlatform/OS (and architecture)\n\nPython Type (and version)\n\nExamples: \\- Subgrounds/1.1.2 (Darwin; arm64) CPython/3.11.2 \\- Subgrounds/1.1.2 (Emscripten; wasm32) CPython/3.10.2\n\n\u26a0\ufe0f To override this, construct your [ ` Subgrounds ` ](../../top_level/#subgrounds.Subgrounds \"subgrounds.Subgrounds\") with a headers\n\nparameter with a dictionary containing an empty \"User-Agent\" key-value pairing.\n\nPandas DataFrame utility module containing functions related to the formatting of GraphQL JSON data into DataFrames.\n\n_ class _ subgrounds.dataframe_utils. DataFrameColumns ( _ key _ , _ fpaths _ ) #\n\nHelper class that holds data related to the shape of a DataFrame\n\ncombine ( _ other _ ) #\n\nReturns new DataFrameColumns containing the union of ` self ` and ` other ` 's columns\n\nParameters :\n\n**other** ( _DataFrameColumns_ ) -- Columns to be combined to ` self `\n\nReturns :\n\nNew ` DataFrameColumns ` containing the union of\n\n` self ` and ` other `\n\nReturn type :\n\nDataFrameColumns\n\nmk_df ( _ data _ , _ path_map _ ) #\n\nFormats the JSON data ` data ` into a DataFrame containing the columns defined in ` self ` .\n\nParameters :", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "af962e47-df7c-41ea-8bf8-5cd48a1330a1": {"__data__": {"id_": "af962e47-df7c-41ea-8bf8-5cd48a1330a1", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "67a2aa5c-e978-46ee-a74d-748e0148ab50", "node_type": null, "metadata": {}, "hash": "151dff16facc805b14bcc573034b87de193059eecfebeb538964bb68a0d7eb74"}, "3": {"node_id": "a1504708-830b-41aa-98df-3169775b8751", "node_type": null, "metadata": {}, "hash": "6a4e83b6134ae110fd073ba165fa844c62c756d2075e0a22b1390eb7e2db7933"}}, "hash": "71db8362665262ebe34fdf7e130a9775cc4e210fd5c3b1d6795de6fe786a3cae", "text": "**path_map\n\n** ( [ _dict_ ](https://docs.python.org/3/library/stdtypes.html#dict \"\\(in Python v3.11\\)\") _[_ [ _str_ ](https://docs.python.org/3/library/stdtypes.html#str \"\\(in Python v3.11\\)\") _,_ [ _FieldPath_ ](../../top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") _]_ )\n\n-- A dictionary of ` (key\n\nFieldPath) ` pairs\n\nReturns :\n\nThe JSON data formatted into a DataFrame\n\nReturn type :\n\npd.DataFrame\n\nsubgrounds.dataframe_utils. columns_of_selections ( _ selections _ ) #\n\nGenerates a list of DataFrame columns specifications based on a list of ` Selection ` trees.\n\nParameters :\n\n\n\n\n\nselections*\n\n\n\n( [ _list_\n\n](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\")\n\n_[_ [ _Selection_ ](../query/#subgrounds.query.Selection\n\n\"subgrounds.query.Selection\") _]_ ) -\n\n\n\nThe selection trees\n\nReturns :\n\nThe list of DataFrame columns specifications\n\nReturn type :\n\n[ list ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") [ DataFrameColumns ]\n\nsubgrounds.dataframe_utils. df_of_json ( _ json_data _ , _ fpaths _ , _ columns = None _ , _ concat = False _ ) #\n\nFormats the JSON data ` json_data ` into Pandas DataFrames, flattening the data in the process.\n\nDepending on the request's fieldpaths, either one or multiple dataframes will be returned based on how flattenable the response data is.\n\n` fpaths ` is a list of ` FieldPath ` objects corresponding to the set of fieldpaths that were used to get the response data ` json_data ` .\n\n` columns ` is an optional argument used to rename the dataframes(s) columns. The length of ` columns ` must be the same as the number of columns of all returned dataframes.\n\n` concat ` indicates whether or not the resulting dataframes should be concatenated together. The dataframes must have the same number of columns, as well as the same column names (which can be set using the ` columns ` argument).\n\nParameters :\n\n\n\n**fpaths\n\n** ( [ _list_ ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") _[_ [ _FieldPath_ ](../../top_level/#subgrounds.FieldPath \"subgrounds.FieldPath\") _]_ )\n\n-- Fieldpaths that yielded the response data\n\nReturns :\n\nThe resulting dataframe(s)\n\nReturn type :\n\npd.DataFrame | [ list ](https://docs.python.org/3/library/stdtypes.html#list \"\\(in Python v3.11\\)\") [pd.DataFrame]\n\nSchema ](../schema/)\n\nOn this page\n\nUtils\n\n` flatten_dict() `\n\n` contains_list() `\n\n` default_header() `\n\n` user_agent() `\n\n` DataFrameColumns `\n\n` DataFrameColumns.combine() `\n\n` DataFrameColumns.mk_df() `\n\n` columns_of_selections() `\n\n` df_of_json() `\n\n[ Playgrounds ](../../../../)\n\nLogo](../../../../_static/assets/pg\n\n\n\nlogotype", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a1504708-830b-41aa-98df-3169775b8751": {"__data__": {"id_": "a1504708-830b-41aa-98df-3169775b8751", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "af962e47-df7c-41ea-8bf8-5cd48a1330a1", "node_type": null, "metadata": {}, "hash": "71db8362665262ebe34fdf7e130a9775cc4e210fd5c3b1d6795de6fe786a3cae"}, "3": {"node_id": "e709efcf-6b5f-45fe-8a50-17001553a908", "node_type": null, "metadata": {}, "hash": "fe855f92cbe99b76cfbed37024946b3eff12a616d3a280c056197effb67bb9cd"}}, "hash": "6a4e83b6134ae110fd073ba165fa844c62c756d2075e0a22b1390eb7e2db7933", "text": "primary.svg)\n\n# Schema #\n\nSchema data structure module\n\nThis module contains various data structures in the form of dataclasses that are used to represent GraphQL schemas in Subgrounds using an AST-like approach.\n\n_ class _ subgrounds.schema. SchemaMeta ( _ * _ , _ queryType _ , _ types _ , _ type_map = None _ , _ mutationType = None _ , _ subscriptionType = None _ ) #\n\nClass representing a GraphQL schema.\n\nContains all type definitions.\n\nCreate a new model by parsing and validating input data from keyword arguments.\n\nRaises ValidationError if the input data cannot be parsed to form a valid model.\n\ntype_of_typeref ( _ typeref _ ) #\n\nReturns the type information of the type reference typeref\n\nArgs: self (SchemaMeta): The schema. typeref (TypeRef.T): The type reference pointing to the type of interest.\n\nRaises: KeyError: If the type reference refers to a non-existant type\n\nReturns: TypeMeta.T: _description_\n\ntype_of ( _ tmeta _ ) #\n\nReturns the argument or field definition's underlying type\n\ntype_of_input_object_meta ( _ tmeta _ , _ args _ ) #\n\nRecursively finds the nested type\n\nOn this page\n\nSchema\n\n` SchemaMeta `\n\n` SchemaMeta.type_of_typeref() `\n\n` SchemaMeta.type_of() `\n\n` SchemaMeta.type_of_input_object_meta() `\n\n[ Playgrounds ](../)\n\nLogo](../_static/assets/pg\n\n\n\nlogotype\n\n\n\nprimary.svg)\n\n# Playgrounds API #\n\nSimplify your subgraph queries to the The Graph's decentralized network!\n\nThe Playgrounds API is a solution aimed at streamlining the user experience with The Graph's decentralized network. It eliminates the need for traditional wallet and GRT management by providing a convenient and straightforward API key and URL. Users can effortlessly harness the full potential of the decentralized ecosystem.\n\nThe Playgrounds API also allows users to download datasets from The Graph's decentralized service via a REST API.\n\n## Advantages #\n\nSaaS\n\nlike experience for decentralized subgraphs\n\nFully Integrated with [ Subgrounds ](subgrounds/)\n\nMonitor your API key usage\n\n\n\n\n\n\n\n### Launch Playgrounds\n\nAccess our app to create API keys\n\n[ ](https://app.playgrounds.network)\n\n### Getting Started\n\nGet started in less than **five minutes**\n\n[ ](key/)\n\n### FAQ\n\nCommon questions about the Playgrounds API\n\n[ ](faq/)\n\n### API Reference\n\nFull reference on each endpoint we offer\n\n[ ](api\n\n\n\nreference/)\n\n\n\n\n\n\n\nOn this page\n\nPlaygrounds API\n\nAdvantages\n\n[ Playgrounds ](../../)\n\nLogo](../../_static/assets/pg\n\n\n\nlogotype\n\n\n\nprimary.svg)\n\n# Getting a Playgrounds API Key #\n\nTo start using the Playgrounds API, you'll first need to aquire an API key from our platform.\n\n## 1\\. Creating your Playgrounds account #\n\nThe first step in acquiring a Playgrounds API key is to create a Playgrounds account via our signup [ page ](https://app.playgrounds.network/signup) .\n\n** Create Account Verify Email **\n\n## 2\\. Create your Playgrounds API key #\n\nOnce you have created your Playgrounds account and are logged into the Playgrounds app, create a new API key.\n\n** Generate API Key **\n\n! [](../../_images/pg\n\n\n\napp\n\n\n\ncreate\n\n\n\napi\n\n\n\nkey.png)\n\n## 3\\. Copy your Playgrounds API key #\n\nCongratulations, you now have a Playgrounds API key that you can use to query decentralized network subgraphs through our proxy API! To copy the actual key to your clipboard:\n\n** Copy API Key **\n\nOR\n\n\n\n\n\nToken: \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\n\n\n\n**\n\n! [](../../_images/pg\n\n\n\napp\n\n\n\ncopy\n\n\n\napi", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e709efcf-6b5f-45fe-8a50-17001553a908": {"__data__": {"id_": "e709efcf-6b5f-45fe-8a50-17001553a908", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "a1504708-830b-41aa-98df-3169775b8751", "node_type": null, "metadata": {}, "hash": "6a4e83b6134ae110fd073ba165fa844c62c756d2075e0a22b1390eb7e2db7933"}, "3": {"node_id": "83ba0778-c1f5-477f-bc8d-fd797da1472e", "node_type": null, "metadata": {}, "hash": "bea3487e887e6fa58086547647a02d0765983555c0fd905fc54b0b0405b1123c"}}, "hash": "fe855f92cbe99b76cfbed37024946b3eff12a616d3a280c056197effb67bb9cd", "text": "key.png)\n\nSee also\n\nAll Playgrounds API keys start with the sequence ` pg- ` to differentiate them from other API keys (such as The Graph's keys).\n\n](../)\n\nOn this page\n\nGetting a Playgrounds API Key\n\n1\\. Creating your Playgrounds account\n\n2\\. Create your Playgrounds API key\n\n3\\. Copy your Playgrounds API key\n\n[ Playgrounds ](../../)\n\nLogo](../../_static/assets/pg\n\n\n\nlogotype\n\n\n\nprimary.svg)\n\n# Subgraph Proxy #\n\nAfter obtaining your API key, use our proxy API endpoint to query decentralized subgraphs. You can do this in two ways:\n\n1. Via the subgraph id _(compatible with Ethereum only)_\n\n2. Via the subgraph deployment id\n\n## Finding a subgraph's ID #\n\nYou can quickly find the IDs of decentralized subgraphs via [ The Graph Explorer ](https://thegraph.com/explorer) (via SUBGRAPH-ID ).\n\n! [](../../_images/graph\n\n\n\nexplorer\n\n\n\nid.png)\n\n## Query by Subgraph id #\n\nTo query a subgraph by its id, send a POST request to the Playgrounds proxy endpoint:\n\nhttps://api.playgrounds.network/v1/proxy/subgraphs/id/[subgraph\n\n\n\nid]\n\nFor example, to access the latest Uniswap V3 subgraph data using its subgraph id, use:\n\nhttps://api.playgrounds.network/v1/proxy/subgraphs/id/ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7\n\nImportant\n\nThis approach is for Ethereum-based subgraphs only. To query a subgraph hosted on Arbitrum, refer to the 'Query by Deployment ID' section below .\n\nYour POST request must include your Playgrounds API key, used as the Playgrounds-Api-Token header value. The remainder of the request mirrors what you'd typically send to The Graph's decentralized network.\n\nHere's an example request for the Uniswap V3 subgraph id ( ` ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7 ` ) on The Graph's decentralized network:\n\ncURL\n\nQuerying a subgraph via the proxy endpoint using cURL #\n\ncurl https://api.playgrounds.network/v1/proxy/subgraphs/id/ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7 \\\n\n\n\nH 'Content\n\n\n\nType: application/json' \\\n\n\n\nH 'Playgrounds\n\n\n\nApi\n\n\n\nKey: PG_API_KEY' \\\n\n\n\nd '{\"query\":\"{protocols {name totalPoolCount}}\"}'\n\nPython\n\nQuerying a subgraph via the proxy endpoint using Python #\n\nresp = requests.post(\n\nurl=\"https://api.playgrounds.network/v1/proxy/subgraphs/id/ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7\",\n\nheaders={\n\n\"Content\n\n\n\nType\": \"application/json\",\n\n\"Playgrounds\n\n\n\nApi\n\n\n\nKey\": \"PG_API_KEY\"\n\n},\n\njson={\n\n\"query\": \"{protocols {name totalPoolCount}}\"\n\n}\n\n)\n\nresp.json()\n\nEquivalent GraphQL\n\nThis is the GraphQL query being sent to the subgraph #\n\nquery {\n\nprotocols {\n\nname\n\ntotalPoolCount\n\n}\n\n}\n\nResponse\n\nThe is the response (at time of writing) #\n\n{\n\n\"data\": {\n\n\"protocols\": [\n\n{\n\n\"name\": \"Uniswap V3\",\n\n\"totalPoolCount\": 13767\n\n}\n\n]\n\n}\n\n}\n\nImportant\n\nUnlike The Graph's endpoint where the Graph API key is inserted in the URL,\n\n[ Playgrounds ](../../)\n\nLogo](../../_static/assets/pg\n\n\n\nlogotype", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "83ba0778-c1f5-477f-bc8d-fd797da1472e": {"__data__": {"id_": "83ba0778-c1f5-477f-bc8d-fd797da1472e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "e709efcf-6b5f-45fe-8a50-17001553a908", "node_type": null, "metadata": {}, "hash": "fe855f92cbe99b76cfbed37024946b3eff12a616d3a280c056197effb67bb9cd"}, "3": {"node_id": "3e08cc67-3287-4b45-bbab-274b86455874", "node_type": null, "metadata": {}, "hash": "e131bf36226e8705a2dd98b13e3a3933570a608e83c1852fb1fc079310342db7"}}, "hash": "bea3487e887e6fa58086547647a02d0765983555c0fd905fc54b0b0405b1123c", "text": "primary.svg)\n\n# Subgrounds Integration #\n\nWhile you can certainly use the Playgrounds proxy alone by submitting requests with a valid Playgrounds API key, pairing it with Subgrounds simplifies and streamlines the querying and data analysis from decentralized subgraphs.\n\nClick for Interactive Documentation\n\nClicking this button will enable editing and execution of the code-blocks on this page. Learn more [ here ](../../subgrounds/getting_started/basics/) .\n\nRun code\n\n## 1\\. Using your Playgrounds API Key in Subgrounds #\n\nThere are two main ways to validate your API key with subgrounds.\n\nNote\n\nReplace ` \"PG_API_KEY\" ` with API key gathered from earlier !\n\nConstructor\n\nInitialize [ ` Subgrounds ` ](../../subgrounds/api_reference/top_level/#subgrounds.Subgrounds \"subgrounds.Subgrounds\") object with a playgrounds api key #\n\nfrom subgrounds import Subgrounds\n\nsg = Subgrounds.from_pg_key(\"PG_API_KEY\")\n\nEnvironment Var\n\nThe environment variable can be set any way you like! #\n\nPLAYGROUNDS_API_KEY=\"PG_API_KEY\"\n\nThis method is great since you don't need to change your code at all! #\n\nfrom subgrounds import Subgrounds\n\nsg = Subgrounds()\n\nWarning\n\nThis method will produce a [ ` RuntimeWarning ` ](https://docs.python.org/3/library/exceptions.html#RuntimeWarning \"\\(in Python v3.11\\)\") if ` $PLAYGROUNDS_API_KEY ` does _not_ look like valid.\n\nIt will also be overriden if the headers are set manually, or via ` Subgrounds.from_pg_key() `\n\nUnder the Hood\n\nInternally, both method sets the request headers #\n\nfrom subgrounds import Subgrounds\n\nsg = Subgrounds(headers={\"Playgrounds\n\n\n\nApi\n\n\n\nKey\": \"PG_API_KEY\"})\n\n## 2\\. Query a decentralized subgraph #\n\nOnce the [ ` Subgrounds ` ](../../subgrounds/api_reference/top_level/#subgrounds.Subgrounds \"subgrounds.Subgrounds\") object has been initialized with the custom header containing your API key, you can query a decentralized network subgraph through our proxy endpoint just like you would query any other subgraph.\n\nsubgraph = sg.load_subgraph(\n\n\"https://api.playgrounds.network/v1/proxy/subgraphs/id/ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7\"\n\n)\n\nsg.query_df([\n\nsubgraph.Query.tokens.id,\n\nsubgraph.Query.tokens.symbol,\n\n])\n\nOn this page\n\nSubgrounds Integration\n\n1\\. Using your Playgrounds API Key in Subgrounds\n\n2\\. Query a decentralized subgraph\n\n# What is a Query? #\n\nIn the Playgrounds API, queries are 1:1 to the number of requests made to the underlying decentralized API. Queries are **not** 1:1 with a singular ` subgrounds ` ' snippet as a single ` subgrounds ` request could be getting hundreds of thousands of rows with a single line of code. Since ` subgrounds ` automatically handles pagination, it makes multiple GraphQL queries behind the scenes.\n\n## Examples #\n\nGenerally, whatever is placed in the ` first ` argument correlates to the number of expected pages.\n\nClick for Interactive Documentation\n\nClicking this button will enable editing and execution of the code-blocks on this page. Learn more [ here ](../../../subgrounds/getting_started/basics/) .\n\nRun code\n\nCommon setup for the examples (using the hosted service as an example) #\n\nfrom subgrounds import Subgrounds\n\nsg = Subgrounds()\n\ncurve = sg.load_subgraph(\n\n\"https://api.thegraph.com/subgraphs/name/messari/curve\n\n\n\nfinance", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "3e08cc67-3287-4b45-bbab-274b86455874": {"__data__": {"id_": "3e08cc67-3287-4b45-bbab-274b86455874", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "83ba0778-c1f5-477f-bc8d-fd797da1472e", "node_type": null, "metadata": {}, "hash": "bea3487e887e6fa58086547647a02d0765983555c0fd905fc54b0b0405b1123c"}, "3": {"node_id": "1bd7149e-1433-4989-a865-39c2e5bbf5de", "node_type": null, "metadata": {}, "hash": "f522bf10d91facc61a05a492211999ba027848103102bd0dd65c15b8524b67b1"}}, "hash": "e131bf36226e8705a2dd98b13e3a3933570a608e83c1852fb1fc079310342db7", "text": "ethereum\")\n\nThe following example will result in a single query:\n\nGrabbing liquidity pool data #\n\n# default for `first` is 100 sg.query_df( curve.Query.liquidityPools )\n\nThe following example will result in 10 queries:\n\nGrabbing liquidity pool data #\n\nsg.query_df(\n\ncurve.Query.liquidityPools(first=9000)\n\n)\n\nThis would still be 10 queries as both of these entities would get [ merged ](../../../subgrounds/getting_started/field_paths/merging/) . #\n\nsg.query_df(\n\ncurve.Query.liquidityPools(first=9000),\n\ncurve.Query.liquidityGauges(first=9000),\n\n)\n\nNote\n\nJust because you put a very high number for ` first ` (such as ` 1_000_000 ` ), it doesn't mean it'll actually result in that many queries since there might be less than that many rows of data.\n\n## Nested Pagination #\n\nSince nested fields can also have their own set of arguments, defining ` first ` in them will result in nested pagination. This can **greatly** increase the number of queries made as each nested field will be multiplicative\n\nThe number of queries directly is related to the argument you put in ` first ` . If you only define ` first ` for the most top-level entities, than pagination is summed across all those fields. If you start defining ` first ` for sub-fields, then pagination can get multiplicative as for each top-level page, the whole series of sub-pages would be queried.\n\nThis would still be 100 (10\u30fb10) queries due to nested pagination and return 81 million (9000\u30fb9000) rows. #\n\npools = curve.Query.liquidityPools(first=9000)\n\nsg.query_df(\n\npools.dailySnapshots(first=9000)\n\n)\n\nOn this page\n\nWhat is a Query?\n\nExamples\n\nNested Pagination\n\n[ Playgrounds ](../../)\n\nLogo](../../_static/assets/pg\n\n\n\nlogotype\n\n\n\nprimary.svg)\n\n# API Reference #\n\nThe Playgrounds API is organized around REST and currently features only one top-level resource accessible with an API key: the ` proxy ` resource.\n\nOur API accepts request parameters either via a JSON-encoded request body (for POST requests) or query parameters (for GET requests). Unless explicitly mentioned, all API endpoints return JSON-encoded responses.\n\n## Authentication #\n\nThe Playgrounds API uses API keys to authenticate requests. You can view and manage your API keys in the [ Playgrounds App ](https://app.playgrounds.network) .\n\nYour API keys carry many privileges, so be sure to keep them secure! Do not share your secret API keys in publicly accessible areas such as GitHub, client-side code, and so forth.\n\nAuthentication to the API is performed via the custom Playgrounds authorization header ` Playgrounds-Api-Key ` . To authenticate, include the following into the header of your request (replacing ` pg-abcdefghijk ` with your own)!\n\nPlaygrounds\n\n\n\nApi\n\n\n\nKey: pg\n\n\n\nabcdefghijk\n\nNote\n\nIn ` subgrounds ` , you can set the ` $PLAYGROUNDS_API_KEY ` environment variable to your API key and use our endpoints \u2014 the library will handle all of the authentication on your behalf!\n\n## Endpoints #\n\nWe currently only host a _single_ endpoint.\n\n### Subgraph Proxy\n\n/v1/proxy\n\n[ ](../reference/proxy/)\n\n](../faq/query/)\n\nOn this page\n\nAPI Reference\n\nAuthentication\n\nEndpoints\n\n# Subgraph Proxy #\n\n/v1/proxy/\n\n\n\n\n\n\n\nThe proxy endpoints provide access to subgraphs hosted on The Graph's decentralized network without the need to manage GRT tokens or interact with smart contracts.\n\nThe proxy endpoint gets its name from the fact that all endpoints originating from it mirror an equivalent endpoint available on The Graph.\n\nFor example, consider the following query URL:\n\nhttps://gateway.thegraph.com/api/[api", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1bd7149e-1433-4989-a865-39c2e5bbf5de": {"__data__": {"id_": "1bd7149e-1433-4989-a865-39c2e5bbf5de", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "3e08cc67-3287-4b45-bbab-274b86455874", "node_type": null, "metadata": {}, "hash": "e131bf36226e8705a2dd98b13e3a3933570a608e83c1852fb1fc079310342db7"}, "3": {"node_id": "239c52cf-6f39-4126-bcfd-31b269e23165", "node_type": null, "metadata": {}, "hash": "b14468d89046b17bdc796fe6e04bd1d8e2bc0f61833fd900e3f3e46f38a6c6d2"}}, "hash": "f522bf10d91facc61a05a492211999ba027848103102bd0dd65c15b8524b67b1", "text": "key]/subgraphs/id/3nXfK3RbFrj6mhkGdoKRowEEti2WvmUdxmz73tben6Mb\n\nThe equivalent Playgrounds API URL going through our proxy endpoint would be:\n\nhttps://api.playgrounds.network/v1/proxy/subgraphs/id/ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7\n\nNote\n\nNotice that the URL is mirrored: both URLs contain the ` subgraphs/id/3nXfK3RbFrj6mhkGdoKRowEEti2WvmUdxmz73tben6Mb ` path!\n\nImportant\n\nUnlike The Graph's endpoint where the Graph API key is inserted in the URL,\n\n[ Playgrounds ](../../../../)\n\nLogo](../../../../_static/assets/pg\n\n\n\nlogotype\n\n\n\nprimary.svg)\n\n# Subgraph ID #\n\n/v1/proxy/\n\n## ` subgraphs/id/:subgraph_id ` #\n\n### POST #\n\nMake a graphql request to the subgraph identified by the id ` subgraph_id ` .\n\nImportant\n\nThis endpoint only works with subgraphs deployed on The Graph's Ethereum decentralized service and **not** the Arbitrum decentralized service.\n\nIf you want to query a subgraph hosted on the Arbitrum decentralized service, use the [ proxy by deployment id ](../deployment_id/) endpoint.\n\n#### URL Parameters #\n\nsubgraph_id ` string ` The decentralized network subgraph ID you are querying\n\n#### Request Body (JSON) #\n\nquery ` string ` The GraphQL query itself\n\nvariables ` dict? ` Values for the variables used within the GraphQL query _(if any)_\n\n#### Example #\n\ncurl https://api.playgrounds.network/v1/proxy/subgraphs/id/ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7 \\\n\n\n\nH 'Content\n\n\n\nType: application/json' \\\n\n\n\nH 'Playgrounds\n\n\n\nApi\n\n\n\nKey: PG_API_KEY' \\\n\n\n\nd '{\"query\":\"{protocols {name totalPoolCount}}\"}'\n\nResponse:\n\n{\n\n\"data\": {\n\n\"protocols\": [\n\n{\n\n\"name\": \"Uniswap V3\",\n\n\"totalPoolCount\": 13767\n\n}\n\n]\n\n}\n\n}\n\nOn this page\n\nSubgraph ID\n\n` subgraphs/id/:subgraph_id `\n\nPOST\n\nURL Parameters\n\nRequest Body (JSON)\n\nExample\n\n[ Playgrounds ](../../../../)\n\nLogo](../../../../_static/assets/pg\n\n\n\nlogotype\n\n\n\nprimary.svg)\n\n# Deployment ID #\n\n/v1/proxy/\n\n## ` deployments/id/:deployment_id ` #\n\n### POST #\n\nMake a graphql request to the subgraph identified by the id ` deployment_id ` .\n\n#### URL Parameters #\n\ndeployment_id ` string ` The decentralized network deployment ID you are querying\n\n#### Request Body (JSON) #\n\nquery ` string ` The GraphQL query itself\n\nvariables ` dict? ` Values for the variables used within the GraphQL query _(if any)_\n\n#### Example #\n\ncurl https://api.playgrounds.network/v1/proxy/deployments/id/QmcPHxcC2ZN7m79XfYZ77YmF4t9UCErv87a9NFKrSLWKtJ \\\n\n\n\nH 'Content\n\n\n\nType: application/json' \\\n\n\n\nH 'Playgrounds\n\n\n\nApi\n\n\n\nKey: PG_API_KEY' \\", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "239c52cf-6f39-4126-bcfd-31b269e23165": {"__data__": {"id_": "239c52cf-6f39-4126-bcfd-31b269e23165", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "1bd7149e-1433-4989-a865-39c2e5bbf5de", "node_type": null, "metadata": {}, "hash": "f522bf10d91facc61a05a492211999ba027848103102bd0dd65c15b8524b67b1"}, "3": {"node_id": "5404d721-d0c1-48a6-b2b7-d0a546c15943", "node_type": null, "metadata": {}, "hash": "a05156a14593060c48bc503f99d0df8d9b2c506d9fbcfd7522151e57db17bbf9"}}, "hash": "b14468d89046b17bdc796fe6e04bd1d8e2bc0f61833fd900e3f3e46f38a6c6d2", "text": "d '{\"query\":\"{protocols {name totalPoolCount}}\"}'\n\nResponse:\n\n{\n\n\"data\": {\n\n\"protocols\": [\n\n{\n\n\"name\": \"Uniswap V3\",\n\n\"totalPoolCount\": 13767\n\n}\n\n]\n\n}\n\n}\n\n](../subgraph_id/)\n\nOn this page\n\nDeployment ID\n\n` deployments/id/:deployment_id `\n\nPOST\n\nURL Parameters\n\nRequest Body (JSON)\n\nExample\n\n# Subgrounds Code Examples.The following examples below show some ways to use subgrounds to query subgraphs\n\n```python\n\nfrom subgrounds import Subgrounds\n\nfrom datetime import datetime\n\nfrom subgrounds.subgraph import SyntheticField\n\nimport pandas as pd\n\n# Initialize Subgrounds and load the subgraph sg = Subgrounds() stargate_eth = sg.load_subgraph(\"https://api.thegraph.com/subgraphs/name/messari/stargate-ethereum\")\n\n# Define the query and field paths usage_metrics_daily_snapshots = stargate_eth.Query.usageMetricsDailySnapshots(first=1000)\n\n# Create the datetime synthetic field stargate_eth.UsageMetricsDailySnapshot.datetime = SyntheticField( lambda timestamp: str(datetime.fromtimestamp(timestamp)), SyntheticField.FLOAT, stargate_eth.UsageMetricsDailySnapshot.timestamp, )\n\n# Field paths for each category cumulative_metrics_fields = [ usage_metrics_daily_snapshots.cumulativeLiquidityDepositCount, usage_metrics_daily_snapshots.cumulativeLiquidityWithdrawCount, usage_metrics_daily_snapshots.cumulativeMessageReceivedCount, usage_metrics_daily_snapshots.cumulativeMessageSentCount, usage_metrics_daily_snapshots.cumulativeTransactionCount, usage_metrics_daily_snapshots.cumulativeTransferInCount, usage_metrics_daily_snapshots.cumulativeTransferOutCount, usage_metrics_daily_snapshots.cumulativeUniqueLiquidityProviders, usage_metrics_daily_snapshots.cumulativeUniqueMessageSenders, usage_metrics_daily_snapshots.cumulativeUniqueTransferReceivers, usage_metrics_daily_snapshots.cumulativeUniqueTransferSenders, usage_metrics_daily_snapshots.cumulativeUniqueUsers, ]\n\ndaily_metrics_fields = [\n\nusage_metrics_daily_snapshots.dailyActiveLiquidityProviders,\n\nusage_metrics_daily_snapshots.dailyActiveMessageSenders,\n\nusage_metrics_daily_snapshots.dailyActiveTransferReceivers,\n\nusage_metrics_daily_snapshots.dailyActiveTransferSenders,\n\nusage_metrics_daily_snapshots.dailyActiveUsers,\n\nusage_metrics_daily_snapshots.dailyLiquidityDepositCount,\n\nusage_metrics_daily_snapshots.dailyLiquidityWithdrawCount,\n\nusage_metrics_daily_snapshots.dailyMessageReceivedCount,\n\nusage_metrics_daily_snapshots.dailyMessageSentCount,\n\nusage_metrics_daily_snapshots.dailyTransactionCount,\n\nusage_metrics_daily_snapshots.dailyTransferInCount,\n\nusage_metrics_daily_snapshots.dailyTransferOutCount,\n\n]\n\nsnapshot_info_fields = [ usage_metrics_daily_snapshots.day, usage_metrics_daily_snapshots.id, usage_metrics_daily_snapshots.datetime, # Use the synthetic field for datetime usage_metrics_daily_snapshots.timestamp, ]\n\nprotocol_metrics_fields = [\n\nusage_metrics_daily_snapshots.totalCanonicalRouteCount,\n\nusage_metrics_daily_snapshots.totalPoolCount,\n\nusage_metrics_daily_snapshots.totalPoolRouteCount,\n\nusage_metrics_daily_snapshots.totalSupportedTokenCount,\n\nusage_metrics_daily_snapshots.totalWrappedRouteCount,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5404d721-d0c1-48a6-b2b7-d0a546c15943": {"__data__": {"id_": "5404d721-d0c1-48a6-b2b7-d0a546c15943", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "239c52cf-6f39-4126-bcfd-31b269e23165", "node_type": null, "metadata": {}, "hash": "b14468d89046b17bdc796fe6e04bd1d8e2bc0f61833fd900e3f3e46f38a6c6d2"}, "3": {"node_id": "de04d79d-a139-421a-9550-532526d43bdd", "node_type": null, "metadata": {}, "hash": "a5b1ed0fda5c82ecc225c0c16b020dcee7c1b51ec147cc6c6f1766a2ea811a81"}}, "hash": "a05156a14593060c48bc503f99d0df8d9b2c506d9fbcfd7522151e57db17bbf9", "text": "]\n\n# Execute the query and store the results in a DataFrame cumulative_metrics_df = sg.query_df(cumulative_metrics_fields) daily_metrics_df = sg.query_df(daily_metrics_fields) snapshot_info_df = sg.query_df(snapshot_info_fields) protocol_metrics_df = sg.query_df(protocol_metrics_fields)\n\n``` ```python # Initialize Subgrounds and load the subgraph sg = Subgrounds() stargate_eth = sg.load_subgraph(\"https://api.thegraph.com/subgraphs/name/messari/stargate-ethereum\")\n\n# Define the query and field paths pools_query = stargate_eth.Query.pools(first=1000)\n\n# Field paths for each category snapshot_fields = [ pools_query._lastDailySnapshotTimestamp, pools_query._lastHourlySnapshotTimestamp, ]\n\ncreation_fields = [\n\npools_query.createdBlockNumber,\n\npools_query.createdTimestamp,\n\n]\n\ncumulative_metrics_fields = [\n\npools_query.cumulativeProtocolSideRevenueUSD,\n\npools_query.cumulativeSupplySideRevenueUSD,\n\npools_query.cumulativeTotalRevenueUSD,\n\npools_query.cumulativeVolumeIn,\n\npools_query.cumulativeVolumeInUSD,\n\npools_query.cumulativeVolumeOut,\n\npools_query.cumulativeVolumeOutUSD,\n\n]\n\nidentity_fields = [\n\npools_query.id,\n\npools_query.name,\n\npools_query.symbol,\n\npools_query.type,\n\n]\n\nliquidity_fields = [\n\npools_query.inputTokenBalance,\n\npools_query.outputTokenSupply,\n\npools_query.stakedOutputTokenAmount,\n\n]\n\nrewards_fields = [\n\npools_query.rewardTokenEmissionsAmount,\n\npools_query.rewardTokenEmissionsUSD,\n\n]\n\nvolume_fields = [\n\npools_query.netVolume,\n\npools_query.netVolumeUSD,\n\npools_query.outputTokenPriceUSD,\n\n]\n\nvalue_locked_fields = [\n\npools_query.totalValueLockedUSD,\n\n]\n\n# Execute the query and store the results in DataFrames snapshot_df = sg.query_df(snapshot_fields) creation_df = sg.query_df(creation_fields) cumulative_metrics_df = sg.query_df(cumulative_metrics_fields) identity_df = sg.query_df(identity_fields) liquidity_df = sg.query_df(liquidity_fields) rewards_df = sg.query_df(rewards_fields) volume_df = sg.query_df(volume_fields) value_locked_df = sg.query_df(value_locked_fields) ``` ```python print(\"Cumulative Metrics:\") cumulative_metrics_df ``` ```python print(\"Snapshot Information:\") snapshot_info_df ``` ```python print(\"Snapshot Fields:\") snapshot_df ``` ```python print(\"Creation Fields:\") creation_df ``` ```python print(\"Cumulative Metrics Fields:\") cumulative_metrics_df ``` ```python print(\"Identity Fields:\") identity_df ``` ```python print(\"Liquidity Fields:\") liquidity_df ``` ```python print(\"Rewards Fields:\") rewards_df ``` ```python print(\"Volume Fields:\") volume_df ``` ```python print(\"Total Value Locked Fields:\") value_locked_df ```\n\n---\n\n```python\n\nfrom datetime import datetime\n\nfrom subgrounds.subgraph import SyntheticField\n\nfrom subgrounds import Subgrounds\n\nimport pandas as pd\n\n# Initialize Subgrounds\n\nsg = Subgrounds()\n\n# Load a subgraph using its API URL balancer_v2 = sg.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "de04d79d-a139-421a-9550-532526d43bdd": {"__data__": {"id_": "de04d79d-a139-421a-9550-532526d43bdd", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "5404d721-d0c1-48a6-b2b7-d0a546c15943", "node_type": null, "metadata": {}, "hash": "a05156a14593060c48bc503f99d0df8d9b2c506d9fbcfd7522151e57db17bbf9"}, "3": {"node_id": "c0ee0688-d92c-482c-93af-afa44ef1f9e4", "node_type": null, "metadata": {}, "hash": "6594060d19840ecbde46a02869849d9fc5ec98d65144c16dac024aa7a00de40d"}}, "hash": "a5b1ed0fda5c82ecc225c0c16b020dcee7c1b51ec147cc6c6f1766a2ea811a81", "text": "load_subgraph('https://api.thegraph.com/subgraphs/name/messari/balancer-v2-ethereum')\n\n# Create a SyntheticField on the LiquidityPool entity called `datetime`, which will format the createdTimestamp field into a human readable datetime string.balancer_v2.LiquidityPool.datetime = SyntheticField( lambda timestamp: str(datetime.fromtimestamp(int(timestamp))), SyntheticField.FLOAT, balancer_v2.LiquidityPool.createdTimestamp )\n\n# Create a FieldPath object for the required fields in the liquidityPools entity.# Specify options to sort the data by createdTimestamp in descending order and limit the number of results to 100. liquidity_pools_query = balancer_v2.Query.liquidityPools( orderBy=balancer_v2.LiquidityPool.createdTimestamp, orderDirection='desc', first=100 )\n\n# Field paths for each category pool_identity_fields = [ liquidity_pools_query._poolId, liquidity_pools_query.name, liquidity_pools_query.symbol, liquidity_pools_query.isSingleSided, ]\n\npool_metrics_fields = [\n\nliquidity_pools_query.createdBlockNumber,\n\nliquidity_pools_query.createdTimestamp,\n\nliquidity_pools_query.datetime,\n\nliquidity_pools_query.totalValueLockedUSD,\n\n]\n\npool_revenue_fields = [\n\nliquidity_pools_query.cumulativeProtocolSideRevenueUSD,\n\nliquidity_pools_query.cumulativeSupplySideRevenueUSD,\n\nliquidity_pools_query.cumulativeTotalRevenueUSD,\n\n]\n\npool_volume_fields = [\n\nliquidity_pools_query.cumulativeVolumeUSD,\n\nliquidity_pools_query.outputTokenPriceUSD,\n\n]\n\npool_balances_fields = [\n\nliquidity_pools_query.inputTokenBalances,\n\nliquidity_pools_query.inputTokenWeights,\n\nliquidity_pools_query.outputTokenSupply,\n\nliquidity_pools_query.stakedOutputTokenAmount,\n\n]\n\npool_rewards_fields = [\n\nliquidity_pools_query.rewardTokenEmissionsAmount,\n\nliquidity_pools_query.rewardTokenEmissionsUSD,\n\n]\n\n# Concatenate all field paths liquidity_pools_fields = ( pool_identity_fields + pool_metrics_fields + pool_revenue_fields + pool_volume_fields + pool_balances_fields + pool_rewards_fields )\n\n# Execute the query and store the results in a DataFrame liquidity_pools_df = sg.query_df(liquidity_pools_fields)\n\n# Print the results\n\nprint(\"Liquidity Pools:\")\n\nprint(liquidity_pools_df)\n\n```\n\n```python\n\nfrom datetime import datetime\n\nfrom subgrounds.subgraph import SyntheticField\n\nfrom subgrounds import Subgrounds\n\n# Initialize Subgrounds and load the subgraph sg = Subgrounds() subgraph_url = 'https://api.thegraph.com/subgraphs/name/messari/lido-ethereum' subgraph = sg.load_subgraph(subgraph_url)\n\n# Create a SyntheticField on the FinancialsDailySnapshot entity called `datetime`, which will format the timestamp field into a human readable datetime string.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c0ee0688-d92c-482c-93af-afa44ef1f9e4": {"__data__": {"id_": "c0ee0688-d92c-482c-93af-afa44ef1f9e4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "de04d79d-a139-421a-9550-532526d43bdd", "node_type": null, "metadata": {}, "hash": "a5b1ed0fda5c82ecc225c0c16b020dcee7c1b51ec147cc6c6f1766a2ea811a81"}, "3": {"node_id": "7bdbc701-f717-41aa-8b96-daefd48fe62e", "node_type": null, "metadata": {}, "hash": "f1c82e7dda411e4e87d1c49a4180de8a116f49c9a8e5cc0260da6f60f2b06b96"}}, "hash": "6594060d19840ecbde46a02869849d9fc5ec98d65144c16dac024aa7a00de40d", "text": "subgraph.FinancialsDailySnapshot.datetime = SyntheticField( lambda timestamp: str(datetime.fromtimestamp(int(timestamp))), SyntheticField.FLOAT, subgraph.FinancialsDailySnapshot.timestamp )\n\n# Define the query and field paths financials_query = subgraph.Query.financialsDailySnapshots(first=1000)\n\n# Field paths for each category protocol_revenue_fields = [ financials_query.cumulativeProtocolSideRevenueUSD, financials_query.dailyProtocolSideRevenueUSD, ]\n\nsupply_revenue_fields = [\n\nfinancials_query.cumulativeSupplySideRevenueUSD,\n\nfinancials_query.dailySupplySideRevenueUSD,\n\n]\n\ntotal_revenue_fields = [\n\nfinancials_query.cumulativeTotalRevenueUSD,\n\nfinancials_query.dailyTotalRevenueUSD,\n\n]\n\nvolume_fields = [\n\n# financials_query.cumulativeVolumeUSD,\n\n# financials_query.dailyVolumeUSD,\n\n]\n\nvalue_locked_fields = [\n\nfinancials_query.protocolControlledValueUSD,\n\nfinancials_query.totalValueLockedUSD,\n\n]\n\nidentity_fields = [\n\nfinancials_query.blockNumber,\n\nfinancials_query.id,\n\nfinancials_query.timestamp,\n\n]\n\n# Concatenate all field paths financials_fields = ( protocol_revenue_fields + supply_revenue_fields + total_revenue_fields + volume_fields + value_locked_fields + identity_fields )\n\n# Execute the query and store the results in a DataFrame financials_df = sg.query_df(financials_fields)\n\n# Print the results\n\nprint(\"Financials Daily Snapshots:\")\n\nprint(financials_df)\n\n```\n\n```python\n\nfrom subgrounds import Subgrounds\n\n# Initialize Subgrounds and load the subgraph sg = Subgrounds() subgraph_url = 'https://api.thegraph.com/subgraphs/name/messari/balancer-v2-ethereum' subgraph = sg.load_subgraph(subgraph_url)\n\n# Define the query and field paths metrics_query = subgraph.Query.usageMetricsDailySnapshots(first=1000)\n\n# Field paths for each category block_and_id_fields = [ metrics_query.blockNumber, metrics_query.id, metrics_query.timestamp, ]\n\nuser_activity_fields = [\n\nmetrics_query.cumulativeUniqueUsers,\n\nmetrics_query.dailyActiveUsers,\n\n]\n\ntransaction_count_fields = [\n\nmetrics_query.dailyDepositCount,\n\nmetrics_query.dailySwapCount,\n\nmetrics_query.dailyTransactionCount,\n\nmetrics_query.dailyWithdrawCount,\n\n]\n\npool_count_field = [\n\nmetrics_query.totalPoolCount,\n\n]\n\n# Concatenate all field paths metrics_fields = ( block_and_id_fields + user_activity_fields + transaction_count_fields + pool_count_field )\n\n# Execute the query and store the results in a DataFrame metrics_df = sg.query_df(metrics_fields)\n\n# Print the results\n\nprint(\"Usage Metrics Daily Snapshots:\")\n\nprint(metrics_df)\n\n```\n\n---\n\n```python\n\n```\n\n---\n\n# Uniswap v3 Analysis\n\n## Querying Financials Daily Snapshots\n\nThis code section retrieves information about the latest financial snapshot of a specific Uniswap v3 subgraph.It does the following:\n\nImports necessary libraries for Subgrounds and environment variables\n\nLoads environment variables from a `.env` file\n\nCreates a `Subgrounds` object for interacting with subgraphs\n\nLoads a specific Uniswap v3 subgraph with a given API endpoint\n\nQueries the `financialsDailySnapshots` endpoint with specific filter criteria\n\nConverts the query results to a Pandas dataframe and extracts the first row\n\nView the result\n\n## Querying Liquidity Pools\n\nThis code section retrieves information about the liquidity pools of a specific Uniswap v3 subgraph.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7bdbc701-f717-41aa-8b96-daefd48fe62e": {"__data__": {"id_": "7bdbc701-f717-41aa-8b96-daefd48fe62e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "c0ee0688-d92c-482c-93af-afa44ef1f9e4", "node_type": null, "metadata": {}, "hash": "6594060d19840ecbde46a02869849d9fc5ec98d65144c16dac024aa7a00de40d"}, "3": {"node_id": "4158580a-c635-40ea-9dd4-aa328f15e0ed", "node_type": null, "metadata": {}, "hash": "7afb95ca6804d85e9300563d1ae8a459c3651a0c4be2eaaf94f00c572bfefd39"}}, "hash": "f1c82e7dda411e4e87d1c49a4180de8a116f49c9a8e5cc0260da6f60f2b06b96", "text": "It does the following:\n\nQueries the `liquidityPools` endpoint with specific filter criteria\n\nConverts the query results to a Pandas dataframe and extracts the first row\n\nStores the resulting Pandas series in `res2`\n\n## Querying dexAmmProtocols\n\nThis code section retrieves information about the decentralized exchange automated market maker (DEX AMM) protocols of a specific Uniswap v3 subgraph.It does the following:\n\nQueries the `dexAmmProtocols` endpoint with specific filter criteria\n\nConverts the query results to a Pandas dataframe and extracts the first row\n\nStores the resulting Pandas series in `res3`\n\n## Querying Pools Daily Snapshots\n\nThis code section retrieves information about a specific liquidity pool on a Uniswap v3 subgraph.It does the following:\n\nQueries the `liquidityPoolDailySnapshots` endpoint with specific filter criteria\n\nQueries multiple fields from the resulting data and stores it in a JSON object\n\nPrints the resulting JSON object\n\n```python # Import the Subgrounds library from subgrounds import Subgrounds from dotenv import load_dotenv import os\n\nload_dotenv()\n\ngraph_api_key = os.getenv('GRAPH_API_KEY')\n\n# Create a new Subgrounds object sg = Subgrounds()\n\n# Load the Uniswap v3 subgraph using a specific API endpoint uni = sg.load_subgraph(f'https://gateway.thegraph.com/api/{graph_api_key}/subgraphs/id/ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7') # b2f94294e72881a7cdfe13eaba5709f4 # Query the financialsDailySnapshots endpoint with a specified order, limit, and filter criteria latest_snapshots = uni.Query.financialsDailySnapshots( orderBy=uni.FinancialsDailySnapshot.timestamp, orderDirection='desc', first=1, )\n\n# Convert the query results to a Pandas dataframe and extract the first row res = sg.query_df(latest_snapshots).squeeze()\n\n# Print the result res ``` ```python # This code queries the liquidityPools endpoint of a specific Uniswap v3 subgraph to retrieve information about the liquidity pools that exist on the network\n\n# Create a query object for the liquidityPools endpoint that specifies that the first result should be returned, the results should be sorted in descending order by the total value locked in USD, and the order should be descending.pools = uni.Query.liquidityPools( first=1, orderBy=uni.LiquidityPool.totalValueLockedUSD, orderDirection='desc' )\n\n# Execute the query, convert the results into a Pandas dataframe, and extract the first row as a Pandas series.res2 = sg.query_df(pools).squeeze()\n\n# Store the resulting Pandas series in res2.res2 ``` ```python # This code queries the dexAmmProtocols endpoint of a specific Uniswap v3 subgraph to retrieve information about the decentralized exchange automated market maker (DEX AMM) protocols that exist on the network.# Create a query object for the dexAmmProtocols endpoint that specifies that the first result should be returned.protocol = uni.Query.dexAmmProtocols( first=1 )\n\n# Execute the query, convert the results into a Pandas dataframe, and extract the first row as a Pandas series.res3 = sg.query_df(protocol).squeeze()\n\n# Store the resulting Pandas series in res3.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4158580a-c635-40ea-9dd4-aa328f15e0ed": {"__data__": {"id_": "4158580a-c635-40ea-9dd4-aa328f15e0ed", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "7bdbc701-f717-41aa-8b96-daefd48fe62e", "node_type": null, "metadata": {}, "hash": "f1c82e7dda411e4e87d1c49a4180de8a116f49c9a8e5cc0260da6f60f2b06b96"}, "3": {"node_id": "966e6fc2-9a76-43f8-b02e-3380c8c8503c", "node_type": null, "metadata": {}, "hash": "62c2fc7123da0e764da38025e5357ec2e60b252cec151b826e95f97eeb9a5677"}}, "hash": "7afb95ca6804d85e9300563d1ae8a459c3651a0c4be2eaaf94f00c572bfefd39", "text": "res3\n\n``` ```python # Query the liquidity pool daily snapshots with specified filter criteria lp = uni.Query.liquidityPoolDailySnapshots( first=1, orderBy=uni.LiquidityPoolDailySnapshot.timestamp, orderDirection='desc', where=[uni.LiquidityPoolDailySnapshot.pool == '0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640'] )\n\n# Query multiple fields from the resulting data and store in a JSON object res4 = sg.query_json([ lp.id, lp.pool.name, lp.blockNumber, lp.totalValueLockedUSD, lp.cumulativeSupplySideRevenueUSD, lp.dailySupplySideRevenueUSD, lp.cumulativeProtocolSideRevenueUSD, lp.dailyTotalRevenueUSD, lp.dailyVolumeUSD, lp.cumulativeVolumeUSD, lp.outputTokenSupply, lp.outputTokenPriceUSD, lp.stakedOutputTokenAmount, lp.inputTokenBalances, lp.inputTokenWeights, lp.rewardTokenEmissionsAmount, lp.rewardTokenEmissionsUSD, lp.dailyVolumeByTokenAmount, lp.dailyVolumeByTokenUSD, lp.protocol.cumulativeProtocolSideRevenueUSD, lp.protocol.cumulativeSupplySideRevenueUSD, lp.protocol.cumulativeTotalRevenueUSD, lp.protocol.protocolControlledValueUSD, lp.protocol.totalPoolCount, lp.protocol.totalValueLockedUSD, lp.pool.outputToken.lastPriceUSD, lp.pool.outputToken.name, ])\n\n# Print the resulting JSON object res4\n\n```\n\n```python\n\n```\n\n---\n\n# AAVE v3 Mainnet\n\n\n\n\n\nWhat is Aave?**\n\nAave is a decentralized finance protocol that allows people to lend and borrow cryptocurrencies.Lenders earn interest by depositing digital assets into specially created liquidity pools.Borrowers can then use their crypto as collateral to take out a flash loan using this liquidity.**What does this example cover?**\n\nIn this example, we utilize the Subgrounds library to interact with the AAVE v3 Ethereum subgraph and fetch data related to its various usage metrics and lending protocols.This example explains how to load a subgraph, query it, handle and transform the data returned, and even visualize it.The detailed breakdown is as follows:\n\nImporting Libraries: The subgrounds library is imported for handling decentralized subgraphs, and pandas is used for handling data manipulation.Subgrounds Initialization: A Subgrounds object is instantiated using the `Playgrounds API key`.Loading AAVE v3 Subgraph: The AAVE v3 subgraph is loaded by passing its ID to a URL string and calling `sg.load_subgraph()`.Querying Subgraph: A `UsageMetricsDailySnapshot` query is performed on the subgraph, where the first 10 entries are fetched in descending order.Data Extraction: The extracted data, including `timestamp`, `daily active borrowers`, and `daily active depositors`, are fetched into a DataFrame using `sg.query_df()`.Converting Timestamps: Two methods are demonstrated for converting timestamp data to a more human\n\nreadable format using the `SyntheticField` object and the `datetime.fromtimestamp()` function.Querying Lending Protocols: Queries are performed on the `lendingProtocols` entity of the AAVE v3 subgraph, fetching all fields and specific fields.The returned data are then fetched into a DataFrame.SyntheticField for Custom Metrics: SyntheticField objects are created to calculate custom metrics, such as the `borrow\n\ndeposit ratio`, `user engagement metrics` for borrowed funds, and average values for borrow, deposit, and liquidation per user.Fetching Market Daily Snapshots: Queries are performed on the marketDailySnapshots entity of the subgraph, fetching specific market rates, converting timestamps, and restructuring the DataFrame using the pivot() function.Data Visualization: The data are plotted using plotly, showcasing interest rates over time and daily active users against datetime.In conclusion, this code snippet effectively demonstrates how to utilize the Subgrounds library to interact with Ethereum subgraphs and process, manipulate, and visualize the extracted data.It's a useful guide for anyone looking to interact with Ethereum subgraphs and create custom metrics for data analysis.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "966e6fc2-9a76-43f8-b02e-3380c8c8503c": {"__data__": {"id_": "966e6fc2-9a76-43f8-b02e-3380c8c8503c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "4158580a-c635-40ea-9dd4-aa328f15e0ed", "node_type": null, "metadata": {}, "hash": "7afb95ca6804d85e9300563d1ae8a459c3651a0c4be2eaaf94f00c572bfefd39"}, "3": {"node_id": "39e93f87-8a64-481a-8f66-a0fb156c5576", "node_type": null, "metadata": {}, "hash": "a3bcb9b9f237f861bae859d9b15e786d916a6942314510a3faa8e20461543526"}}, "hash": "62c2fc7123da0e764da38025e5357ec2e60b252cec151b826e95f97eeb9a5677", "text": "About AAVE:\n\nAave is a decentralized finance protocol that allows people to lend and borrow cryptocurrencies.Lenders earn interest by depositing digital assets into specially created liquidity pools.Borrowers can then use their crypto as collateral to take out a flash loan using this liquidity.Aave V3, introducing important new risk mitigation features and improved capital efficiency\n\nV3 was designed with a flexible architecture for increased composability, and made it possible to build a variety of innovative features on top of the protocol such as new risk management tools that provide additional security and stability.Examples include Supply and Borrow Caps and Risk and Listing Admins.Aave V3 also improves capital efficiency and decentralized liquidity while lowering gas fees 25 percent.```python ## Playgrounds Gateway setup - visit app.playgrounds.network to get an api key to query decentralized subgraphs\n\n# Import subgrounds\n\nfrom subgrounds import Subgrounds\n\n# Instantiate subgrounds and insert Playgrounds API key into header sg = Subgrounds.from_pg_key(\"PGA_API_KEY\")\n\n# Insert desired subgraph id from decentralized subgraph.Find in subgraph url aave_v3_id = \"SUBGRAPH_ID\" ``` ```python # Load subgraph using playgrounds proxy endpoint aave_v3 = sg.load_subgraph(f\"https://api.playgrounds.network/v1/proxy/subgraphs/id/{aave_v3_id}\") ``` ```python # How to query subgraphs with subgrounds # Subgrounds allows the same arguments as you normally use on graphql\n\nusage_metrics_daily = aave_v3.Query.usageMetricsDailySnapshots(\n\nfirst = 10,\n\norderDirection = 'desc'\n\n)\n\nq_df_ex = sg.query_df([\n\nusage_metrics_daily.timestamp,\n\nusage_metrics_daily.dailyActiveBorrowers,\n\nusage_metrics_daily.dailyActiveDepositors,\n\n])\n\n```\n\n```python\n\nq_df_ex\n\n```\n\n```python\n\nfrom subgrounds.subgraph import SyntheticField\n\nfrom datetime import datetime\n\nusage_metrics_daily = aave_v3.UsageMetricsDailySnapshot\n\n# Method 1\n\nusage_metrics_daily.d_t = SyntheticField(\n\nf=lambda timestamp: str(datetime.fromtimestamp(timestamp)),\n\ntype_=SyntheticField.STRING,\n\ndeps=usage_metrics_daily.timestamp,\n\n)\n\n# Method 2: This helper constructor makes it easy to convert timestamps into datetime objects.usage_metrics_daily.datetime = SyntheticField.datetime_of_timestamp(usage_metrics_daily.timestamp)\n\nusage_metrics_daily = aave_v3.Query.usageMetricsDailySnapshots(\n\nfirst = 100,\n\norderDirection = 'desc'\n\n)\n\nsg.query_df([ usage_metrics_daily.datetime, usage_metrics_daily.d_t, usage_metrics_daily.dailyActiveBorrowers, usage_metrics_daily.dailyActiveDepositors, usage_metrics_daily.dailyActiveLiquidatees, usage_metrics_daily.dailyActiveLiquidators, ]) ``` Let's play with synthetic fields some more and create some interesting transformations.That we can query as if regular GraphQL fields.SyntheticFields can created using the constructor, allowing for much more complex transformations.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "39e93f87-8a64-481a-8f66-a0fb156c5576": {"__data__": {"id_": "39e93f87-8a64-481a-8f66-a0fb156c5576", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "966e6fc2-9a76-43f8-b02e-3380c8c8503c", "node_type": null, "metadata": {}, "hash": "62c2fc7123da0e764da38025e5357ec2e60b252cec151b826e95f97eeb9a5677"}, "3": {"node_id": "145a2d82-7eab-4646-8db2-03d4eddece95", "node_type": null, "metadata": {}, "hash": "b5404d7d678d0ccd5fab1e231b90b743423a78478045459e9a2b1983088e0902"}}, "hash": "a3bcb9b9f237f861bae859d9b15e786d916a6942314510a3faa8e20461543526", "text": "```python\n\n# Query lending protocols entitty and fields from subgraph # Here we are querying all of the fields in the lending protocols\n\naave_lending = aave_v3.Query.lendingProtocols() aave_overview = sg.query_df(aave_lending) aave_overview.squeeze() ``` ```python # Query lending protocols entitty and specific fields\n\naave_lending = aave_v3.Query.lendingProtocols()\n\naave_overview = sg.query_df([\n\naave_lending.name,\n\naave_lending.type,\n\naave_lending.cumulativeBorrowUSD,\n\naave_lending.cumulativeDepositUSD,\n\naave_lending.cumulativeLiquidateUSD,\n\naave_lending.cumulativePositionCount,\n\naave_lending.cumulativeProtocolSideRevenueUSD,\n\naave_lending.cumulativeSupplySideRevenueUSD,\n\naave_lending.cumulativeTotalRevenueUSD,\n\naave_lending.cumulativeUniqueUsers,\n\naave_lending.cumulativeUniqueBorrowers,\n\naave_lending.cumulativeUniqueDepositors,\n\naave_lending.cumulativeUniqueLiquidatees,\n\naave_lending.cumulativeUniqueLiquidators,\n\n])\n\naave_overview.squeeze()\n\n```\n\n```python\n\nfrom subgrounds.subgraph import SyntheticField\n\n# Borrow_Deposit_Ratio: Calculate borrow deposit ratio by dividing the total borrow by the total deposit aave_v3.LendingProtocol.borrow_dep_ratio = SyntheticField( lambda x, y: x/y, SyntheticField.FLOAT, [aave_v3.LendingProtocol.totalBorrowBalanceUSD, aave_v3.LendingProtocol.totalDepositBalanceUSD], )\n\nsg.query([aave_lending.totalBorrowBalanceUSD, aave_lending.totalDepositBalanceUSD, aave_lending.borrow_dep_ratio]) ``` ```python # User Engagement Metrics: You can calculate the proportion of users who have ever borrowed, # by dividing each of the cumulativeUnique... # fields by cumulativeUniqueUsers\n\naave_v3.LendingProtocol.user_engagement_borrowed = (\n\nabs(aave_v3.LendingProtocol.cumulativeUniqueBorrowers)\n\n/abs(aave_v3.LendingProtocol.cumulativeUniqueUsers)\n\n)\n\nsg.query_df([aave_lending.cumulativeUniqueBorrowers, aave_lending.cumulativeUniqueUsers, aave_lending.user_engagement_borrowed]) ``` ```python # Average Borrow, Deposit, and Liquidation Values: cumulativeBorrowUSD divided by cumulativeUniqueBorrowers, # cumulativeDepositUSD divided by cumulativeUniqueDepositors, and cumulativeLiquidateUSD divided by # cumulativeUniqueLiquidatees will give you the average amount borrowed, deposited, and liquidated per user.# Average borrow\n\naave_v3.LendingProtocol.avg_borrow_per_user = SyntheticField(\n\nlambda x, y: x/y,\n\nSyntheticField.FLOAT,\n\n[aave_v3.LendingProtocol.cumulativeBorrowUSD,\n\naave_v3.LendingProtocol.cumulativeUniqueBorrowers],\n\n)\n\n# Average deposit\n\naave_v3.LendingProtocol.avg_deposit_per_user = SyntheticField(\n\nlambda x, y: x/y,\n\nSyntheticField.FLOAT,\n\n[aave_v3.LendingProtocol.cumulativeDepositUSD,\n\naave_v3.LendingProtocol.cumulativeUniqueDepositors],\n\n)\n\n# Average liqudation per user aave_v3.LendingProtocol.avg_liquidation_per_user = SyntheticField( lambda x, y: x/y,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "145a2d82-7eab-4646-8db2-03d4eddece95": {"__data__": {"id_": "145a2d82-7eab-4646-8db2-03d4eddece95", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "39e93f87-8a64-481a-8f66-a0fb156c5576", "node_type": null, "metadata": {}, "hash": "a3bcb9b9f237f861bae859d9b15e786d916a6942314510a3faa8e20461543526"}, "3": {"node_id": "87410f2f-db61-473a-a660-1f78c4f4d406", "node_type": null, "metadata": {}, "hash": "ee644d5349a7265b72f88bd0b6428c7fe714fe91e4f506cf0aab2b8a6bd0b733"}}, "hash": "b5404d7d678d0ccd5fab1e231b90b743423a78478045459e9a2b1983088e0902", "text": "SyntheticField.FLOAT, [aave_v3.LendingProtocol.cumulativeLiquidateUSD, aave_v3.LendingProtocol.cumulativeUniqueLiquidatees], )\n\nsg.query_df([aave_lending.avg_borrow_per_user,\n\naave_lending.avg_deposit_per_user,\n\naave_lending.avg_liquidation_per_user])\n\n```\n\n```python\n\nimport pandas as pd\n\nsteth_market_id = '0x0b925ed163218f6662a35e0f0371ac234f9e9371'\n\nsnapshots = aave_v3.Query.marketDailySnapshots(\n\nfirst=100,\n\norderBy=aave_v3.MarketDailySnapshot.timestamp,\n\norderDirection='desc',\n\nwhere={\n\n'market':steth_market_id\n\n}\n\n)\n\ndf = sg.query_df([\n\nsnapshots.timestamp,\n\nsnapshots.rates.rate,\n\nsnapshots.rates.side,\n\nsnapshots.rates.type\n\n])\n\ndf['side_type'] = df['marketDailySnapshots_rates_side'] +'-' + df['marketDailySnapshots_rates_type'] df2 = df[['marketDailySnapshots_timestamp', 'marketDailySnapshots_rates_rate', 'side_type']] df2 = df2.pivot(index='marketDailySnapshots_timestamp',columns='side_type').droplevel(level=0, axis=1) df2.index = pd.to_datetime(df2.index, unit='s') df2 ``` ```python import plotly.express as px fig = px.line(df2, x=df2.index, y=\"BORROWER-STABLE\", title='STETH Interest Rates') fig.show() ``` ```python from subgrounds.contrib.plotly import Figure, Scatter\n\n# Create the Scatter trace with appropriate field paths trace = Scatter( x=usage_metrics_daily.datetime, y=usage_metrics_daily.dailyActiveUsers, )\n\n# Create the Figure instance with the trace and display it fig = Figure( subgrounds=sg, traces=trace, layout=dict( title=\"Daily Active Users vs Datetime\", xaxis=dict(title=\"Datetime\"), yaxis=dict(title=\"Daily Active Users\") ), ) fig.figure.show() ```\n\n---\n\n```python\n\n## Gateway setup\n\nfrom subgrounds import Subgrounds\n\nsg = Subgrounds.from_pg_key(\"PGA_API_KEY\")\n\nsubgraph_id = \"GELTrjPJYEzxyp6Y2CtEaYpGHcJNrJA6i5Ci4KfJSEsf\"\n\n```\n\n```python\n\nfraxlend_subgraph = sg.load_subgraph(f\"https://api.playgrounds.network/v1/proxy/subgraphs/id/{subgraph_id}\")\n\n```\n\n```python\n\nfraxlendFactories = fraxlend_subgraph.Query.fraxlendFactories()\n\nfraxlend_overview = sg.query_df([\n\nfraxlendFactories.id,\n\nfraxlendFactories.totalTVLValue,\n\nfraxlendFactories.totalBorrowedValue,\n\nfraxlendFactories.totalCollateralLockedValue,\n\nfraxlendFactories.positionCount,\n\nfraxlendFactories.pairCount,\n\nfraxlendFactories.assetTokenCount,\n\nfraxlendFactories.collateralTokenCount,\n\n])\n\nfraxlend_overview.head()\n\n```\n\n```python\n\nusers = fraxlend_subgraph.Query.users(\n\nfirst = 10\n\n)\n\nuser_metrics = sg.query_df([\n\nusers.address,\n\nusers.id,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "87410f2f-db61-473a-a660-1f78c4f4d406": {"__data__": {"id_": "87410f2f-db61-473a-a660-1f78c4f4d406", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "145a2d82-7eab-4646-8db2-03d4eddece95", "node_type": null, "metadata": {}, "hash": "b5404d7d678d0ccd5fab1e231b90b743423a78478045459e9a2b1983088e0902"}, "3": {"node_id": "a15718ec-7c32-4e83-a468-2c7cac2e498c", "node_type": null, "metadata": {}, "hash": "ff060e9ae86a76937b1498f6b4dd0251080b43b193eefcf5ed902f320200a26f"}}, "hash": "ee644d5349a7265b72f88bd0b6428c7fe714fe91e4f506cf0aab2b8a6bd0b733", "text": "])\n\n```\n\n```python\n\npositions = users.positions(\n\nfirst =10\n\n)\n\nposition_metrics = sg.query_df([\n\npositions.block,\n\npositions.timestamp,\n\npositions.id,\n\npositions.borrowedAssetShare,\n\npositions.depositedCollateralAmount,\n\npositions.lentAssetShare,\n\n])\n\n```\n\n```python\n\npairs = fraxlend_subgraph.Query.pairs(\n\nfirst = 10\n\n)\n\npairs_metrics = sg.query_df([\n\npairs.address,\n\n# pairs.borrowerWhitelistActive,\n\npairs.id,\n\n# pairs.lenderWhitelistActive,\n\n# pairs.liquidationFee,\n\n# pairs.maturity,\n\n# pairs.maxLTV,\n\n# pairs.name,\n\n# pairs.symbol,\n\n# pairs.collateral,\n\npairs.dailyHistory(first = 10),\n\n])\n\n```\n\n---\n\n## Subgrounds Tutorials: Lido Exploration\n\nThis code demonstrates how to use the Subgrounds library to interact with a specific subgraph, in this case, the Lido Ethereum subgraph, and fetch usage metrics for a given period (last 30 days).1.Import the necessary libraries: The code begins by importing the required Python libraries, including `datetime` from the standard library, and `SyntheticField` and `Subgrounds` from the `subgrounds` library.It also imports `pandas` for handling data as DataFrames.2.Initialize Subgrounds: The `Subgrounds` object is initialized as `sg`.This object serves as the main entry point for interacting with different subgraphs and fetching data using GraphQL queries.3.Load Lido Ethereum subgraph: The Lido Ethereum subgraph is loaded using its API URL.This returns a `Subgraph` object named `lido_activity`, which is used to interact with the Lido Ethereum subgraph.4.Query usage metrics daily snapshots: The code constructs a query to fetch the `usageMetricsDailySnapshots` entity from the Lido Ethereum subgraph.It specifies ordering options to sort the data by timestamp in descending order and limits the number of results to 30, effectively fetching the last 30 days of data.5.Create a SyntheticField for human-readable timestamps: A `SyntheticField` named `datetime` is created for the `UsageMetricsDailySnapshot` entity.This field takes the original `timestamp` field, converts it to a human-readable format using the `datetime.fromtimestamp()` function, and stores it as a float.This makes it easier to read and understand the timestamp data.6.Fetch data and store it in a DataFrame: The `sg.query_df()` function is used to execute the query and fetch the data.It takes a list of the fields to be fetched (timestamp, daily active users, cumulative unique users, and daily transaction count) and returns a pandas DataFrame containing the data.The primary focus of this code is to demonstrate how the Subgrounds library can be used to interact with a subgraph (Lido Ethereum subgraph) and fetch specific data using queries.This data can then be processed, manipulated, and analyzed using other Python libraries like pandas.```python\n\nfrom datetime import datetime\n\nfrom subgrounds.subgraph import SyntheticField\n\nfrom subgrounds import Subgrounds\n\nimport pandas as pd\n\n# Initialize Subgrounds\n\nsg = Subgrounds()\n\n# Load a subgraph using its API URL lido_activity = sg.load_subgraph('https://api.thegraph.com/subgraphs/name/messari/lido-ethereum')\n\n# Create a FieldPath object for the required fields in the financialsDailySnapshots entity.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a15718ec-7c32-4e83-a468-2c7cac2e498c": {"__data__": {"id_": "a15718ec-7c32-4e83-a468-2c7cac2e498c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "87410f2f-db61-473a-a660-1f78c4f4d406", "node_type": null, "metadata": {}, "hash": "ee644d5349a7265b72f88bd0b6428c7fe714fe91e4f506cf0aab2b8a6bd0b733"}, "3": {"node_id": "b5f77a82-a58b-46e7-8a16-e58602604832", "node_type": null, "metadata": {}, "hash": "aaa58755d157c7f6345de039cba97090ef84a9b567354dcbcded80135e918468"}}, "hash": "ff060e9ae86a76937b1498f6b4dd0251080b43b193eefcf5ed902f320200a26f", "text": "# Specify options to sort the data by timestamp in descending order and limit the number of results to 30. usage_daily_snapshot_30days = lido_activity.Query.usageMetricsDailySnapshots( orderBy=lido_activity.UsageMetricsDailySnapshot.timestamp, orderDirection='desc', first=30 )\n\n# Create a SyntheticField on the Swap entity called `timestamp`, which will format the timestamp field into something more human readable lido_activity.UsageMetricsDailySnapshot.datetime = SyntheticField( lambda timestamp: str(datetime.fromtimestamp(timestamp)), SyntheticField.FLOAT, lido_activity.UsageMetricsDailySnapshot.timestamp )\n\nsg.query_df([\n\nusage_daily_snapshot_30days.datetime,\n\nusage_daily_snapshot_30days.dailyActiveUsers,\n\nusage_daily_snapshot_30days.cumulativeUniqueUsers,\n\nusage_daily_snapshot_30days.dailyTransactionCount\n\n])\n\n```\n\n```python\n\n```\n\n---\n\n## Subgrounds Tutorials: Lido Exploration\n\nThis code demonstrates how to use the Subgrounds library to interact with a specific subgraph, in this case, the Lido Ethereum subgraph, and fetch finanThis code demonstrates how to use the Subgrounds library to interact with a specific subgraph, in this case, the Lido Ethereum subgraph, and fetch financial data for a given period (last 30 days).1.Import the necessary libraries: The code starts by importing the required Python libraries, including datetime from the standard library, and `SyntheticField` and `Subgrounds` from the `subgrounds` library.It also imports `pandas` for handling data as DataFrames.2.Initialize Subgrounds: The `Subgrounds` object is initialized as `sg`.This object serves as the main entry point for interacting with different subgraphs and fetching data using GraphQL queries.3.Load Lido Ethereum subgraph: The Lido Ethereum subgraph is loaded using its API URL.This returns a `Subgraph` object named `lido_activity`, which is used to interact with the Lido Ethereum subgraph.4.Query financials daily snapshots: The code constructs a query to fetch the `financialsDailySnapshots` entity from the Lido Ethereum subgraph.It specifies ordering options to sort the data by timestamp in descending order and limits the number of results to 30, effectively fetching the last 30 days of data.5.Create a SyntheticField for human-readable timestamps: A `SyntheticField` named `datetime` is created for the `FinancialsDailySnapshot` entity.This field takes the original timestamp field, converts it to a human-readable format using the `datetime.fromtimestamp()` function, and stores it as a float.This makes it easier to read and understand the timestamp data.6.Fetch data and store it in a DataFrame: The `sg.query_df()` function is used to execute the query and fetch the data.It takes a list of the fields to be fetched (timestamp, cumulative protocol-side revenue, cumulative total revenue, cumulative supply-side revenue, daily protocol-side revenue, daily total revenue, daily supply-side revenue, total value locked, and protocol-controlled value) and returns a pandas DataFrame containing the data.The main focus of this code is to demonstrate how the Subgrounds library can be used to interact with a subgraph (Lido Ethereum subgraph) and fetch specific financial data using queries.This data can then be processed, manipulated, and analyzed using other Python libraries like pandas.```python\n\nfrom datetime import datetime\n\nfrom subgrounds.subgraph import SyntheticField\n\nfrom subgrounds import Subgrounds\n\nimport pandas as pd\n\n# Initialize Subgrounds\n\nsg = Subgrounds()\n\n# Load a subgraph using its API URL lido_activity = sg.load_subgraph('https://api.thegraph.com/subgraphs/name/messari/lido-ethereum')\n\n# Create a FieldPath object for the required fields in the financialsDailySnapshots entity.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b5f77a82-a58b-46e7-8a16-e58602604832": {"__data__": {"id_": "b5f77a82-a58b-46e7-8a16-e58602604832", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "a15718ec-7c32-4e83-a468-2c7cac2e498c", "node_type": null, "metadata": {}, "hash": "ff060e9ae86a76937b1498f6b4dd0251080b43b193eefcf5ed902f320200a26f"}, "3": {"node_id": "1f49895a-20c2-407f-a01c-18ac948ba573", "node_type": null, "metadata": {}, "hash": "c41d98413a028d14fbf1ff62236bba7c8510b8f705f48dc1588865aa80312e99"}}, "hash": "aaa58755d157c7f6345de039cba97090ef84a9b567354dcbcded80135e918468", "text": "# Specify options to sort the data by timestamp in descending order and limit the number of results to 30. financials_daily_snapshot_30days = lido_activity.Query.financialsDailySnapshots( orderBy=lido_activity.FinancialsDailySnapshot.timestamp, orderDirection='desc', first=30 )\n\n# Create a SyntheticField on the Swap entity called `timestamp`, which will format the timestamp field into something more human readable lido_activity.FinancialsDailySnapshot.datetime = SyntheticField( lambda timestamp: str(datetime.fromtimestamp(timestamp)), SyntheticField.FLOAT, lido_activity.FinancialsDailySnapshot.timestamp )\n\nsg.query_df([\n\nfinancials_daily_snapshot_30days.datetime,\n\nfinancials_daily_snapshot_30days.cumulativeProtocolSideRevenueUSD,\n\nfinancials_daily_snapshot_30days.cumulativeTotalRevenueUSD,\n\nfinancials_daily_snapshot_30days.cumulativeSupplySideRevenueUSD,\n\nfinancials_daily_snapshot_30days.dailyProtocolSideRevenueUSD,\n\nfinancials_daily_snapshot_30days.dailyTotalRevenueUSD,\n\nfinancials_daily_snapshot_30days.dailySupplySideRevenueUSD,\n\nfinancials_daily_snapshot_30days.totalValueLockedUSD,\n\nfinancials_daily_snapshot_30days.protocolControlledValueUSD\n\n])\n\n```\n\n```python\n\n```\n\n---\n\n## Subgrounds Tutorials: Lido Exploration\n\nThis code demonstrates how to use the Subgrounds library to interact with the Lido Ethereum subgraph and fetch specific financial data for a particular pool with the pool's ID.The data is then processed, manipulated, and displayed in a human-readable format.Import the necessary libraries: The code starts by importing the required Python libraries, including `datetime` from the standard library, and `SyntheticField` and `Subgrounds` from the `subgrounds` library.It also imports `pandas` and `numpy` for handling data as DataFrames and performing numerical operations.Initialize Subgrounds: The `Subground`s object is initialized as `sg`.This object serves as the main entry point for interacting with different subgraphs and fetching data using GraphQL queries.Load Lido Ethereum subgraph: The Lido Ethereum subgraph is loaded using its API URL.This returns a `Subgraph` object named `lido_pool_stETH`, which is used to interact with the Lido Ethereum subgraph.Query pool data: The code constructs a query to fetch the `pools` entity from the Lido Ethereum subgraph.It specifies ordering options to sort the data by `createdTimestamp` in descending order and limits the number of results to 30.The `where` clause filters the results to only include the pool with the specified ID.Create a SyntheticField for human\n\nreadable timestamps: A `SyntheticField` named `datetime` is created for the `Pool` entity.This field takes the original `createdTimestamp` field, converts it to a human\n\nreadable format using the `datetime.fromtimestamp()` function, and stores it as a float.This makes it easier to read and understand the timestamp data.Create a SyntheticField for decimal conversion: A `SyntheticField` named `inputTokenBalance_decimalConv` is created for the `Pool` entity.This field takes the original `inputTokenBalances` field, divides it by 10^18 to convert it to a decimal representation, and stores it as a float.Fetch data and store it in a DataFrame: The `sg.query_df()` function is used to execute the query and fetch the data.It takes a list of the fields to be fetched (created timestamp, cumulative protocol\n\nside revenue, cumulative supply\n\nside revenue, cumulative total revenue, input token balance, output token supply, and total value locked) and returns a pandas DataFrame containing the data.Squeeze the DataFrame: The `pool_summary` DataFrame is squeezed using the `squeeze()` function, which turns it into a pandas Series named `squeezed_pool_summary`.Format the data: A custom function named `format_decimal()` is defined to format the numbers in the Series to a specified number of decimal places.The `squeezed_pool_summary` Series is then passed through this function, resulting in a new Series named `decimal_pool_summary` with formatted numbers.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1f49895a-20c2-407f-a01c-18ac948ba573": {"__data__": {"id_": "1f49895a-20c2-407f-a01c-18ac948ba573", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "b5f77a82-a58b-46e7-8a16-e58602604832", "node_type": null, "metadata": {}, "hash": "aaa58755d157c7f6345de039cba97090ef84a9b567354dcbcded80135e918468"}, "3": {"node_id": "e4403e21-e33e-4acd-abbf-3768a59219a4", "node_type": null, "metadata": {}, "hash": "13dd12ac371f8eb1c2e329a6599a9f28666b3d1e966893b6b130030d4bf3b102"}}, "hash": "c41d98413a028d14fbf1ff62236bba7c8510b8f705f48dc1588865aa80312e99", "text": "Print the resulting Series: The `decimal_pool_summary` Series is printed to display the fetched and formatted financial data.The main focus of this code is to demonstrate how the Subgrounds library can be used to interact with a subgraph (Lido Ethereum subgraph) and fetch specific financial data for a particular pool using queries.This data can then be processed, manipulated, and displayed in a human-readable format using other Python libraries like pandas and numpy.```python\n\nfrom datetime import datetime\n\nfrom subgrounds.subgraph import SyntheticField\n\nfrom subgrounds import Subgrounds\n\nimport pandas as pd\n\nimport numpy as np\n\n# Initialize Subgrounds\n\nsg = Subgrounds()\n\n# Load a subgraph using its API URL lido_pool_stETH = sg.load_subgraph('https://api.thegraph.com/subgraphs/name/messari/lido-ethereum')\n\n# Create a FieldPath object for the required fields in the financialsDailySnapshots entity.# Specify options to sort the data by timestamp in descending order and limit the number of results to 30. lido_pool_stETH_pool_summary = lido_pool_stETH.Query.pools( orderBy=lido_pool_stETH.Pool.createdTimestamp, orderDirection='desc', first=30, where=[ lido_pool_stETH.Pool.id == \"0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84\" ] )\n\n# Create a SyntheticField on the Swap entity called `timestamp`, which will format the timestamp field into something more human readable lido_pool_stETH.Pool.datetime = SyntheticField( lambda createdTimestamp: str(datetime.fromtimestamp(createdTimestamp)), SyntheticField.FLOAT, lido_pool_stETH.Pool.createdTimestamp )\n\n# Create a SyntheticField on the Swap entity called `timestamp`, which will format the timestamp field into something more human readable lido_pool_stETH.Pool.inputTokenBalance_decimalConv = SyntheticField( lambda x: x[0] / (10**18) if type(x) is list else x / (10**18), SyntheticField.FLOAT, lido_pool_stETH.Pool.inputTokenBalances )\n\nlido_pool_stETH.Pool.outputTokenSupply_decimalConv = SyntheticField( lambda x: x[0] / (10**18) if type(x) is list else x / (10**18), SyntheticField.FLOAT, lido_pool_stETH.Pool.outputTokenSupply )\n\n# lido_pool_stETH.Pool.inputTokenBalance_decimalConv = lido_pool_stETH.Pool.inputTokenBalances / (10**18)\n\npool_summary = sg.query_df([\n\nlido_pool_stETH_pool_summary.createdTimestamp,\n\nlido_pool_stETH_pool_summary.cumulativeProtocolSideRevenueUSD,\n\nlido_pool_stETH_pool_summary.cumulativeSupplySideRevenueUSD,\n\nlido_pool_stETH_pool_summary.cumulativeTotalRevenueUSD,\n\nlido_pool_stETH_pool_summary.inputTokenBalance_decimalConv,\n\nlido_pool_stETH_pool_summary.outputTokenSupply_decimalConv,\n\nlido_pool_stETH_pool_summary.totalValueLockedUSD\n\n])\n\npool_creation = sg.query_df([\n\nlido_pool_stETH_pool_summary.datetime,\n\n])\n\n# squeezed_pool_summary = pool_summary.astype('float64').squeeze()\n\nsqueezed_pool_summary = pool_summary.squeeze()\n\nsqueezed_pool_creation = pool_creation.squeeze()\n\ndef format_decimal(number, decimal_places=4):\n\nreturn f\"{number:.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e4403e21-e33e-4acd-abbf-3768a59219a4": {"__data__": {"id_": "e4403e21-e33e-4acd-abbf-3768a59219a4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "1f49895a-20c2-407f-a01c-18ac948ba573", "node_type": null, "metadata": {}, "hash": "c41d98413a028d14fbf1ff62236bba7c8510b8f705f48dc1588865aa80312e99"}, "3": {"node_id": "931eadd7-e714-436a-bfc5-c0453d6216e5", "node_type": null, "metadata": {}, "hash": "29c4b21d6d98c90aece433d3d22d065be5c1f776a006955dcf056c72f8aa4156"}}, "hash": "13dd12ac371f8eb1c2e329a6599a9f28666b3d1e966893b6b130030d4bf3b102", "text": "{decimal_places}f}\"\n\n# Assuming your squeezed DataFrame is named 'squeezed_pool_summary' decimal_pool_summary = squeezed_pool_summary.apply(format_decimal)\n\n# Print the resulting Series print(f\"Pool creation date and time: {squeezed_pool_creation}\") print(\"Pool summary:\") print(decimal_pool_summary) ``` ```python\n\n```\n\n---\n\n## Subgrounds Tutorials: RocketPool_Snapshot\n\nIn this example, we are using SyntheticFields to create new fields that do not exist in the original data source.These new fields are calculated based on existing fields in the financialsDailySnapshots entity.First, we create a FieldPath object to query the required fields from the financialsDailySnapshots entity, sorted by timestamp in descending order and limited to the last 30 entries.Next, we create a synthetic field `datetime` in the FinancialsDailySnapshot entity to convert the timestamp field into a human-readable format.Then, we define three more synthetic fields.`revDiffRevenueUSD30` calculates the difference in revenue between the dailyProtocolSideRevenueUSD and dailySupplySideRevenueUSD fields over the past 30 days.`avgDailyRevenueUSD30` calculates the average of the dailyProtocolSideRevenueUSD and dailySupplySideRevenueUSD fields over the past 30 days.`revenueMargin30` calculates the percentage change in revenue between the dailyProtocolSideRevenueUSD and dailySupplySideRevenueUSD fields over the past 30 days.Finally, we query the required fields, including the newly created synthetic fields, and flatten the data into a single DataFrame for analysis.```python\n\nfrom datetime import datetime\n\nfrom subgrounds.subgraph import SyntheticField\n\nfrom subgrounds import Subgrounds\n\nimport pandas as pd\n\n# Initialize Subgrounds\n\nsg = Subgrounds()\n\n# Load a subgraph using its API URL financials_daily_snapshots = sg.load_subgraph('https://api.thegraph.com/subgraphs/name/messari/rocket-pool-ethereum')\n\n# Create a FieldPath object for the required fields in the financialsDailySnapshots entity.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "931eadd7-e714-436a-bfc5-c0453d6216e5": {"__data__": {"id_": "931eadd7-e714-436a-bfc5-c0453d6216e5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "e4403e21-e33e-4acd-abbf-3768a59219a4", "node_type": null, "metadata": {}, "hash": "13dd12ac371f8eb1c2e329a6599a9f28666b3d1e966893b6b130030d4bf3b102"}, "3": {"node_id": "f48b46d4-4906-43cb-8e23-56888faf773e", "node_type": null, "metadata": {}, "hash": "b97d66f3e1763b1ca7f67b962eb77ed06f7b60177222df389757e061b58acc3a"}}, "hash": "29c4b21d6d98c90aece433d3d22d065be5c1f776a006955dcf056c72f8aa4156", "text": "# Specify options to sort the data by timestamp in descending order and limit the number of results to 30. financials_daily_snapshot_30days = financials_daily_snapshots.Query.financialsDailySnapshots( orderBy=financials_daily_snapshots.FinancialsDailySnapshot.timestamp, orderDirection='desc', first=30 )\n\n# Create a SyntheticField on the Swap entity called `timestamp`, which will format the timestamp field into something more human readable financials_daily_snapshots.FinancialsDailySnapshot.datetime = SyntheticField( lambda timestamp: str(datetime.fromtimestamp(timestamp)), SyntheticField.FLOAT, financials_daily_snapshots.FinancialsDailySnapshot.timestamp )\n\n# Define a synthetic field to calculate the daily revenue difference for the past 30 days financials_daily_snapshots.FinancialsDailySnapshot.revDiffRevenueUSD30 = SyntheticField( lambda x, y: abs(x - y), SyntheticField.FLOAT, [financials_daily_snapshots.FinancialsDailySnapshot.dailyProtocolSideRevenueUSD, financials_daily_snapshots.FinancialsDailySnapshot.dailySupplySideRevenueUSD], )\n\n# the average daily revenue financials_daily_snapshots.FinancialsDailySnapshot.avgDailyRevenueUSD30 = SyntheticField( lambda x, y: (x + y) / 2, SyntheticField.FLOAT, [financials_daily_snapshots.FinancialsDailySnapshot.dailyProtocolSideRevenueUSD, financials_daily_snapshots.FinancialsDailySnapshot.dailySupplySideRevenueUSD], )\n\n# Create a SyntheticField for the percentage change in daily revenue over the past 30 days financials_daily_snapshots.FinancialsDailySnapshot.revenueMargin30 = SyntheticField( lambda x, y: x / y, SyntheticField.FLOAT, [financials_daily_snapshots.FinancialsDailySnapshot.dailyProtocolSideRevenueUSD, financials_daily_snapshots.FinancialsDailySnapshot.dailySupplySideRevenueUSD], )\n\n# Query data flattened to a single DataFrame sg.query_df([ financials_daily_snapshot_30days.timestamp, financials_daily_snapshot_30days.datetime, financials_daily_snapshot_30days.blockNumber, financials_daily_snapshot_30days.cumulativeProtocolSideRevenueUSD, financials_daily_snapshot_30days.cumulativeProtocolSideRevenueUSD, financials_daily_snapshot_30days.cumulativeSupplySideRevenueUSD, financials_daily_snapshot_30days.cumulativeTotalRevenueUSD, financials_daily_snapshot_30days.dailyProtocolSideRevenueUSD, financials_daily_snapshot_30days.dailySupplySideRevenueUSD, financials_daily_snapshot_30days.dailyTotalRevenueUSD, financials_daily_snapshot_30days.revDiffRevenueUSD30, financials_daily_snapshot_30days.avgDailyRevenueUSD30, financials_daily_snapshot_30days.revenueMargin30,\n\n])\n\n```\n\n```python\n\n```\n\n---\n\n## Subgrounds Tutorials: RocketPool x Lido Exploration\n\nThis code demonstrates how to use the Subgrounds library to analyze and compare revenue and usage data for two DeFi protocols, Lido and Rocket Pool.The Subgrounds library provides an easy-to-use interface to fetch and manipulate data from The Graph, a decentralized protocol for indexing and querying data from blockchains like Ethereum.In the code, we first import the necessary libraries, such as `Subgrounds`, `SyntheticField`, `datetime`, and `panda`s.We then initialize a `Subground`s instance, which is used to interact with subgraphs from The Graph.We load the Lido and Rocket Pool subgraphs using their API URLs by calling the `load_subgraph` method.This allows us to query data from these subgraphs easily.For protocol `revenue analysis`, we query the `financials daily snapshots` for both protocols and fetch the latest snapshot to compare the `cumulative supply-side`, `protocol-side`, and `total revenue`.We store the comparison in a pandas DataFrame and print it out.For protocol usage analysis, we query the usage metrics daily snapshots for both protocols and fetch the data for the past 30 days.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f48b46d4-4906-43cb-8e23-56888faf773e": {"__data__": {"id_": "f48b46d4-4906-43cb-8e23-56888faf773e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "931eadd7-e714-436a-bfc5-c0453d6216e5", "node_type": null, "metadata": {}, "hash": "29c4b21d6d98c90aece433d3d22d065be5c1f776a006955dcf056c72f8aa4156"}, "3": {"node_id": "6f7f2d1a-b14f-4208-b8b1-dfe72f7e5e98", "node_type": null, "metadata": {}, "hash": "3f628fe6b2d729148a4b3e8387ea242fcc1e5af1c3644f00923c027460b6d537"}}, "hash": "b97d66f3e1763b1ca7f67b962eb77ed06f7b60177222df389757e061b58acc3a", "text": "We convert the timestamp field to a human-readable format using the `apply` method on the pandas DataFrame.We then calculate the daily and hourly transaction counts and active user counts for both protocols, store the results in DataFrames, and print them out.Throughout the code, Subgrounds is used to load subgraphs, query data from the subgraphs, and fetch the queried data in pandas DataFrames, making it easy to manipulate and analyze the data.```python\n\nfrom subgrounds import Subgrounds\n\nfrom subgrounds.subgraph import SyntheticField\n\nfrom datetime import datetime\n\nimport pandas as pd\n\n# Initialize Subgrounds\n\nsg = Subgrounds()\n\n# Load subgraphs for Lido and rocketPool lido_subgraph = sg.load_subgraph('https://api.thegraph.com/subgraphs/name/messari/lido-ethereum') rocketPool_subgraph = sg.load_subgraph('https://api.thegraph.com/subgraphs/name/messari/rocket-pool-ethereum')\n\n# Query financials daily snapshots for both protocols (sorted by timestamp) lido_financials = lido_subgraph.Query.financialsDailySnapshots(orderBy=lido_subgraph.FinancialsDailySnapshot.timestamp, orderDirection='desc') rocketPool_financials = rocketPool_subgraph.Query.financialsDailySnapshots(orderBy=rocketPool_subgraph.FinancialsDailySnapshot.timestamp, orderDirection='desc')\n\n# Fetch the latest financials snapshot for both protocols lido_financials_latest = sg.query_df([ lido_financials.cumulativeSupplySideRevenueUSD, lido_financials.cumulativeProtocolSideRevenueUSD, lido_financials.cumulativeTotalRevenueUSD]).iloc[0]\n\nrocketPool_financials_latest = sg.query_df([\n\nrocketPool_financials.cumulativeSupplySideRevenueUSD,\n\nrocketPool_financials.cumulativeProtocolSideRevenueUSD,\n\nrocketPool_financials.cumulativeTotalRevenueUSD]).iloc[0]\n\n# Compare cumulative supply-side, protocol-side, and total revenue for both protocols revenue_comparison = pd.DataFrame({'Lido': lido_financials_latest, 'rocketPool': rocketPool_financials_latest}) print(revenue_comparison) ``` ## Subgrounds Tutorials: RocketPool x Lido Exploration - Continued\n\nThis code uses the Subgrounds library to interact with the Lido and Rocket Pool subgraphs and fetch usage metrics daily snapshots for both protocols over the past 30 days.Here's a step-by-step explanation of the code:\n\nImport required libraries: Subgrounds, SyntheticField, datetime, and pandas.Initialize Subgrounds with `sg = Subgrounds()`.Load Lido and Rocket Pool subgraphs using their respective API URLs.Query the usage metrics daily snapshots for both protocols, ordering by timestamp in descending order, and limit the results to the last 30 days.Fetch the usage metrics for the past 30 days for both protocols by querying the daily timestamp, daily transaction count, and daily active users.Combine the results from both protocols into two separate DataFrames: `lido_usage_30` and `rocket_pool_usage_30`.The code also includes commented-out sections for styling the DataFrames and displaying them in a more visually appealing format.To use this functionality, you can uncomment the sections that define the `style_dataframe` function, format the timestamps in the DataFrames, and style and display the resulting DataFrames.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "6f7f2d1a-b14f-4208-b8b1-dfe72f7e5e98": {"__data__": {"id_": "6f7f2d1a-b14f-4208-b8b1-dfe72f7e5e98", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "f48b46d4-4906-43cb-8e23-56888faf773e", "node_type": null, "metadata": {}, "hash": "b97d66f3e1763b1ca7f67b962eb77ed06f7b60177222df389757e061b58acc3a"}, "3": {"node_id": "e8d99d60-52bc-453e-9fce-223ec717b2c9", "node_type": null, "metadata": {}, "hash": "aba64bb6a6aa7aa85c62463b9ac5a147fd8378190a668ed0bbc08efedfcba325"}}, "hash": "3f628fe6b2d729148a4b3e8387ea242fcc1e5af1c3644f00923c027460b6d537", "text": "```python\n\nfrom subgrounds import Subgrounds\n\nfrom subgrounds.subgraph import SyntheticField\n\nfrom datetime import datetime\n\nimport pandas as pd\n\n# Initialize Subgrounds\n\nsg = Subgrounds()\n\n# Load subgraphs for Lido and rocketPool_subgraph lido_subgraph = sg.load_subgraph('https://api.thegraph.com/subgraphs/name/messari/lido-ethereum') rocketPool_subgraph = sg.load_subgraph('https://api.thegraph.com/subgraphs/name/messari/rocket-pool-ethereum')\n\n# Query usage metrics daily snapshots for both protocols (sorted by timestamp) lido_usage = lido_subgraph.Query.usageMetricsDailySnapshots( orderBy=lido_subgraph.UsageMetricsDailySnapshot.timestamp, orderDirection='desc', first=30)\n\nrocket_pool_usage = rocketPool_subgraph.Query.usageMetricsDailySnapshots(\n\norderBy=rocketPool_subgraph.UsageMetricsDailySnapshot.timestamp,\n\norderDirection='desc',\n\nfirst=30)\n\n# Fetch usage metrics for the past 30 days for both protocols lido_usage_30days = sg.query_df([ lido_usage.timestamp, lido_usage.dailyTransactionCount, lido_usage.dailyActiveUsers])\n\nrocket_pool_usage_30days = sg.query_df([\n\nrocket_pool_usage.timestamp,\n\nrocket_pool_usage.dailyTransactionCount,\n\nrocket_pool_usage.dailyActiveUsers])\n\n[lido_usage_30,rocket_pool_usage_30] = sg.query_df([\n\nlido_usage.timestamp,\n\nlido_usage.dailyTransactionCount,\n\nlido_usage.dailyActiveUsers,\n\nrocket_pool_usage.timestamp,\n\nrocket_pool_usage.dailyTransactionCount,\n\nrocket_pool_usage.dailyActiveUsers\n\n])\n\nrocket_pool_usage_30\n\n```\n\n```python\n\nlido_usage_30\n\n```\n\n```python\n\n```\n\n```python\n\n```\n\n---\n\nIntroduce getting started with Gateway to:\n\n1.Create new account and log in to Playgrounds App\n\n2.Walkthrough the app homepage\n\n3.Show how to generate Playgrounds Proxy Api Key\n\n4.Show how to load Playgrounds Proxy Api Key into Subgrounds\n\n5.Copy Aave v3 subgraph id and load it into Subgrounds\n\n6.Perform basic query on Aave v3 subgraph, showcasing we are querying decentralized subgraph\n\n## Gateway setup and basics\n\nTo query a decentralized network subgraph with id subgraph-id,\n\nyou can make a POST request to the Playgrounds proxy endpoint:\n\n`https://api.playgrounds.network/v1/proxy/subgraphs/id/[subgraph\n\n\n\nid]`\n\nThe POST request itself will have to contain the Playgrounds API key you generated earlier as the value of the Playgrounds-Api-Token header. The rest of the request will be the same as the request you would usually make to the Graph's decentralized network.\n\nLet's try an example of Playgrounds Gateway request sent using curl in terminal!\n\n```curl https://api.playgrounds.network/v1/proxy/subgraphs/id/ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7 \\\n\nH 'Content\n\nType: application/json' \\\n\nH 'Playgrounds\n\nApi\n\nKey: PG_API_KEY' \\\n\nd '{\"query\":\"{protocols {id}}\"}'```\n\nThe endpoint mirrors the Graph decentralized network gateway endpoint:\n\n`https://gateway.thegraph.com/api/[api\n\n\n\nkey]/subgraphs/id/[subgraph\n\n\n\nid]`\n\nKey difference is the API key is not part of the URL\n\n`https://api.playgrounds.network/v1/proxy/subgraphs/id/[subgraph", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e8d99d60-52bc-453e-9fce-223ec717b2c9": {"__data__": {"id_": "e8d99d60-52bc-453e-9fce-223ec717b2c9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6888df80-3d59-4e62-8979-60bf80e6f230", "node_type": null, "metadata": {}, "hash": "5f122bb001629130be7c9f7c95a5a3ac91b6b8ca1172017f0f486e85d83c834f"}, "2": {"node_id": "6f7f2d1a-b14f-4208-b8b1-dfe72f7e5e98", "node_type": null, "metadata": {}, "hash": "3f628fe6b2d729148a4b3e8387ea242fcc1e5af1c3644f00923c027460b6d537"}}, "hash": "aba64bb6a6aa7aa85c62463b9ac5a147fd8378190a668ed0bbc08efedfcba325", "text": "id]`\n\n```python\n\n# Import subgrounds\n\nfrom subgrounds import Subgrounds\n\n# Instantiate subgrounds and insert Playgrounds API key into header sg = Subgrounds.from_pg_key(\"pg-AqAFS8G3TN3Kagdgw2MrGjFvDGUgxImS\")\n\n# Insert desired subgraph id from decentralized subgraph. Find in subgraph url uniswap_id = \"ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7\" ``` ```python subgraph = sg.load_subgraph( f\"https://api.playgrounds.network/v1/proxy/subgraphs/id/{uniswap_id}\")\n\nsg.query_df([\n\nsubgraph.Query.tokens.id,\n\nsubgraph.Query.tokens.symbol,\n\n])\n\n```\n\n---", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}}, "docstore/ref_doc_info": {"6888df80-3d59-4e62-8979-60bf80e6f230": {"node_ids": ["0dd9ca4b-f0bf-4786-a1a3-5a892a15ccf8", "febede2c-0580-4e76-b883-13d304850516", "2055f65e-ef86-40e9-a4f8-d36f812d9fe9", "b70f778c-4633-42b4-be11-4e66a9447118", "1ee03137-0f38-4ddd-8aa3-63aa28ac1c4a", "ac5a5374-ef74-4e02-804d-9e70e30c9428", "14b75e40-443e-487c-8f7e-18920c42580d", "e9fddf6f-4682-431a-b171-b6b5fe96b200", "cee5bef6-f750-4e85-a9f4-c1cb2ae89bd7", "1536558c-fc71-4d4d-8656-7590bdaf9a2d", "26b07f71-b2fa-4f1f-b9b1-a6b39265fccf", "8399ff61-10ec-4b36-ae1c-fe9c1690fec5", "5ab17022-5121-46c1-8025-44c2884069a9", "9598ae58-6791-48ed-ae7e-531f0c37f2e2", "191d1eba-9cee-4331-9c2c-cce7bc16a5d5", "575cb777-a82d-45d5-9619-fd358ccf61b7", "17767a90-8bc8-409f-bee0-c90ff7650c43", "af85d3f6-c500-41de-bdd7-780f77d03b98", "b5f73156-24af-45f7-af53-f07ad49b60a4", "0f8b564d-15dc-4d8c-9206-6d59f52e3ed0", "36c6bcb9-0263-47e2-9845-bb1ef8a9d33e", "e13ed7b0-889d-4963-a78e-4e5c98b0b838", "08475c8e-fff7-4bb3-b0f9-9f5f1a21d8a6", "befbf254-cc94-4ed5-a97c-982433f389d6", "2f31b042-3456-4641-9cf9-9621f23c3d55", "36f64dad-b373-42ca-8ef0-993a521b1aae", "1dddc5f7-7a51-4188-8168-bdefb4497934", "62814325-a688-4d18-a881-6392055f6b7e", "7293036a-853a-44ff-8f27-3930add251c7", "2e715348-b562-4564-bdda-bec2931f11aa", "db86de7b-957b-47ed-b579-5bf321cdb005", "a282b293-4e32-441f-9c6c-a4fbbec494a9", "4f641019-71e3-4fc8-8cc5-ed8e468fed03", "f64074a6-4da7-462a-80d5-28fb3a8596b0", "2691bbf9-b3e6-4658-859b-69102f39a367", "d1b4ae7c-35b3-4971-8c54-a7d544831910", "0f956dc1-900b-4f5e-a9f1-62263fb5d0ba", "e93e9137-2561-409b-82d4-c320d3fc1b21", "8b39b92b-eb73-47ca-aae2-3864a235fdfb", "523ccbe2-4bee-4ec3-b060-094cd0db8d2f", "cc6f9d3e-d61a-4347-818c-e42ebc1fbebf", "63bac93d-76c4-4966-bbf5-b884c3d63608", "9bb308f6-5e3c-4f18-baff-a9c2171ceafa", "b8077d67-e2e6-45e7-a813-4b1f94d29ca4", "c54dfa4e-8f49-4a25-b334-fc77086cd190", "9ba2513e-35c5-4389-b2ca-2920b87797ae", "45dc3ffa-01ec-4885-a593-628e6abc58ab", "df85356b-0623-4e7a-89e9-cb40867e66b3", "7f9ac8e5-0c9f-4d58-85a9-e933b9a38ecf", "61c889ef-aaf3-4f55-a366-d00170881834", "536866bf-bc69-4883-a08b-eae52c0a2889", "0e10d85d-6931-4044-803c-917dd6579d11", "323dba3c-f5c1-46b5-934a-ae6707a289f5", "7e5ddc51-8443-48fc-b883-22e174fa8500", "f4edfacd-0a2b-4bef-8485-3346b9da7b7f", "0791498d-4d53-468e-847e-2af7fe6908f4", "27322c01-00c0-47e3-b951-1b35cd4940f6", "c3ef5a56-3abb-4b31-8cf6-9ca6d992796e", "27503548-e47a-4dc1-93cf-fa8ba904a8b6", "3ceffdd7-bb55-432d-96ae-de9c0ed22675", "6dcc5551-b7ec-4101-a79b-6cf88bcd0e2e", "949f6e0e-546b-4fac-af73-10bfb5083816", "3f12f444-d3b1-4d72-81fa-9b7e2fc4dfea", "5d7f4772-81ff-4dd6-a39b-4959652e9917", "6059e66f-8e9c-442e-b929-bd183fda6911", "d4e5c146-261f-4786-870c-e798469a42df", "4c447626-e273-4907-ad81-7652748fefef", "aa0079f1-5296-470a-be4d-82d7dcaf243d", "040fe259-3f70-46fe-8675-ac6a79689ede", "d2bffe09-495c-49c0-97c3-f2b1d488ce96", "f672153f-2f80-4253-8a2f-ea40405445e1", "98d8f26e-da10-42b4-b51b-7a9ee17f14d0", "37c94eb0-f121-4cb4-93cd-1a493c1b48ce", "d87ef362-5644-4bad-8113-6b3f9f42b68f", "67a2aa5c-e978-46ee-a74d-748e0148ab50", "af962e47-df7c-41ea-8bf8-5cd48a1330a1", "a1504708-830b-41aa-98df-3169775b8751", "e709efcf-6b5f-45fe-8a50-17001553a908", "83ba0778-c1f5-477f-bc8d-fd797da1472e", "3e08cc67-3287-4b45-bbab-274b86455874", "1bd7149e-1433-4989-a865-39c2e5bbf5de", "239c52cf-6f39-4126-bcfd-31b269e23165", "5404d721-d0c1-48a6-b2b7-d0a546c15943", "de04d79d-a139-421a-9550-532526d43bdd", "c0ee0688-d92c-482c-93af-afa44ef1f9e4", "7bdbc701-f717-41aa-8b96-daefd48fe62e", "4158580a-c635-40ea-9dd4-aa328f15e0ed", "966e6fc2-9a76-43f8-b02e-3380c8c8503c", "39e93f87-8a64-481a-8f66-a0fb156c5576", "145a2d82-7eab-4646-8db2-03d4eddece95", "87410f2f-db61-473a-a660-1f78c4f4d406", "a15718ec-7c32-4e83-a468-2c7cac2e498c", "b5f77a82-a58b-46e7-8a16-e58602604832", "1f49895a-20c2-407f-a01c-18ac948ba573", "e4403e21-e33e-4acd-abbf-3768a59219a4", "931eadd7-e714-436a-bfc5-c0453d6216e5", "f48b46d4-4906-43cb-8e23-56888faf773e", "6f7f2d1a-b14f-4208-b8b1-dfe72f7e5e98", "e8d99d60-52bc-453e-9fce-223ec717b2c9"], "metadata": {}}}}